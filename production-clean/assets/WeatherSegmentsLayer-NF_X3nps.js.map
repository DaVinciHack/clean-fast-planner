{"version":3,"file":"WeatherSegmentsLayer-NF_X3nps.js","sources":["../../src/components/fast-planner/modules/layers/WeatherSegmentsLayer.js"],"sourcesContent":["/**\n * WeatherSegmentsLayer.js\n * \n * Map layer for displaying Norwegian weather segments with aviation-specific coloring\n */\n\nclass WeatherSegmentsLayer {\n  constructor(map) {\n    this.map = map;\n    this.layerId = 'weather-segments-layer';\n    this.alternateLayerId = 'alternate-segments-layer';\n    this.isVisible = false;\n    this.currentSegments = [];\n    this.currentAlternates = [];\n  }\n  \n  /**\n   * Add weather segments to the map\n   */\n  addWeatherSegments(weatherData) {\n    if (!weatherData || !this.map) return;\n    \n    this.currentSegments = weatherData.segments || [];\n    this.currentAlternates = weatherData.alternates || [];\n    \n    this.addMainSegments();\n    this.addAlternateSegments();\n    \n    this.isVisible = true;\n  }\n  \n  /**\n   * Add main route weather segments to map\n   */\n  addMainSegments() {\n    if (!this.currentSegments.length) return;\n    \n    this.removeMainSegments();\n    \n    const features = this.currentSegments\n      .filter(segment => segment.geoPoint)\n      .map(segment => this.createSegmentFeature(segment, 'main'));\n    \n    if (features.length === 0) return;\n    \n    // Add source and layers for main segments\n    this.map.addSource(this.layerId, {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: features\n      }\n    });\n    \n    // Add circle layer for segment points with ranking colors\n    this.map.addLayer({\n      id: this.layerId,\n      type: 'circle',\n      source: this.layerId,\n      paint: {\n        'circle-radius': [\n          'case',\n          ['get', 'priority'], 1, 12, 2, 10, 3, 8, 6\n        ],\n        'circle-color': ['get', 'color'],\n        'circle-stroke-width': 2,\n        'circle-stroke-color': '#ffffff',\n        'circle-opacity': 0.8\n      }\n    });\n  }  \n  /**\n   * Create feature for a weather segment\n   */\n  createSegmentFeature(segment, type) {\n    const coords = this.parseGeoPoint(segment.geoPoint);\n    if (!coords) return null;\n    \n    return {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: coords\n      },\n      properties: {\n        airportIcao: segment.airportIcao || 'Unknown',\n        color: segment.color || '#2196F3',\n        priority: segment.priority || 5,\n        windSpeed: segment.windSpeed || 0,\n        windDirection: segment.windDirection || 0,\n        ranking: segment.alternateRanking || 0,\n        type: type,\n        warnings: segment.warnings || '',\n        isRig: segment.isRig || false,\n        araRequired: segment.araRequired || false\n      }\n    };\n  }\n  \n  /**\n   * Parse geoPoint string to coordinates\n   */\n  parseGeoPoint(geoPoint) {\n    if (!geoPoint) return null;\n    \n    try {\n      const parts = geoPoint.split(',');\n      if (parts.length === 2) {\n        const lat = parseFloat(parts[0].trim());\n        const lon = parseFloat(parts[1].trim());\n        if (!isNaN(lat) && !isNaN(lon)) {\n          return [lon, lat]; // GeoJSON format: [longitude, latitude]\n        }\n      }\n    } catch (error) {\n      console.error('WeatherSegmentsLayer: Error parsing geoPoint:', geoPoint, error);\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Add alternate segments\n   */\n  addAlternateSegments() {\n    // Implementation for alternate segments\n    console.log('WeatherSegmentsLayer: Adding alternate segments');\n  }\n  \n  /**\n   * Remove main segments\n   */\n  removeMainSegments() {\n    try {\n      if (this.map.getLayer(this.layerId)) {\n        this.map.removeLayer(this.layerId);\n      }\n      if (this.map.getSource(this.layerId)) {\n        this.map.removeSource(this.layerId);\n      }\n    } catch (error) {\n      console.error('WeatherSegmentsLayer: Error removing main segments:', error);\n    }\n  }\n  \n  /**\n   * Toggle layer visibility\n   */\n  toggle() {\n    this.isVisible = !this.isVisible;\n    const visibility = this.isVisible ? 'visible' : 'none';\n    \n    if (this.map.getLayer(this.layerId)) {\n      this.map.setLayoutProperty(this.layerId, 'visibility', visibility);\n    }\n  }\n}\n\nexport default WeatherSegmentsLayer;"],"names":[],"mappings":"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"}