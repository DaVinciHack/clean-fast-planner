# Manual Update Instructions

1. First, find the function definition for the unified handler (we just added this) and make sure it looks like this:

```javascript
/**
 * Unified function to handle flight settings changes
 * Updates both individual state variables and the flight calculations module
 */
const handleFlightSettingChange = (settingName, value) => {
  console.log(`Updating flight setting: ${settingName} = ${value}`);
  
  // Update the flightSettings object
  setFlightSettings(prevSettings => ({
    ...prevSettings,
    [settingName]: value
  }));
  
  // Update the flight calculations module if it exists
  if (flightCalculationsRef.current) {
    flightCalculationsRef.current.updateConfig({
      [settingName]: value
    });
  }
};
```

2. Find the handleReserveFuelChange function and modify it to include the handleFlightSettingChange call:

```javascript
const handleReserveFuelChange = (fuel) => {
  setReserveFuel(fuel);
  handleFlightSettingChange('reserveFuel', fuel);
  
  // Recalculate route stats with the new reserve fuel
  const wps = waypointManagerRef.current?.getWaypoints() || [];
  if (wps.length >= 2) {
    const coordinates = wps.map(wp => wp.coords);
    const stats = calculateRouteStats(coordinates);
    
    // CRITICAL FIX: Force update the route with new leg info
    if (waypointManagerRef.current) {
      setTimeout(() => {
        waypointManagerRef.current.updateRouteInfoFromStats(stats);
      }, 50);
    }
  }
};
```

3. Find the handlePayloadWeightChange function and modify it similarly:

```javascript
const handlePayloadWeightChange = (weight) => {
  setPayloadWeight(weight);
  handleFlightSettingChange('payloadWeight', weight);
  
  // Recalculate route stats with the new payload weight
  const wps = waypointManagerRef.current?.getWaypoints() || [];
  if (wps.length >= 2) {
    const coordinates = wps.map(wp => wp.coords);
    const stats = calculateRouteStats(coordinates);
    
    // Force update the route with new leg info
    if (waypointManagerRef.current) {
      setTimeout(() => {
        waypointManagerRef.current.updateRouteInfoFromStats(stats);
      }, 50);
    }
  }
};
```

4. Add the following useEffect after the flight calculations module useEffect:

```javascript
// Ensure flight calculation settings are synchronized with the module
useEffect(() => {
  if (flightCalculationsRef.current) {
    // Sync all state values to the calculator when they change
    flightCalculationsRef.current.updateConfig({
      passengerWeight,
      reserveFuel,
      deckTimePerStop,
      deckFuelFlow,
      taxiFuel,
      contingencyFuelPercent,
      payloadWeight
    });
    
    console.log("Flight calculation settings synchronized with calculator module");
    
    // Recalculate route if we have waypoints
    const wps = waypointManagerRef.current?.getWaypoints() || [];
    if (wps.length >= 2) {
      const coordinates = wps.map(wp => wp.coords);
      calculateRouteStats(coordinates);
    }
  }
}, [passengerWeight, reserveFuel, deckTimePerStop, deckFuelFlow, taxiFuel, contingencyFuelPercent, payloadWeight]);
```