import React, { useState, useRef, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import client from '../../client';
import './FastPlannerStyles.css';

// Initialize loading indicator effect
const initializeLoadingIndicator = () => {
  if (window.LoadingIndicator && window.LoadingIndicator.initializeRouteStatsLoader) {
    setTimeout(() => {
      window.LoadingIndicator.initializeRouteStatsLoader();
    }, 1000); // Delay to ensure the DOM is ready
  }
};

// Import UI components
import {
  LeftPanel,
  RightPanel,
  MapComponent,
  RouteStatsCard
} from './components';

// Import enhanced fuel calculator modules
import enhancedFuelCalculator from './modules/calculations/fuel';
import FuelIntegration from './modules/calculations/fuel/FuelIntegration';
import { EnhancedFuelDisplay } from './components/fuel';

// Import all manager modules
import { 
  MapManager, 
  WaypointManager, 
  PlatformManager, 
  RouteCalculator, 
  RegionManager, 
  FavoriteLocationsManager, 
  AircraftManager,
  MapInteractionHandler,
  AppSettingsManager
} from './modules';
import FlightCalculations from './modules/calculations/FlightCalculations';

/**
 * FastPlannerApp Component
 * 
 * A simplified version that directly replicates ModularFastPlannerComponent 
 * functionality without context providers for now.
 */
const FastPlannerApp = () => {
  const { isAuthenticated, userDetails, userName, login } = useAuth();
  
  // Core modules refs
  const mapManagerRef = useRef(null);
  const waypointManagerRef = useRef(null);
  const platformManagerRef = useRef(null);
  const routeCalculatorRef = useRef(null);
  const regionManagerRef = useRef(null);
  const favoriteLocationsManagerRef = useRef(null);
  const aircraftManagerRef = useRef(null); 
  const flightCalculationsRef = useRef(null);
  const mapInteractionHandlerRef = useRef(null);
  const appSettingsManagerRef = useRef(null);
  
  // Initialize loading indicator on first render
  useEffect(() => {
    initializeLoadingIndicator();
  }, []);
  
  // UI state
  const [forceUpdate, setForceUpdate] = useState(0);
  const [routeInput, setRouteInput] = useState('');
  const [airportData, setAirportData] = useState([]);
  const [favoriteLocations, setFavoriteLocations] = useState([]);
  const [leftPanelVisible, setLeftPanelVisible] = useState(false);
  const [rightPanelVisible, setRightPanelVisible] = useState(true);
  const [platformsVisible, setPlatformsVisible] = useState(true);
  const [platformsLoaded, setPlatformsLoaded] = useState(false);
  const [rigsLoading, setRigsLoading] = useState(false);
  const [rigsError, setRigsError] = useState(null);
  const [waypoints, setWaypoints] = useState([]);
  const [stopCards, setStopCards] = useState([]);
  
  // Region state
  const [regions, setRegions] = useState([]);
  const [currentRegion, setCurrentRegion] = useState(null);
  const [regionLoading, setRegionLoading] = useState(false);
  
  // Aircraft and route state
  const [aircraftType, setAircraftType] = useState('');
  const [aircraftRegistration, setAircraftRegistration] = useState('');
  const [selectedAircraft, setSelectedAircraft] = useState(null);
  const [aircraftList, setAircraftList] = useState([]);
  const [aircraftTypes, setAircraftTypes] = useState([]);
  const [aircraftsByType, setAircraftsByType] = useState({});
  const [aircraftLoading, setAircraftLoading] = useState(false);
  const [payloadWeight, setPayloadWeight] = useState(2000);
  const [reserveFuel, setReserveFuel] = useState(600);
  const [routeStats, setRouteStats] = useState(null);
  const [weather, setWeather] = useState({ windSpeed: 15, windDirection: 270 });
  
  // Flight calculation settings
  const [flightSettings, setFlightSettings] = useState({
    passengerWeight: 0,
    contingencyFuelPercent: 10,
    taxiFuel: 50,
    reserveFuel: 0,
    deckTimePerStop: 5,
    deckFuelFlow: 400,
  });
  
  // Compatible with ModularFastPlannerComponent
  const [deckTimePerStop, setDeckTimePerStop] = useState(5); 
  const [deckFuelPerStop, setDeckFuelPerStop] = useState(100);
  const [deckFuelFlow, setDeckFuelFlow] = useState(400);
  const [passengerWeight, setPassengerWeight] = useState(220);
  const [cargoWeight, setCargoWeight] = useState(0);
  const [taxiFuel, setTaxiFuel] = useState(50);
  const [contingencyFuelPercent, setContingencyFuelPercent] = useState(10);
  const [reserveMethod, setReserveMethod] = useState('fixed');
  
  // Helper function to update flight settings
  const updateFlightSetting = (settingName, value) => {
    // Update the individual setting state
    switch (settingName) {
      case 'passengerWeight':
        setPassengerWeight(value);
        break;
      case 'deckTimePerStop':
        setDeckTimePerStop(value);
        break;
      case 'deckFuelFlow':
        setDeckFuelFlow(value);
        break;
      case 'deckFuelPerStop':
        setDeckFuelPerStop(value);
        break;
      case 'taxiFuel':
        setTaxiFuel(value);
        break;
      case 'contingencyFuelPercent':
        setContingencyFuelPercent(value);
        break;
      case 'cargoWeight':
        setCargoWeight(value);
        break;
      case 'reserveMethod':
        setReserveMethod(value);
        break;
      default:
        console.warn(`Unknown flight setting: ${settingName}`);
    }
    
    // Update the flightSettings object
    const updatedSettings = {
      ...flightSettings,
      [settingName]: value
    };
    setFlightSettings(updatedSettings);
    
    // Update Flight Calculations module
    if (flightCalculationsRef.current) {
      flightCalculationsRef.current.updateConfig(updatedSettings);
    }
    
    // Update Enhanced Fuel Calculator
    FuelIntegration.initializeFuelCalculator({
      passengerWeight,
      taxiFuel,
      contingencyFuelPercent,
      reserveFuel: updatedSettings.reserveFuel || reserveFuel,
      deckTimePerStop,
      deckFuelFlow,
      cargoWeight: cargoWeight || 0
    });
    
    // Save to AppSettingsManager
    if (appSettingsManagerRef.current) {
      appSettingsManagerRef.current.updateFlightSettings({
        [settingName]: value
      });
    }
    
    // Recalculate route if we have an aircraft and waypoints
    if (selectedAircraft && waypointManagerRef.current && waypointManagerRef.current.getWaypoints().length >= 2) {
      // Extract coordinates from waypoints
      const coordinates = waypointManagerRef.current.getWaypoints().map(wp => wp.coords);
      
      // Calculate route statistics using the correct method
      routeCalculatorRef.current.calculateRouteStats(coordinates, {
        selectedAircraft: selectedAircraft, // Pass the full aircraft object
        payloadWeight: cargoWeight || 0,
        reserveFuel: updatedSettings.reserveFuel || reserveFuel,
        weather: weather // Include weather data in calculations
      });
    }
  };

  // Initialize enhanced fuel calculator with current flight settings
  useEffect(() => {
    if (flightSettings) {
      console.log("FastPlannerApp: Initializing enhanced fuel calculator...");
      FuelIntegration.initializeFuelCalculator({
        passengerWeight,
        taxiFuel,
        contingencyFuelPercent,
        reserveFuel,
        deckTimePerStop,
        deckFuelFlow,
        cargoWeight: cargoWeight || 0
      });
    }
  }, [passengerWeight, taxiFuel, contingencyFuelPercent, reserveFuel, deckTimePerStop, deckFuelFlow, cargoWeight, flightSettings]);

  // Initialize managers
  useEffect(() => {
    console.log("FastPlannerApp: Initializing managers...");
    
    // Check if OSDK client is available
    if (!client) {
      console.error("OSDK Client Error: client is null or undefined");
      
      // Create error dialog
      const errorDialog = document.createElement('div');
      errorDialog.style.position = 'fixed';
      errorDialog.style.top = '0';
      errorDialog.style.left = '0';
      errorDialog.style.right = '0';
      errorDialog.style.bottom = '0';
      errorDialog.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
      errorDialog.style.display = 'flex';
      errorDialog.style.alignItems = 'center';
      errorDialog.style.justifyContent = 'center';
      errorDialog.style.zIndex = '9999';
      
      const dialogContent = document.createElement('div');
      dialogContent.style.backgroundColor = 'white';
      dialogContent.style.padding = '20px';
      dialogContent.style.borderRadius = '8px';
      dialogContent.style.maxWidth = '500px';
      dialogContent.style.textAlign = 'center';
      
      dialogContent.innerHTML = `
        <h3 style="color: #dc3545; margin-top: 0;">OSDK Client Error</h3>
        <p>The Palantir OSDK client failed to initialize properly. This will prevent loading aircraft and platform data.</p>
        <p>Error: Client is null or undefined</p>
        <p>Please reload the page and try again. If the problem persists, check the console for more details.</p>
        <div style="margin-top: 20px; display: flex; justify-content: center; gap: 10px;">
          <button id="dismiss-btn" style="padding: 8px 16px; border-radius: 4px; border: none; cursor: pointer; background-color: #f8f9fa; color: #212529;">Dismiss</button>
          <button id="reload-btn" style="padding: 8px 16px; border-radius: 4px; border: none; cursor: pointer; background-color: #007bff; color: white;">Reload Page</button>
        </div>
      `;
      
      errorDialog.appendChild(dialogContent);
      document.body.appendChild(errorDialog);
      
      // Add event listeners to buttons
      document.getElementById('dismiss-btn').addEventListener('click', () => {
        document.body.removeChild(errorDialog);
      });
      
      document.getElementById('reload-btn').addEventListener('click', () => {
        window.location.reload();
      });
    }
    
    // Create managers if they don't exist - order matters!
    // 1. First create the map manager
    if (!mapManagerRef.current) {
      console.log("FastPlannerApp: Creating MapManager instance");
      mapManagerRef.current = new MapManager();
      
      // Directly initialize the map
      setTimeout(() => {
        console.log("FastPlannerApp: Delayed map initialization");
        mapManagerRef.current.loadScripts()
          .then(() => {
            console.log("FastPlannerApp: Scripts loaded, initializing map...");
            return mapManagerRef.current.initializeMap('fast-planner-map');
          })
          .then((mapInstance) => {
            console.log("FastPlannerApp: Map initialization complete");
            if (handleMapReady) {
              handleMapReady(mapInstance);
            }
            
            // Once the map is ready, load aircraft
            if (aircraftManagerRef.current && client) {
              console.log("Loading aircraft after map initialization");
              aircraftManagerRef.current.loadAircraftFromOSDK(client)
                .then(() => {
                  console.log("Aircraft loaded successfully");
                  // Force update to refresh the UI with aircraft data
                  setForceUpdate(prev => prev + 1);
                })
                .catch(error => {
                  console.error("Error loading aircraft:", error);
                });
            }
          })
          .catch(error => {
            console.error("FastPlannerApp: Error initializing map:", error);
          });
      }, 500);
    }
    
    // Create favoriteLocationsManager first so it's available to other components
    if (!favoriteLocationsManagerRef.current) {
      console.log("FastPlannerApp: Creating FavoriteLocationsManager instance");
      favoriteLocationsManagerRef.current = new FavoriteLocationsManager();
      
      // Set up callback for when favorites change
      favoriteLocationsManagerRef.current.setCallback('onChange', (favorites) => {
        if (currentRegion) {
          console.log(`Favorites changed, updating UI for region ${currentRegion.id}`);
          const regionFavorites = favoriteLocationsManagerRef.current.getFavoriteLocationsByRegion(currentRegion.id);
          setFavoriteLocations(regionFavorites);
        }
      });
    }
    
    // 2. Create platform manager before region manager
    if (!platformManagerRef.current && mapManagerRef.current) {
      console.log("FastPlannerApp: Creating PlatformManager instance");
      platformManagerRef.current = new PlatformManager(mapManagerRef.current);
    }
    
    // 3. Create region manager after platform manager
    if (!regionManagerRef.current && mapManagerRef.current && platformManagerRef.current) {
      console.log("FastPlannerApp: Creating RegionManager instance");
      regionManagerRef.current = new RegionManager(mapManagerRef.current, platformManagerRef.current);
      
      // Set up region manager callbacks
      regionManagerRef.current.setCallback('onRegionLoaded', (data) => {
        console.log(`Region loaded: ${data.region.name}`);
        setRegionLoading(false);
      });
      
      regionManagerRef.current.setCallback('onRegionChanged', (region) => {
        console.log(`Region changed to: ${region.name}`);
        setCurrentRegion(region);
        
        // IMPORTANT: Load favorites for this region
        if (favoriteLocationsManagerRef.current && region) {
          console.log(`Loading favorites for region ${region.id}`);
          const regionFavorites = favoriteLocationsManagerRef.current.getFavoriteLocationsByRegion(region.id);
          console.log(`Found ${regionFavorites.length} favorites for region ${region.id}:`, regionFavorites);
          setFavoriteLocations(regionFavorites);
        }
      });
      
      regionManagerRef.current.setCallback('onError', (error) => {
        console.error(`Region manager error: ${error}`);
        setRegionLoading(false);
      });
    }
    
    if (!waypointManagerRef.current) {
      console.log("FastPlannerApp: Creating WaypointManager instance");
      waypointManagerRef.current = new WaypointManager(mapManagerRef.current);
    }
    
    // Add platformManager to waypointManager if both exist
    if (waypointManagerRef.current && platformManagerRef.current) {
      waypointManagerRef.current.setPlatformManager(platformManagerRef.current);
    }
    
    // Remove this duplicate initialization
    if (!routeCalculatorRef.current) {
      console.log("FastPlannerApp: Creating RouteCalculator instance");
      routeCalculatorRef.current = new RouteCalculator();
      
      // Make the route calculator accessible globally for basic calculations
      window.routeCalculator = routeCalculatorRef.current;
      
      // Set up route calculator callbacks
      routeCalculatorRef.current.setCallback('onCalculationComplete', (stats) => {
        console.log('🔄 Route calculation complete with stats:', {
          totalDistance: stats?.totalDistance, 
          estimatedTime: stats?.estimatedTime,
          timeHours: stats?.timeHours,
          legCount: stats?.legs?.length || 0,
          hasWind: stats?.windAdjusted || false
        });
        
        // Check if stats are valid before updating
        if (!stats || !stats.timeHours || stats.timeHours === 0) {
          console.error('🔄 Received invalid route stats with zero time:', stats);
          return; // Don't update with invalid stats
        }
        
        // Store previous route stats
        const prevStats = {...routeStats};
        
        // Add enhanced fuel calculations if we have an aircraft and waypoints
        if (stats && waypoints.length >= 2 && selectedAircraft) {
          // Calculate enhanced fuel requirements using the new calculator
          console.log('🔥 Calculating enhanced fuel requirements from onCalculationComplete callback...');
          
          try {
            const enhancedResults = FuelIntegration.calculateFuelRequirements(
              waypoints,
              selectedAircraft,
              weather,
              {
                passengerWeight,
                taxiFuel,
                contingencyFuelPercent,
                reserveFuel,
                deckTimePerStop,
                deckFuelFlow,
                cargoWeight: cargoWeight || 0
              }
            );
            
            // If we got enhanced results, merge them with the stats
            if (enhancedResults) {
              console.log('🔥 Using enhanced fuel calculation results');
              stats = enhancedResults;
            }
          } catch (error) {
            // Log the error but continue with basic stats
            console.error('🔥 Error calculating enhanced fuel:', error);
          }
        }
        
        // Update the route stats state with the new data
        setRouteStats(stats);
        
        // CRITICAL FIX: Make the route stats accessible globally for WaypointManager
        window.currentRouteStats = stats;
        
        // CRITICAL FIX: Force route display update when weather stats change
        // This ensures the route line labels are updated with new time values
        if (waypointManagerRef.current) {
          // Check if weather data has changed from previous stats
          const hasWindChanged = prevStats?.windData?.windSpeed !== stats?.windData?.windSpeed || 
                                 prevStats?.windData?.windDirection !== stats?.windData?.windDirection;
          
          // Force route update whenever new calculation occurs, especially with wind changes
          console.log('🔄 Forcing route display update with new stats, wind changed:', hasWindChanged);
          
          // First clear the route display to ensure a clean redraw
          waypointManagerRef.current.updateRoute(null);
          
          // Then redraw with the new stats after a small delay
          setTimeout(() => {
            waypointManagerRef.current.updateRoute(stats);
            console.log('🔄 Route display updated with new stats');
          }, 50);
        }
        
        // When route stats are updated, update stop cards too
        if (stats && waypoints.length >= 2 && selectedAircraft) {
          console.log('🔄 Generating stop cards with stats:', {
            totalDistance: stats.totalDistance,
            estimatedTime: stats.estimatedTime,
            timeHours: stats.timeHours,
            hasEnhancedResults: stats.enhancedResults ? true : false
          });
          
          // Generate stop cards using the new stats
          const newStopCards = generateStopCardsData(waypoints, stats, selectedAircraft, weather);
          console.log('🔄 Generated stop cards data:', {
            count: newStopCards.length,
            first: newStopCards.length > 0 ? {
              id: newStopCards[0].id,
              name: newStopCards[0].stopName,
              isDeparture: newStopCards[0].isDeparture
            } : 'none',
            last: newStopCards.length > 1 ? {
              id: newStopCards[newStopCards.length-1].id,
              name: newStopCards[newStopCards.length-1].stopName,
              isDestination: newStopCards[newStopCards.length-1].isDestination
            } : 'none'
          });
          
          // Update the stop cards state
          setStopCards(newStopCards);
        }
      });
      
      // We no longer need the DirectTimeFix as RouteCalculator now uses the same calculation method as StopCards
      console.log("FastPlannerApp: RouteCalculator configured with accurate wind calculations");
    }
    
    if (!aircraftManagerRef.current) {
      console.log("FastPlannerApp: Creating AircraftManager instance");
      aircraftManagerRef.current = new AircraftManager();
      
      // Set up aircraft manager callbacks
      aircraftManagerRef.current.setCallback('onAircraftLoaded', (aircraftList) => {
        console.log(`Loaded ${aircraftList.length} total aircraft`);
        setAircraftList(aircraftList);
        
        // After loading all aircraft, filter by region if we have a current region
        if (currentRegion) {
          aircraftManagerRef.current.filterAircraft(currentRegion.id);
        }
      });
      
      aircraftManagerRef.current.setCallback('onAircraftFiltered', (filteredAircraft, type) => {
        console.log(`Filtered to ${filteredAircraft.length} aircraft of type ${type || 'all'}`);
        
        if (type) {
          // Update the aircraftsByType with the filtered aircraft for this type
          setAircraftsByType(prev => ({
            ...prev,
            [type]: filteredAircraft
          }));
        } else {
          // If no type specified, organize all aircraft by type
          const byType = {};
          const availableTypes = [];
          
          // Create empty buckets for each type
          filteredAircraft.forEach(aircraft => {
            const type = aircraft.modelType || 'Unknown';
            if (!byType[type]) {
              byType[type] = [];
              availableTypes.push(type);
            }
            byType[type].push(aircraft);
          });
          
          console.log(`Available aircraft types: ${availableTypes.join(', ')}`);
          setAircraftTypes(availableTypes);
          setAircraftsByType(byType);
        }
        
        setAircraftLoading(false);
      });
    }
    
    if (!flightCalculationsRef.current) {
      console.log("FastPlannerApp: Creating FlightCalculations instance");
      flightCalculationsRef.current = new FlightCalculations();
      
      // Update with current settings
      flightCalculationsRef.current.updateConfig({
        passengerWeight,
        contingencyFuelPercent,
        taxiFuel,
        reserveFuel,
        deckTimePerStop,
        deckFuelFlow,
      });
      
      // Import and make WindCalculations available globally
      import('./modules/calculations/WindCalculations')
        .then(WindCalc => {
          // Make WindCalculations globally available
          window.WindCalculations = WindCalc;
          console.log("WindCalculations module imported and made globally available");
        })
        .catch(error => {
          console.error("Failed to import WindCalculations module:", error);
        });
    }
    
    // Initialize the AppSettingsManager 
    if (!appSettingsManagerRef.current) {
      console.log("FastPlannerApp: Creating AppSettingsManager instance");
      appSettingsManagerRef.current = new AppSettingsManager();
      
      // Set callbacks for settings changes
      appSettingsManagerRef.current.setCallback('onRegionChange', (regionId) => {
        console.log(`AppSettingsManager: Region changed to ${regionId}`);
        // We don't automatically change the region here to avoid infinite loops
        // The region is changed via the changeRegion function which also updates the setting
      });
      
      appSettingsManagerRef.current.setCallback('onAircraftChange', (aircraft) => {
        console.log(`AppSettingsManager: Aircraft changed to ${aircraft.type} ${aircraft.registration}`);
        // Update aircraft selection if it doesn't match current selection
        if (aircraft.type !== aircraftType) {
          setAircraftType(aircraft.type);
        }
        if (aircraft.registration !== aircraftRegistration) {
          setAircraftRegistration(aircraft.registration);
        }
      });
      
      appSettingsManagerRef.current.setCallback('onFlightSettingsChange', (settings) => {
        console.log('AppSettingsManager: Flight settings changed');
        setFlightSettings(settings);
        
        // Update individual settings
        setPassengerWeight(settings.passengerWeight);
        setContingencyFuelPercent(settings.contingencyFuelPercent);
        setTaxiFuel(settings.taxiFuel);
        setReserveFuel(settings.reserveFuel);
        setDeckTimePerStop(settings.deckTimePerStop);
        setDeckFuelFlow(settings.deckFuelFlow);
      });
      
      appSettingsManagerRef.current.setCallback('onUISettingsChange', (uiSettings) => {
        console.log('AppSettingsManager: UI settings changed');
        // Update UI visibility settings
        if (leftPanelVisible !== uiSettings.leftPanelVisible) {
          setLeftPanelVisible(uiSettings.leftPanelVisible);
        }
        if (rightPanelVisible !== uiSettings.rightPanelVisible) {
          setRightPanelVisible(uiSettings.rightPanelVisible);
        }
        if (platformsVisible !== uiSettings.platformsVisible) {
          setPlatformsVisible(uiSettings.platformsVisible);
        }
      });
      
      // Load any saved settings
      const savedSettings = appSettingsManagerRef.current.getAllSettings();
      
      // Apply flight settings
      const flightSettings = savedSettings.flightSettings;
      setPassengerWeight(flightSettings.passengerWeight);
      setContingencyFuelPercent(flightSettings.contingencyFuelPercent);
      setTaxiFuel(flightSettings.taxiFuel);
      setReserveFuel(flightSettings.reserveFuel || 600); // Ensure we have a default value
      setDeckTimePerStop(flightSettings.deckTimePerStop);
      setDeckFuelFlow(flightSettings.deckFuelFlow);
      
      // Apply UI settings
      const uiSettings = savedSettings.uiSettings;
      setLeftPanelVisible(uiSettings.leftPanelVisible);
      setRightPanelVisible(uiSettings.rightPanelVisible);
      setPlatformsVisible(uiSettings.platformsVisible);
    }
    
    // Create the map interaction handler last, after other managers are initialized
    if (!mapInteractionHandlerRef.current && 
        mapManagerRef.current && 
        waypointManagerRef.current && 
        platformManagerRef.current) {
      console.log("FastPlannerApp: Creating MapInteractionHandler instance");
      mapInteractionHandlerRef.current = new MapInteractionHandler(
        mapManagerRef.current,
        waypointManagerRef.current,
        platformManagerRef.current
      );
      
      // Set up callbacks
      mapInteractionHandlerRef.current.setCallback('onLeftPanelOpen', () => {
        if (!leftPanelVisible) {
          console.log('Opening left panel due to map click');
          setLeftPanelVisible(true);
        }
      });
      
      mapInteractionHandlerRef.current.setCallback('onMapClick', async (data) => {
        console.log('🗺️ Map click callback received', data);
        // Don't return anything from this callback to avoid async issues
        try {
          // Create a local copy of the data to avoid reference issues
          const clickData = {...data};
          // Process the waypoint addition
          await addWaypoint(clickData);
        } catch (error) {
          console.error('Error processing map click:', error);
        }
      });
      
      mapInteractionHandlerRef.current.setCallback('onPlatformClick', async (data) => {
        console.log('🏢 Platform click callback received', data);
        // Don't return anything from this callback to avoid async issues
        try {
          // Create a local copy of the data to avoid reference issues
          const clickData = {...data};
          // Process the waypoint addition
          await addWaypoint(clickData);
        } catch (error) {
          console.error('Error processing platform click:', error);
        }
      });
      
      mapInteractionHandlerRef.current.setCallback('onRouteClick', async (data) => {
        console.log('🛣️ Route click callback received', data);
        
        try {
          // Create a local copy of the data
          const clickData = {...data};
          
          // If we have a nearest rig and it's close
          if (clickData.nearestRig && clickData.nearestRig.distance < 1) {
            // Add the rig instead of the clicked point
            console.log('🛣️ Adding rig at route click:', clickData.nearestRig.name);
            waypointManagerRef.current.addWaypointAtIndex(
              clickData.nearestRig.coordinates, 
              clickData.nearestRig.name, 
              clickData.insertIndex
            );
          } else {
            // Add the clicked point
            console.log('🛣️ Adding waypoint at route click');
            waypointManagerRef.current.addWaypointAtIndex(
              [clickData.lngLat.lng, clickData.lngLat.lat], 
              null, 
              clickData.insertIndex
            );
          }
          
          // Get updated waypoints
          const updatedWaypoints = waypointManagerRef.current.getWaypoints();
          
          // Update the waypoints state - wait for it to complete
          await new Promise(resolve => {
            setWaypoints([...updatedWaypoints]);
            setTimeout(resolve, 0);
          });
          
          // CRITICAL FIX: Recalculate route MANUALLY and update stats directly
          if (updatedWaypoints.length >= 2 && selectedAircraft) {
            // Extract coordinates from waypoints
            const coordinates = updatedWaypoints.map(wp => wp.coords);
            
            console.log('🛣️ Manually recalculating route for route click');
            
            // First calculate directly to get immediate results
            if (routeCalculatorRef.current) {
              console.log('🛣️ Direct calculation for route click');
              const calcResults = routeCalculatorRef.current.calculateRouteStats(coordinates, {
                selectedAircraft: selectedAircraft,
                payloadWeight: cargoWeight || 0,
                reserveFuel: reserveFuel,
                weather: weather
              });
              
              // Directly update route stats
              if (calcResults && calcResults.timeHours > 0) {
                console.log('🛣️ Directly updating route stats from calculation:', {
                  distance: calcResults.totalDistance,
                  time: calcResults.estimatedTime
                });
                
                // Update the state - wait for it to complete
                await new Promise(resolve => {
                  setRouteStats(calcResults);
                  setTimeout(resolve, 0);
                });
                
                // Generate stop cards with the FRESH calculation results
                const newStopCards = generateStopCardsData(updatedWaypoints, calcResults, selectedAircraft, weather);
                
                // Update stop cards - wait for it to complete
                await new Promise(resolve => {
                  setStopCards(newStopCards);
                  setTimeout(resolve, 0);
                });
                
                // Force a rerender
                setForceUpdate(prev => prev + 1);
              }
            }
          }
        } catch (error) {
          console.error('Error processing route click:', error);
        }
      });
      
      mapInteractionHandlerRef.current.setCallback('onError', (error) => {
        console.error(`MapInteractionHandler error: ${error}`);
      });
      
      // We'll initialize it in the handleMapReady function when the map is ready
    }
    
    // ADD EVENT LISTENER FOR SAVING AIRCRAFT SETTINGS
    // This handles the custom event from the SettingsCard to save aircraft-specific settings
    const handleSaveAircraftSettings = (event) => {
      const { key, settings } = event.detail;
      console.log(`Saving settings for ${key}:`, settings);
      
      try {
        // Save the settings to localStorage
        localStorage.setItem(`fastPlanner_settings_${key}`, JSON.stringify(settings));
        console.log(`Successfully saved settings for ${key}`);
        
        // If this is also the current aircraft, update the active settings
        if (selectedAircraft && key === `aircraft_${selectedAircraft.registration}`) {
          console.log('Updating current flight settings with saved aircraft settings');
          
          // Update all the settings
          if (settings.passengerWeight !== undefined) setPassengerWeight(settings.passengerWeight);
          if (settings.contingencyFuelPercent !== undefined) setContingencyFuelPercent(settings.contingencyFuelPercent);
          if (settings.taxiFuel !== undefined) setTaxiFuel(settings.taxiFuel);
          if (settings.reserveFuel !== undefined) setReserveFuel(settings.reserveFuel);
          if (settings.deckTimePerStop !== undefined) setDeckTimePerStop(settings.deckTimePerStop);
          if (settings.deckFuelFlow !== undefined) setDeckFuelFlow(settings.deckFuelFlow);
          if (settings.deckFuelPerStop !== undefined) setDeckFuelPerStop(settings.deckFuelPerStop);
          if (settings.cargoWeight !== undefined) setCargoWeight(settings.cargoWeight);
          
          // Update AppSettingsManager if it exists
          if (appSettingsManagerRef.current) {
            appSettingsManagerRef.current.updateFlightSettings({
              passengerWeight: settings.passengerWeight,
              contingencyFuelPercent: settings.contingencyFuelPercent,
              taxiFuel: settings.taxiFuel,
              reserveFuel: settings.reserveFuel,
              deckTimePerStop: settings.deckTimePerStop,
              deckFuelFlow: settings.deckFuelFlow
            });
          }
          
          // Recalculate route if needed
          if (selectedAircraft && waypointManagerRef.current && waypointManagerRef.current.getWaypoints().length >= 2) {
            // Extract coordinates from waypoints
            const coordinates = waypointManagerRef.current.getWaypoints().map(wp => wp.coords);
            
            // Calculate route statistics using the correct method
            routeCalculatorRef.current.calculateRouteStats(coordinates, {
              aircraftType: selectedAircraft.modelType || 's92',
              payloadWeight: settings.cargoWeight || cargoWeight || 0,
              reserveFuel: settings.reserveFuel || reserveFuel,
              weather: weather // Include weather data in calculations
            });
          }
          
          // Force UI update
          setForceUpdate(prev => prev + 1);
        }
      } catch (error) {
        console.error(`Error saving settings for ${key}:`, error);
      }
    };
    
    // Add event listener for settings-changed to force UI update
    const handleSettingsChanged = () => {
      console.log("Settings changed event received, forcing UI update");
      setForceUpdate(prev => prev + 1);
      
      // Recalculate route if needed
      if (waypointManagerRef.current && waypointManagerRef.current.getWaypoints().length >= 2) {
        // Extract coordinates from waypoints
        const coordinates = waypointManagerRef.current.getWaypoints().map(wp => wp.coords);
        
        // Always calculate basic distance
        if (routeCalculatorRef.current) {
          routeCalculatorRef.current.calculateDistanceOnly(coordinates);
        }
        
        // Calculate full stats if we have an aircraft
        if (selectedAircraft) {
          // Calculate route statistics using the correct method
          routeCalculatorRef.current.calculateRouteStats(coordinates, {
            selectedAircraft: selectedAircraft, // Pass the full aircraft object
            payloadWeight: cargoWeight || 0,
            reserveFuel: reserveFuel,
            weather: weather // Include weather data in calculations
          });
          
          // Also update stop cards when settings change
          const newStopCards = generateStopCardsData(waypoints, routeStats, selectedAircraft, weather);
          setStopCards(newStopCards);
        }
      }
    };
    
    // Add event listener for aircraft settings
    window.addEventListener('save-aircraft-settings', handleSaveAircraftSettings);
    window.addEventListener('settings-changed', handleSettingsChanged);
    
    // Force a rerender after initializing all managers
    setForceUpdate(prev => prev + 1);
    
    // Clean up event listener on unmount
    return () => {
      window.removeEventListener('save-aircraft-settings', handleSaveAircraftSettings);
      window.removeEventListener('settings-changed', handleSettingsChanged);
    };
  }, [passengerWeight, contingencyFuelPercent, taxiFuel, reserveFuel, deckTimePerStop, deckFuelFlow, waypoints.length, selectedAircraft]);

  // Map initialization handler
  const handleMapReady = (mapInstance) => {
    console.log("🗺️ Map is ready", mapInstance);
    
    // When map is ready, initialize other components that depend on the map
    if (regionManagerRef.current) {
      console.log("🗺️ Initializing regions...");
      setRegionLoading(true);
      
      // Get available regions
      setRegions(regionManagerRef.current.getRegions());
      
      // Get the initial region from settings if available
      const initialRegion = appSettingsManagerRef.current ? 
        appSettingsManagerRef.current.getRegion() : 'gulf-of-mexico';
      
      console.log(`🗺️ Initializing with region: ${initialRegion}`);
      regionManagerRef.current.initialize(initialRegion);
    }
    
    // Initialize the map interaction handler
    if (mapInteractionHandlerRef.current) {
      console.log("🗺️ Initializing map interaction handler...");
      
      // Make sure the waypointManager is properly connected
      if (waypointManagerRef.current) {
        // Set up the waypoint manager's callbacks
        waypointManagerRef.current.setCallback('onChange', (updatedWaypoints) => {
          console.log(`🗺️ Waypoints changed, now ${updatedWaypoints.length} waypoints`);
          
          // Update the waypoints state
          setWaypoints([...updatedWaypoints]);
          
          // CRITICAL FIX: Always calculate distance regardless of aircraft selection
          if (updatedWaypoints.length >= 2 && routeCalculatorRef.current) {
            // Extract coordinates for calculation
            const coordinates = updatedWaypoints.map(wp => wp.coords);
            
            // Always do a distance-only calculation for basic stats
            console.log('🗺️ Calculating basic distance for updated waypoints');
            const distanceResults = routeCalculatorRef.current.calculateDistanceOnly(coordinates);
            
            // If we don't have aircraft-based stats yet, use the distance-only results
            if (!routeStats || !routeStats.timeHours) {
              console.log('🗺️ No aircraft-based stats available, using distance-only results');
              setRouteStats(distanceResults);
            }
            
            // If we have an aircraft, also do the full calculation
            if (selectedAircraft) {
              console.log('🗺️ Calculating full route stats with aircraft');
              routeCalculatorRef.current.calculateRouteStats(coordinates, {
                selectedAircraft: selectedAircraft,
                payloadWeight: cargoWeight || 0,
                reserveFuel: reserveFuel,
                weather: weather
              });
            }
          }
        });
        
        waypointManagerRef.current.setCallback('onRouteUpdated', (routeData) => {
          console.log(`🗺️ Route updated with ${routeData.waypoints.length} waypoints`);
          
          // Always calculate basic distance even without an aircraft
          if (routeCalculatorRef.current && routeData.coordinates && routeData.coordinates.length >= 2) {
            routeCalculatorRef.current.calculateDistanceOnly(routeData.coordinates);
          }
          
          // Calculate full route stats if we have an aircraft and waypoints
          if (selectedAircraft && routeData.waypoints.length >= 2) {
            // Extract coordinates from waypoints
            const coordinates = routeData.waypoints.map(wp => wp.coords);
            
            // First calculate with the original calculator to get basic stats
            const basicResults = routeCalculatorRef.current.calculateRouteStats(coordinates, {
              aircraftType: selectedAircraft.modelType || 's92',
              payloadWeight: cargoWeight || 0,
              reserveFuel: reserveFuel,
              weather: weather // Include weather data in calculations
            });
            
            // Then calculate enhanced fuel data with the new calculator
            console.log('🔥 Calculating enhanced fuel requirements...');
            
            const enhancedResults = FuelIntegration.calculateFuelRequirements(
              routeData.waypoints,
              selectedAircraft,
              weather,
              {
                passengerWeight,
                taxiFuel,
                contingencyFuelPercent,
                reserveFuel,
                deckTimePerStop,
                deckFuelFlow,
                cargoWeight: cargoWeight || 0
              }
            );
            
            // Use enhanced results if available, otherwise fall back to basic results
            if (enhancedResults) {
              console.log('🔥 Using enhanced fuel calculation results');
              setRouteStats(enhancedResults);
            } else {
              console.log('⚠️ Enhanced fuel calculation failed, using basic results');
              setRouteStats(basicResults);
            }
          }
        });
      }
      
      // Initialize map interactions
      const initSuccess = mapInteractionHandlerRef.current.initialize();
      if (!initSuccess) {
        console.error("Failed to initialize map interaction handler");
      } else {
        console.log("Map interaction handler initialized successfully");
      }
    }
  };
  
  // Panel visibility handlers
  const toggleLeftPanel = () => {
    const newState = !leftPanelVisible;
    setLeftPanelVisible(newState);
    
    // Save to settings
    if (appSettingsManagerRef.current) {
      appSettingsManagerRef.current.updateUISettings({
        leftPanelVisible: newState
      });
    }
    
    // Trigger animation by adding and removing classes
    const panel = document.querySelector('.route-editor-panel');
    if (panel) {
      if (newState) {
        // Panel becoming visible - slide in
        panel.style.animation = 'slideInFromLeft 0.4s cubic-bezier(0.22, 1, 0.36, 1) forwards';
      } else {
        // Panel becoming hidden - slide out
        panel.style.animation = 'slideOutToLeft 0.4s cubic-bezier(0.22, 1, 0.36, 1) forwards';
      }
    }
  };
  
  const toggleRightPanel = () => {
    const newState = !rightPanelVisible;
    setRightPanelVisible(newState);
    
    // Save to settings
    if (appSettingsManagerRef.current) {
      appSettingsManagerRef.current.updateUISettings({
        rightPanelVisible: newState
      });
    }
    
    // Trigger animation by adding and removing classes
    const panel = document.querySelector('.info-panel');
    if (panel) {
      if (newState) {
        // Panel becoming visible - slide in
        panel.style.animation = 'slideInFromRight 0.4s cubic-bezier(0.22, 1, 0.36, 1) forwards';
      } else {
        // Panel becoming hidden - slide out
        panel.style.animation = 'slideOutToRight 0.4s cubic-bezier(0.22, 1, 0.36, 1) forwards';
      }
    }
  };
  
  const handleRouteInputChange = (value) => {
    setRouteInput(value);
  };
  
  // Generate stop cards data
