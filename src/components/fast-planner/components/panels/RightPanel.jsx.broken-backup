import React, { useState, useCallback, useEffect, useRef } from 'react';
import RightPanelContainer from './RightPanelContainer';
import {
  MainCard,
  SettingsCard,
  PerformanceCard,
  WeatherCard,
  FinanceCard,
  EvacuationCard,
  SaveFlightCard,
  LoadFlightsCard,
  MapLayersCard
} from './cards';
import '../../FastPlannerStyles.css';
import { PanelProvider } from '../../context/PanelContext';

/**
 * Right Panel Component
 * 
 * Refactored to use a container with individual card components
 * that slide in and out when different tabs are selected.
 * Uses the existing animation system already in the CSS.
 * Region management is now handled by RegionContext.
 * Features smart auto-hide behavior on smaller viewports.
 */
const RightPanel = ({
  visible,
  mapManagerRef,
  gulfCoastMapRef,
  weatherLayerRef,
  vfrChartsRef,
  platformManagerRef,
  airfieldsVisible,
  fixedPlatformsVisible, // Legacy
  movablePlatformsVisible,
  blocksVisible, // New prop
  basesVisible, // New prop for bases
  fuelAvailableVisible, // New prop
  toggleAirfieldsVisibility,
  toggleFixedPlatformsVisibility, // Legacy
  toggleMovablePlatformsVisibility,
  toggleBlocksVisibility, // New prop
  toggleBasesVisibility, // New prop for bases
  toggleFuelAvailableVisibility, // New prop
  onToggleVisibility,
  onClearRoute,
  onLoadRigData,
  onToggleChart,
  onLoadCustomChart,
  chartsVisible,
  aircraftType,
  onAircraftTypeChange,
  aircraftRegistration,
  onAircraftRegistrationChange,
  selectedAircraft,
  forceUpdate,
  aircraftsByType,
  aircraftLoading,
  payloadWeight,
  onPayloadWeightChange,
  reserveFuel,
  onReserveFuelChange,
  routeStats,
  waypoints,
  onRemoveWaypoint,
  isAuthenticated,
  authUserName,
  rigsLoading,
  onLogin,
  // Flight settings props
  deckTimePerStop = 5,
  deckFuelPerStop = 100,
  deckFuelFlow = 400,
  passengerWeight = 220,
  cargoWeight = 0,
  taxiFuel = 50,
  contingencyFuelPercent = 10,
  reserveMethod = 'fixed',
  onDeckTimeChange = () => {},
  onDeckFuelChange = () => {},
  onDeckFuelFlowChange = () => {},
  onPassengerWeightChange = () => {},
  onCargoWeightChange = () => {},
  onTaxiFuelChange = () => {},
  onContingencyFuelPercentChange = () => {},
  onReserveMethodChange = () => {},
  // Weather props
  weather = { windSpeed: 15, windDirection: 270 },
  onWeatherUpdate = () => {},
  // Flight save props
  onSaveFlightSubmit = () => { console.warn('onSaveFlightSubmit not provided'); },
  onSaveFlightCancel = () => { console.warn('onSaveFlightCancel not provided'); },
  // Flight load props
  onLoadFlight = () => { console.warn('onLoadFlight not provided'); },
  onLoadFlightsCancel = () => { console.warn('onLoadFlightsCancel not provided'); }
}) => {
  // Track active card state within the RightPanel component (moved up to avoid initialization error)
  const [activeCard, setActiveCard] = useState('main');
  
  // NEW: Simple auto-hide for small viewports
  const [isSmall, setIsSmall] = useState(false);
  const [isVisible, setIsVisible] = useState(true);
  const [hoveringPanel, setHoveringPanel] = useState(false);
  const [nearRightEdge, setNearRightEdge] = useState(false);
  const timerRef = useRef(null);
  
  // Simple viewport check
  useEffect(() => {
    const check = () => {
      const small = window.innerWidth <= 1200;
      setIsSmall(small);
      if (!small) setIsVisible(visible);
    };
    check();
    window.addEventListener('resize', check);
    return () => window.removeEventListener('resize', check);
  }, [visible]);
  
  // Simple visibility logic
  useEffect(() => {
    if (!isSmall) return;
    if (hoveringPanel || nearRightEdge) {
      setIsVisible(true);
      if (timerRef.current) clearTimeout(timerRef.current);
    } else if (isVisible) {
      if (timerRef.current) clearTimeout(timerRef.current);
      timerRef.current = setTimeout(() => setIsVisible(false), 2000);
    }
  }, [isSmall, hoveringPanel, nearRightEdge, isVisible]);
  
  // Edge detection
  useEffect(() => {
    if (!isSmall) return;
    const handleMouse = (e) => setNearRightEdge(e.clientX >= window.innerWidth - 60);
    const handleTouch = (e) => {
      if (e.touches[0].clientX >= window.innerWidth - 60) setIsVisible(true);
    };
    document.addEventListener('mousemove', handleMouse);
    document.addEventListener('touchstart', handleTouch, { passive: true });
    return () => {
      document.removeEventListener('mousemove', handleMouse);
      document.removeEventListener('touchstart', handleTouch);
    };
  }, [isSmall]);
  
  // Show on card change
  useEffect(() => {
    if (isSmall) setIsVisible(true);
  }, [activeCard, isSmall]);
  
  // Override visibility
  const finalVisible = isSmall ? isVisible : visible;
  
  // Compatibility aliases for old code
  const showTemporarily = isVisible;
  const isHovering = hoveringPanel;
  const shouldAutoHide = isSmall;
  
  // Reference to the RightPanelContainer for triggering card changes
  const rightPanelRef = React.useRef();
  
  // Create a handler for card changes that will be exposed through context
  const handleCardChange = useCallback((cardId) => {
    if (rightPanelRef.current) {
      // Log the card change for debugging
      console.log(`Panel context: changing card to ${cardId}`);
      
      // Call the actual method on the container
      rightPanelRef.current.handleCardChange(cardId);
      
      // Update our internal state
      setActiveCard(cardId);
    } else {
      console.warn('Panel context: rightPanelRef not available');
    }
  }, []);
  
  return (
    <PanelProvider value={{
      handleCardChange,
      activeCard
    }}>
      <RightPanelContainer
        visible={finalVisible}
        onToggleVisibility={onToggleVisibility}
        initialActiveCard="main"
        ref={rightPanelRef}
        onMouseEnter={() => setHoveringPanel(true)}
        onMouseLeave={() => setHoveringPanel(false)}
        shouldAutoHide={isSmall}
        showTemporarily={showTemporarily}
        isHovering={isHovering}
      >
      {/* Main Card */}
      <MainCard
        id="main"
        onClearRoute={onClearRoute}
        onLoadRigData={onLoadRigData}
        onToggleChart={onToggleChart}
        chartsVisible={chartsVisible}
        aircraftType={aircraftType}
        onAircraftTypeChange={onAircraftTypeChange}
        aircraftRegistration={aircraftRegistration}
        onAircraftRegistrationChange={onAircraftRegistrationChange}
        selectedAircraft={selectedAircraft}
        aircraftsByType={aircraftsByType}
        aircraftLoading={aircraftLoading}
        routeStats={routeStats}
        isAuthenticated={isAuthenticated}
        authUserName={authUserName}
        rigsLoading={rigsLoading}
        onLogin={onLogin}
        reserveFuel={reserveFuel}
        waypoints={waypoints}
        passengerWeight={passengerWeight}
        deckTimePerStop={deckTimePerStop}
        deckFuelFlow={deckFuelFlow}
        contingencyFuelPercent={contingencyFuelPercent}
        taxiFuel={taxiFuel}
        weather={weather}
        onWeatherUpdate={onWeatherUpdate}
        cargoWeight={cargoWeight}
      />
      
      {/* Settings Card */}
      <SettingsCard
        id="settings"
        deckTimePerStop={deckTimePerStop}
        deckFuelPerStop={deckFuelPerStop}
        deckFuelFlow={deckFuelFlow}
        passengerWeight={passengerWeight}
        cargoWeight={cargoWeight}
        taxiFuel={taxiFuel}
        contingencyFuelPercent={contingencyFuelPercent}
        reserveMethod={reserveMethod}
        reserveFuel={reserveFuel}
        onDeckTimeChange={onDeckTimeChange}
        onDeckFuelChange={onDeckFuelChange}
        onDeckFuelFlowChange={onDeckFuelFlowChange}
        onPassengerWeightChange={onPassengerWeightChange}
        onCargoWeightChange={onCargoWeightChange}
        onTaxiFuelChange={onTaxiFuelChange}
        onContingencyFuelPercentChange={onContingencyFuelPercentChange}
        onReserveMethodChange={onReserveMethodChange}
        onReserveFuelChange={onReserveFuelChange}
        selectedAircraft={selectedAircraft}
        aircraftType={aircraftType}
      />
      
      {/* Performance Card */}
      <PerformanceCard id="performance" />
      
      {/* Weather Card */}
      <WeatherCard 
        id="weather" 
        weather={weather}
        onWeatherUpdate={onWeatherUpdate}
      />
      
      {/* Finance Card */}
      <FinanceCard 
        id="finance"
        routeStats={routeStats}
        stopCards={null} // Will be passed when available
        selectedAircraft={selectedAircraft}
        waypoints={waypoints}
      />
      
      {/* Evacuation Card */}
      <EvacuationCard id="evacuation" />
      
      {/* Map Layers Card */}
      <MapLayersCard
        id="maplayers"
        mapManagerRef={mapManagerRef}
        gulfCoastMapRef={gulfCoastMapRef}
        weatherLayerRef={weatherLayerRef}
        vfrChartsRef={vfrChartsRef}
        platformManagerRef={platformManagerRef}
        platformsVisible={chartsVisible}
        airfieldsVisible={airfieldsVisible}
        fixedPlatformsVisible={fixedPlatformsVisible} // Legacy
        movablePlatformsVisible={movablePlatformsVisible}
        blocksVisible={blocksVisible} // New prop
        basesVisible={basesVisible} // New prop for bases
        fuelAvailableVisible={fuelAvailableVisible} // New prop
        togglePlatformsVisibility={onToggleChart}
        toggleAirfieldsVisibility={toggleAirfieldsVisibility}
        toggleFixedPlatformsVisibility={toggleFixedPlatformsVisibility} // Legacy
        toggleMovablePlatformsVisibility={toggleMovablePlatformsVisibility}
        toggleBlocksVisibility={toggleBlocksVisibility} // New prop
        toggleBasesVisibility={toggleBasesVisibility} // New prop for bases
        toggleFuelAvailableVisibility={toggleFuelAvailableVisibility} // New prop
      />
      
      {/* Save Flight Card - Updated */}
      <SaveFlightCard
        id="saveflight"
        onSave={onSaveFlightSubmit}
        onCancel={onSaveFlightCancel}
        waypoints={waypoints}
        selectedAircraft={selectedAircraft}
        isSaving={false}
      />
      
      {/* Load Flights Card */}
      <LoadFlightsCard 
        id="loadflights"
        onLoad={onLoadFlight}
        onCancel={onLoadFlightsCancel}
        isLoading={false}
      />
    </RightPanelContainer>
    </PanelProvider>
  );
};

export default RightPanel;