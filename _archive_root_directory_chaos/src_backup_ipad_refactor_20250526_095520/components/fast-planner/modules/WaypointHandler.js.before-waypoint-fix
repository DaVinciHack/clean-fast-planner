/**
 * WaypointHandler.js
 * 
 * A dedicated module to handle waypoints separately from stops
 */

class WaypointHandler {
  constructor(mapManager, waypointManager) {
    this.mapManager = mapManager;
    this.waypointManager = waypointManager;
    this.enabled = false;
    this.map = null;
  }
  
  /**
   * Initialize the waypoint handler
   * @returns {boolean} - Success status
   */
  initialize() {
    console.log('游리 WaypointHandler: Initializing');
    
    // Get the map
    this.map = this.mapManager.getMap();
    if (!this.map) {
      console.error('游리 WaypointHandler: Map not initialized');
      return false;
    }
    
    // Add a dedicated waypoint click handler to the map
    this.map.on('click', this.handleWaypointClick.bind(this));
    
    console.log('游리 WaypointHandler: Initialized');
    return true;
  }
  
  /**
   * Handle map clicks for waypoints - this is a dedicated handler
   * that ONLY runs when a waypoint should be added
   * @param {Object} e - The click event
   */
  handleWaypointClick(e) {
    // Only process if waypoint mode is enabled
    if (!this.enabled) return;
    
    console.log('游리 WaypointHandler: Map clicked for waypoint');
    
    // Add a waypoint directly
    this.addWaypoint([e.lngLat.lng, e.lngLat.lat]);
  }
  
  /**
   * Add a waypoint to the route
   * @param {Array} coords - [lng, lat] coordinates
   */
  addWaypoint(coords) {
    console.log('游리 WaypointHandler: Adding waypoint at', coords);
    
    // Format the name
    const waypointCount = this.waypointManager.getWaypoints().filter(wp => wp.type === 'WAYPOINT').length;
    const name = `Waypoint ${waypointCount + 1}`;
    
    // Add the waypoint to the waypointManager with explicit type
    this.waypointManager.addWaypoint(coords, name, {
      isWaypoint: true,
      type: 'WAYPOINT'
    });
    
    // Log success
    console.log('游리 WaypointHandler: Waypoint added successfully');
  }
  
  /**
   * Enable or disable waypoint mode
   * @param {boolean} enabled - Whether to enable waypoint mode
   */
  setEnabled(enabled) {
    console.log(`游리 WaypointHandler: ${enabled ? 'Enabling' : 'Disabling'} waypoint mode`);
    
    // Store the enabled state
    this.enabled = enabled;
    
    // Change the cursor to indicate mode
    if (this.map) {
      this.map.getCanvas().style.cursor = enabled ? 'crosshair' : '';
    }
    
    // Return the new state
    return this.enabled;
  }
  
  /**
   * Get the current enabled state
   * @returns {boolean} - Whether waypoint mode is enabled
   */
  isEnabled() {
    return this.enabled;
  }
}

export default WaypointHandler;
