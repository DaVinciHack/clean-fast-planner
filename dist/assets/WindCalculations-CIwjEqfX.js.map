{"version":3,"file":"WindCalculations-CIwjEqfX.js","sources":["../../src/components/fast-planner/modules/calculations/WindCalculations.js"],"sourcesContent":["/**\n * WindCalculations.js\n * \n * Module for calculating wind effects on flight routes\n * Handles headwind/tailwind components, crosswind, and effects on groundspeed\n */\n\n/**\n * Convert degrees to radians\n * @param {number} degrees - Angle in degrees\n * @returns {number} Angle in radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Convert radians to degrees\n * @param {number} radians - Angle in radians\n * @returns {number} Angle in degrees\n */\nconst radiansToDegrees = (radians) => {\n  return radians * 180 / Math.PI;\n};\n\n/**\n * Calculate the relative angle between two compass bearings\n * @param {number} course - Aircraft course in degrees (0-360)\n * @param {number} windDirection - Direction wind is coming FROM in degrees (0-360)\n * @returns {number} Angle between course and wind in degrees (0-180)\n */\nconst calculateWindAngle = (course, windDirection) => {\n  // Convert wind direction from meteorological (direction wind is coming FROM)\n  // to mathematical (direction wind is going TO)\n  const windDirectionMath = (windDirection + 180) % 360;\n  \n  // Calculate the absolute difference between the two angles\n  let angleDiff = Math.abs(course - windDirectionMath);\n  \n  // Ensure the result is the smaller angle (max 180 degrees)\n  if (angleDiff > 180) {\n    angleDiff = 360 - angleDiff;\n  }\n  \n  return angleDiff;\n};\n\n/**\n * Calculate the headwind/tailwind component\n * Positive value = headwind, Negative value = tailwind\n * @param {number} windSpeed - Wind speed in knots\n * @param {number} course - Aircraft course in degrees (0-360)\n * @param {number} windDirection - Direction wind is coming FROM in degrees (0-360)\n * @returns {number} Headwind/tailwind component in knots\n */\nconst calculateHeadwindComponent = (windSpeed, course, windDirection) => {\n  // Convert wind direction from meteorological to mathematical\n  const windDirectionMath = (windDirection + 180) % 360;\n  \n  // Convert to radians\n  const courseRad = degreesToRadians(course);\n  const windRad = degreesToRadians(windDirectionMath);\n  \n  // Calculate headwind/tailwind component\n  // Note: The negative sign is because a headwind (wind coming from ahead)\n  // means the angle diff is near 180Â°, which gives a negative cosine\n  return -windSpeed * Math.cos(courseRad - windRad);\n};\n\n/**\n * Calculate the crosswind component\n * @param {number} windSpeed - Wind speed in knots\n * @param {number} course - Aircraft course in degrees (0-360)\n * @param {number} windDirection - Direction wind is coming FROM in degrees (0-360)\n * @returns {number} Crosswind component in knots (positive = from right, negative = from left)\n */\nconst calculateCrosswindComponent = (windSpeed, course, windDirection) => {\n  // Convert wind direction from meteorological to mathematical\n  const windDirectionMath = (windDirection + 180) % 360;\n  \n  // Convert to radians\n  const courseRad = degreesToRadians(course);\n  const windRad = degreesToRadians(windDirectionMath);\n  \n  // Calculate crosswind component\n  return windSpeed * Math.sin(courseRad - windRad);\n};\n\n/**\n * Calculate the ground speed of an aircraft given airspeed and wind\n * @param {number} airspeed - Aircraft's airspeed in knots\n * @param {number} course - Aircraft's course in degrees (0-360)\n * @param {number} windSpeed - Wind speed in knots\n * @param {number} windDirection - Direction wind is coming FROM in degrees (0-360)\n * @returns {number} Ground speed in knots\n */\nconst calculateGroundSpeed = (airspeed, course, windSpeed, windDirection) => {\n  // Calculate headwind/tailwind component\n  const headwindComponent = calculateHeadwindComponent(windSpeed, course, windDirection);\n  \n  // Calculate crosswind component\n  const crosswindComponent = calculateCrosswindComponent(windSpeed, course, windDirection);\n  \n  // Calculate ground speed\n  // Ground speed = airspeed - headwind component\n  // (headwind is positive, so we subtract)\n  const groundSpeed = airspeed - headwindComponent;\n  \n  // We include a small correction for crosswind effect on groundspeed\n  // This is a simplification, but provides a more accurate estimate\n  const crosswindCorrection = Math.abs(crosswindComponent) > 0 \n    ? -0.02 * Math.pow(crosswindComponent, 2) / airspeed \n    : 0;\n  \n  return groundSpeed + crosswindCorrection;\n};\n\n/**\n * Calculate the course angle between two waypoints\n * @param {Object} from - Starting waypoint with lat, lon properties\n * @param {Object} to - Ending waypoint with lat, lon properties\n * @returns {number} Course in degrees (0-360)\n */\nconst calculateCourse = (from, to) => {\n  const fromLat = degreesToRadians(from.lat);\n  const fromLon = degreesToRadians(from.lon);\n  const toLat = degreesToRadians(to.lat);\n  const toLon = degreesToRadians(to.lon);\n  \n  const y = Math.sin(toLon - fromLon) * Math.cos(toLat);\n  const x = Math.cos(fromLat) * Math.sin(toLat) -\n            Math.sin(fromLat) * Math.cos(toLat) * Math.cos(toLon - fromLon);\n  \n  let bearing = radiansToDegrees(Math.atan2(y, x));\n  bearing = (bearing + 360) % 360; // Normalize to 0-360\n  \n  return bearing;\n};\n\n/**\n * Calculate flight time with wind adjustments\n * @param {number} distance - Distance in nautical miles\n * @param {number} airspeed - Aircraft airspeed in knots\n * @param {number} course - Course in degrees (0-360)\n * @param {number} windSpeed - Wind speed in knots\n * @param {number} windDirection - Direction wind is coming FROM in degrees (0-360)\n * @returns {number} Flight time in hours\n */\nconst calculateWindAdjustedTime = (distance, airspeed, course, windSpeed, windDirection) => {\n  // If there's no wind, use simple calculation\n  if (windSpeed === 0) {\n    return distance / airspeed;\n  }\n  \n  // Calculate ground speed with wind adjustment\n  const groundSpeed = calculateGroundSpeed(airspeed, course, windSpeed, windDirection);\n  \n  // Calculate time (hours) = distance / groundSpeed\n  return distance / groundSpeed;\n};\n\n/**\n * Calculate additional fuel needed due to wind conditions\n * @param {number} baseFuelBurn - Base fuel burn rate in lbs/hr\n * @param {number} time - Flight time in hours\n * @param {number} headwindComponent - Headwind component in knots\n * @returns {number} Additional fuel in lbs\n */\nconst calculateWindAdjustedFuel = (baseFuelBurn, time, headwindComponent) => {\n  // In a headwind, aircraft typically burns slightly more fuel\n  // This is a simplified model - in reality, the relationship is complex\n  // For positive headwind values (true headwind), we increase fuel burn slightly\n  let adjustmentFactor = 1.0;\n  \n  if (headwindComponent > 0) {\n    // Increase fuel burn by up to 5% for strong headwinds\n    adjustmentFactor = 1.0 + Math.min(headwindComponent / 100, 0.05);\n  } else if (headwindComponent < 0) {\n    // Decrease fuel burn by up to 3% for tailwinds\n    // Tailwind component is negative, so we add its absolute value\n    adjustmentFactor = 1.0 - Math.min(Math.abs(headwindComponent) / 150, 0.03);\n  }\n  \n  return baseFuelBurn * time * adjustmentFactor;\n};\n\n/**\n * Calculate leg information with wind adjustments\n * @param {Object} from - Starting waypoint with lat, lon properties\n * @param {Object} to - Ending waypoint with lat, lon properties\n * @param {number} distance - Distance in nautical miles\n * @param {Object} aircraft - Aircraft object with airspeed and fuelBurn properties\n * @param {Object} weather - Weather object with windSpeed and windDirection properties\n * @returns {Object} Object with time, fuel, headwind, groundSpeed properties\n */\nconst calculateLegWithWind = (from, to, distance, aircraft, weather) => {\n  // Default values if data is missing\n  const airspeed = aircraft?.cruiseSpeed || 145;\n  const fuelBurn = aircraft?.fuelBurn || 1100;\n  const windSpeed = weather?.windSpeed || 0;\n  const windDirection = weather?.windDirection || 0;\n  \n  // Calculate course between waypoints\n  const course = calculateCourse(from, to);\n  \n  // Calculate headwind component\n  const headwindComponent = calculateHeadwindComponent(windSpeed, course, windDirection);\n  \n  // Calculate crosswind component\n  const crosswindComponent = calculateCrosswindComponent(windSpeed, course, windDirection);\n  \n  // Calculate groundspeed\n  const groundSpeed = calculateGroundSpeed(airspeed, course, windSpeed, windDirection);\n  \n  // Calculate time with wind adjustment\n  const time = calculateWindAdjustedTime(distance, airspeed, course, windSpeed, windDirection);\n  \n  // Calculate fuel with wind adjustment\n  const fuel = calculateWindAdjustedFuel(fuelBurn, time, headwindComponent);\n  \n  return {\n    time,\n    fuel,\n    headwindComponent,\n    crosswindComponent,\n    groundSpeed,\n    course\n  };\n};\n\nexport {\n  calculateWindAngle,\n  calculateHeadwindComponent,\n  calculateCrosswindComponent,\n  calculateGroundSpeed,\n  calculateCourse,\n  calculateWindAdjustedTime,\n  calculateWindAdjustedFuel,\n  calculateLegWithWind\n};\n"],"names":["degreesToRadians","degrees","radiansToDegrees","radians","calculateWindAngle","course","windDirection","windDirectionMath","angleDiff","calculateHeadwindComponent","windSpeed","courseRad","windRad","calculateCrosswindComponent","calculateGroundSpeed","airspeed","headwindComponent","crosswindComponent","groundSpeed","crosswindCorrection","calculateCourse","from","to","fromLat","fromLon","toLat","toLon","y","x","bearing","calculateWindAdjustedTime","distance","calculateWindAdjustedFuel","baseFuelBurn","time","adjustmentFactor","calculateLegWithWind","aircraft","weather","fuelBurn","fuel"],"mappings":"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"}