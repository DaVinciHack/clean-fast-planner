import{_ as le,c as y}from"./index-BduuyZfp.js";import"./react-vendors-Bh7YcOHL.js";import"./osdk-vendors-CasKN2Wv.js";class me{static async saveFuelData(e,o,r={},u={},t=null,s={},c=null){var F,E,g,M,K,V,q,G,C,W,H,J,Y,z;console.log("üíæ FuelSaveBackService: Starting MainFuelV2 save-back for flight:",e),console.log("üíæ Stop cards count:",o==null?void 0:o.length);let d={},p={};try{if(!e)throw new Error("Flight ID is required for fuel save-back");(!o||o.length===0)&&console.log("üíæ No stop cards provided, will only save basic fuel settings");const i=await le(()=>import("./osdk-vendors-CasKN2Wv.js").then(a=>a.i),[]);console.log("üíæ Creating/updating MainFuelV2 object directly for complete fuel data");let l=null;try{console.log("üéØ DIRECT FETCH: Getting fuel object 6cdf9983-8152-4be8-b0fc-4dd9416ec4b0 directly"),l=await y(i.MainFuelV2).fetchOne("6cdf9983-8152-4be8-b0fc-4dd9416ec4b0"),l&&(console.log("‚úÖ DIRECT FETCH SUCCESS:",{primaryKey:l.$primaryKey,flightUuid:l.flightUuid,flightUuidMatches:l.flightUuid===e,updatedAt:l.updatedAt}),l.flightUuid===e?console.log("‚úÖ PERFECT: Fuel object belongs to our flight!"):console.error("üö® MISMATCH: Fuel object has wrong flight UUID!",{expected:e,actual:l.flightUuid}))}catch(a){console.error("‚ùå DIRECT FETCH FAILED:",a.message),console.log("üîç Falling back to search...")}if(!l){console.log("üîç SEARCH DEBUG: Looking for MainFuelV2 objects for flight:",e);const a=await y(i.MainFuelV2).where(f=>f.flightUuid.exactMatch(e)).fetchPage({$pageSize:20});if(console.log("üîç SEARCH RESULTS:",{totalFound:((F=a.data)==null?void 0:F.length)||0,flightId:e}),!a.data||a.data.length===0)throw new Error(`No MainFuelV2 object found for flight ${e}`);console.log("üîç ALL OBJECTS FOUND BY SEARCH:"),a.data.forEach((f,v)=>{console.log(`  ${v+1}. UUID: ${f.$primaryKey}, flightUuid: ${f.flightUuid}, matches: ${f.flightUuid===e}, updatedAt: ${f.updatedAt}`)});const n=a.data.find(f=>f.$primaryKey==="6cdf9983-8152-4be8-b0fc-4dd9416ec4b0");if(n)console.log("‚úÖ TARGET FOUND IN SEARCH: Our fuel object IS in the search results"),l=n;else{console.log("‚ùå TARGET NOT IN SEARCH: Our fuel object is NOT in the search results - this explains the problem!");const f=a.data.filter(v=>v.flightUuid===e);if(f.length===0)throw console.error("üö® CRITICAL: Search returned objects but NONE match our flight UUID!"),console.error("üö® Expected flight UUID:",e),console.error("üö® Found objects with UUIDs:",a.data.map(v=>v.flightUuid)),new Error(`Search found objects but none match flightUuid = ${e}`);l=f[0],console.log("‚ö†Ô∏è USING DIFFERENT OBJECT FROM SEARCH:",l.$primaryKey)}}if(!l)throw new Error(`Failed to find MainFuelV2 object for flight ${e}`);console.log("‚úÖ FINAL: Using fuel object:",{primaryKey:l.$primaryKey,flightUuid:l.flightUuid,flightUuidMatches:l.flightUuid===e}),console.log("üíæ Using createOrModifyMainFuelFastPlanner - comprehensive fuel + passenger data");const m=(o==null?void 0:o[0])||{},Q=new Date().toISOString(),X=(t==null?void 0:t.averagePassengerWeight)||((E=t==null?void 0:t.currentPolicy)==null?void 0:E.averagePassengerWeight)||220,Z=(t==null?void 0:t.averageBagWeight)||((g=t==null?void 0:t.currentPolicy)==null?void 0:g.averageBagWeight)||0,$=[],b=[],k=[],x=[],S=[],U=[],D=[],w=[],R=[],P=[],N=[],ee=[],B=[],te=[],I=[],oe=[],ae=[],ne=[];o.forEach((a,n)=>{a&&($.push(a.name||a.stopName||a.location||`Stop ${n+1}`),P.push(a.description||a.stopType||"Standard Stop"),b.push(Math.round(a.tripFuel||0)),k.push(Math.round(a.taxiFuel||0)),x.push(Math.round(a.deckFuel||0)),S.push(Math.round(a.reserveFuel||0)),U.push(Math.round(a.contingencyFuel||0)),D.push(Math.round(a.extraFuel||0)),w.push(Math.round(a.araFuel||0)),R.push(Math.round(a.approachFuel||0)),N.push(Math.round(a.totalFuel||0)),ee.push(Math.round(a.excessFuel||0)),B.push(Math.round(a.maxPassengers||a.passengers||0)),te.push(Math.round(a.maxPassengers||a.passengers||0)),I.push(Math.round((a.maxPassengers||0)*X)),oe.push(Math.round(a.availableWeight||0)),ae.push(Math.round(a.totalWeight||0)),ne.push(Math.round((a.maxPassengers||0)*Z)))});let A="";o.forEach((a,n)=>{if(!a)return;const f=$[n]||`Stop ${n+1}`,v=N[n]||0,ue=B[n]||0,se=I[n]||0,ie=a.isRefuelStop?" (Refuel needed)":"",pe=`${v}${ie} Lbs`,_=[];b[n]&&_.push(`Trip:${b[n]}`),U[n]&&_.push(`Cont:${U[n]}`),k[n]&&_.push(`Taxi:${k[n]}`),x[n]&&_.push(`Deck:${x[n]}`),w[n]&&_.push(`ARA:${w[n]}`),R[n]&&_.push(`Appr:${R[n]}`),S[n]&&_.push(`Res:${S[n]}`),D[n]&&_.push(`Extra:${D[n]}`);const ce=n===o.length-1;let L="",j="",O="";if(ce)L=`Reserve:${S[n]||0} Extra:${D[n]||0} FullCont:${U[n]||0}`,j="Final Stop",O=`Final destination (Total: ${v} Lbs)`;else{L=_.join(" ")||"No fuel",j=`${ue} (${se} Lbs)`;const re=$[n+1];re?O=`${f}-${re}`:O=`${f} route`}A+=`${f}    ${pe}    ${j}    ${L}    ${O}
`}),console.log("üíæ COMPLETE FUEL DATA EXTRACTION:",{stopCount:o.length,locations:$,tripFuels:b,totalFuels:N,markdownTableLines:A.split(`
`).length});const h={main_fuel_v2:l,stop_locations:$,stop_descriptions:P,stop_trip_fuels:b,stop_taxi_fuels:k,stop_deck_fuels:x,stop_reserve_fuels:S,stop_contingency_fuels:U,stop_extra_fuels:D,stop_ara_fuels:w,stop_approach_fuels:R,stop_required_fuels:N,stop_excess_fuels:ee,planned_trip_fuel:Math.round(m.tripFuel||s.tripFuel||0),planned_extra_fuel:Math.round(Number(r==null?void 0:r.extraFuel)||0),planned_taxi_fuel:Math.round(m.taxiFuel||0),planned_deck_fuel:Math.round(m.deckFuel||0),planned_reserve_fuel:Math.round(m.reserveFuel||0),planned_contingency_fuel:Math.round(m.contingencyFuel||0),planned_ara_fuel:Math.round(m.araFuel||(u==null?void 0:u.araFuel)||0),planned_approach_fuel:Math.round(m.approachFuel||(u==null?void 0:u.approachFuel)||0),min_total_fuel:Math.round(m.totalFuel||0),round_trip_fuel:Math.round(m.totalFuel||0),planned_alternate_fuel:Math.round(s.alternateFuel||s.minimumFuel||m.reserveFuel||0),total_fuel_burned:Math.round(s.tripFuel||m.tripFuel||0),total_fuel_uplifted:Math.round(m.totalFuel||0),requested_passengers:B,available_passengers:te,requested_passenger_weight:I,available_weight:oe,requested_total_weight:ae,requested_bag_weight:ne,average_passenger_weight:Math.round(X),average_bag_weight:Math.round(Z),flight_uuid:e,aircraft:(c==null?void 0:c.name)||(c==null?void 0:c.registration)||"Unknown",policy_uuid:(t==null?void 0:t.uuid)||((M=t==null?void 0:t.currentPolicy)==null?void 0:M.uuid)||"",policy_name:(t==null?void 0:t.name)||((K=t==null?void 0:t.currentPolicy)==null?void 0:K.name)||"",flight_number:`${(c==null?void 0:c.registration)||"Unknown"} (${new Date().toLocaleDateString()})`,stops_markdown_table:A,min_fuel_breakdown:`Trip:${Math.round(m.tripFuel||s.tripFuel||0)} Taxi:${Math.round(m.taxiFuel||0)} Deck:${Math.round(m.deckFuel||0)} Res:${Math.round(m.reserveFuel||0)} Extra:${Math.round(Number(r==null?void 0:r.extraFuel)||0)}`,calculation_unit:"LBS",display_unit:"LBS",uses_combined_weight:!0,updated_at:Q,created_at:Q};console.log("üíæ COMPREHENSIVE FUEL DATA: All fuel components for Palantir:",{main_fuel_v2_primaryKey:(V=h.main_fuel_v2)==null?void 0:V.$primaryKey,main_fuel_v2_flightUuid:(q=h.main_fuel_v2)==null?void 0:q.flightUuid,stopCount:(G=h.stop_locations)==null?void 0:G.length,totalParameterCount:Object.keys(h).length,sampleStopData:{location:(C=h.stop_locations)==null?void 0:C[0],tripFuel:(W=h.stop_trip_fuels)==null?void 0:W[0],totalFuel:(H=h.stop_required_fuels)==null?void 0:H[0]}}),console.log("üíæ DEBUG: Stop cards structure:",o==null?void 0:o.map((a,n)=>({index:n,name:a.name,stopName:a.stopName,location:a.location,waypoint:a.waypoint,totalFuel:a.totalFuel,tripFuel:a.tripFuel,reserveFuel:a.reserveFuel,allKeys:Object.keys(a)}))),console.log("üíæ DEBUG: First stop card full object:",o==null?void 0:o[0]),console.log("üíæ Full action parameters before submission:",JSON.stringify(h,null,2)),console.log("üíæ DEBUG: Key parameter types:",{main_fuel_v2:typeof h.main_fuel_v2,main_fuel_v2_primaryKey:(J=h.main_fuel_v2)==null?void 0:J.$primaryKey,main_fuel_v2_flightUuid:(Y=h.main_fuel_v2)==null?void 0:Y.flightUuid}),console.log("üíæ DEBUG: Key fuel values being saved:",{planned_trip_fuel:h.planned_trip_fuel,planned_extra_fuel:h.planned_extra_fuel,min_total_fuel:h.min_total_fuel,updated_at:h.updated_at}),console.log("üíæ Using action to MODIFY existing MainFuelV2 object:",l.$primaryKey),console.log("üíæ DEBUG: Existing object being passed:",{primaryKey:l.$primaryKey,type:typeof l,flightUuid:l.flightUuid,flightUuidMatches:l.flightUuid===e}),console.log("üíæ UUID VALIDATION:",{flightId:e,flightIdValid:/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(e),primaryKey:l.$primaryKey,primaryKeyValid:/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(l.$primaryKey)}),p={parameterCount:Object.keys(h).length,hasMainFuelV2:!!h.main_fuel_v2,main_fuel_v2_primaryKey:(z=h.main_fuel_v2)==null?void 0:z.$primaryKey,actionType:"MODIFY_EXISTING"},console.log("üíæ FINAL PARAMETERS BEING SENT TO PALANTIR:",p),console.log("üíæ READY: Calling createOrModifyMainFuelFastPlanner to MODIFY existing object:",l.$primaryKey);const T=await y(i.createOrModifyMainFuelFastPlanner).applyAction(h,{$returnEdits:!0});console.log("‚úÖ FuelSaveBackService: createOrModifyMainFuelFastPlanner action successful:",T);try{console.log("üîç VERIFICATION: Loading updated object to compare changes...");const a=await y(i.MainFuelV2).where(n=>n.flightUuid.exactMatch(e)).fetchPage({$pageSize:1});if(a.data&&a.data.length>0){const n=a.data[0];console.log("üîç BEFORE/AFTER COMPARISON:"),console.log("  BEFORE (existingFuelObject):"),console.log("    - UUID:",l.$primaryKey),console.log("    - Trip Fuel:",l.plannedTripFuel),console.log("    - Extra Fuel:",l.plannedExtraFuel),console.log("    - Total Fuel:",l.minTotalFuel),console.log("    - Updated At:",l.updatedAt),console.log("  AFTER (updatedFuel):"),console.log("    - UUID:",n.$primaryKey),console.log("    - Trip Fuel:",n.plannedTripFuel),console.log("    - Extra Fuel:",n.plannedExtraFuel),console.log("    - Total Fuel:",n.minTotalFuel),console.log("    - Updated At:",n.updatedAt),console.log("  CHANGES DETECTED:"),console.log("    - UUID Same?",l.$primaryKey===n.$primaryKey),console.log("    - Trip Fuel Changed?",l.plannedTripFuel!==n.plannedTripFuel),console.log("    - Extra Fuel Changed?",l.plannedExtraFuel!==n.plannedExtraFuel),console.log("    - Total Fuel Changed?",l.minTotalFuel!==n.minTotalFuel),console.log("    - Timestamp Changed?",l.updatedAt!==n.updatedAt)}else console.warn("‚ùå VERIFICATION: No fuel data found after save!")}catch(a){console.error("‚ùå VERIFICATION ERROR:",a)}if(T.type==="edits"){const a=T.editedObjectTypes[0];return console.log("Updated/Created fuel object:",a),window.LoadingIndicator&&window.LoadingIndicator.updateStatusIndicator("Comprehensive fuel + passenger data saved to Palantir successfully","success",3e3),T}else return console.warn("Unexpected result type:",T.type),T}catch(i){if(console.error("‚ùå FuelSaveBackService: Error saving MainFuelV2:",i),i.message&&i.message.includes("400")){console.error("‚ùå 400 Bad Request Details:"),console.error("  - Request parameters (live):",JSON.stringify(d,null,2)),console.error("  - Request parameters (preserved):",JSON.stringify((p==null?void 0:p.fullParams)||{},null,2)),console.error("  - Debug info:",p),console.error("  - Flight ID:",e),console.error("  - Fuel policy region:",t==null?void 0:t.region),console.error("  - Fuel policy UUID:",t==null?void 0:t.uuid),console.error("  - Error object keys:",Object.keys(i)),i.errorName&&console.error("  - Error name:",i.errorName),i.errorCode&&console.error("  - Error code:",i.errorCode),i.statusCode&&console.error("  - Status code:",i.statusCode),i.errorInstanceId&&console.error("  - Error instance ID:",i.errorInstanceId),i.parameters&&console.error("  - Error parameters:",i.parameters),i.cause&&console.error("  - Error cause:",i.cause),i.response&&console.error("  - Error response:",i.response),i.body&&console.error("  - Error body:",i.body),i.details&&console.error("  - Error details:",i.details);try{const l=i.toString();(l.includes("constraint")||l.includes("validation"))&&(console.error("  - This appears to be a parameter validation error"),console.error("  - Full error string:",l))}catch(l){console.error("  - Could not parse error string:",l)}}throw window.LoadingIndicator&&window.LoadingIndicator.updateStatusIndicator(`Failed to save fuel data: ${i.message}`,"error",5e3),i}}static transformToMainFuelV2Structure(e,o,r,u,t,s,c){var F,E;if(console.log("üîÑ Transforming stop cards to complete MainFuelV2 structure with ALL fuel components"),!e||e.length===0)throw new Error("Stop cards are required for fuel save-back");const d=e[0];console.log("üîÑ Using departure card for fuel data:",d);const p={flightUuid:c,flightNumber:o.flightNumber||(s==null?void 0:s.registration)||"Fast Planner Flight",aircraft:(s==null?void 0:s.registration)||(s==null?void 0:s.assetId)||"Unknown",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),calculationUnit:"LBS",displayUnit:"LBS",policyName:(u==null?void 0:u.name)||((F=u==null?void 0:u.currentPolicy)==null?void 0:F.name)||"Unknown Policy",policyUuid:(u==null?void 0:u.uuid)||((E=u==null?void 0:u.currentPolicy)==null?void 0:E.uuid)||null,plannedTripFuel:Math.round(d.tripFuel||t.tripFuel||0),plannedTaxiFuel:Math.round(d.taxiFuel||0),plannedContingencyFuel:Math.round(d.contingencyFuel||0),plannedReserveFuel:Math.round(d.reserveFuel||0),plannedDeckFuel:Math.round(d.deckFuel||0),plannedExtraFuel:Math.round(d.extraFuel||o.extraFuel||0),plannedAraFuel:Math.round(d.araFuel||r.araFuel||0),plannedApproachFuel:Math.round(d.approachFuel||r.approachFuel||0),plannedAlternateFuel:0,plannedContingencyAlternateFuel:0,minTotalFuel:Math.round(d.totalFuel||0),roundTripFuel:Math.round(d.totalFuel||0),stopLocations:[],stopRequiredFuels:[],stopDescriptions:[],stopTaxiFuels:[],stopTripFuels:[],stopContingencyFuels:[],stopAraFuels:[],stopApproachFuels:[],stopExtraFuels:[],stopDeckFuels:[],stopReserveFuels:[],stopExcessFuels:[],actualFuelBurneds:[],actualFuelUplifteds:[],actualLandingFuels:[],actualLegNames:[],actualOffBlocksFuels:[],actualOnBlocksFuels:[],actualTakeOffFuels:[],totalFuelBurned:0,totalFuelUplifted:0,automationSummary:"Generated by Fast Planner",minFuelBreakdown:"",stopsMarkdownTable:""};return e.forEach((g,M)=>{!g||!g.name||(p.stopLocations.push(g.name),p.stopRequiredFuels.push(Math.round(g.totalFuel||0)),p.stopDescriptions.push(this.generateStopDescription(g,M)),p.stopTaxiFuels.push(Math.round(g.taxiFuel||0)),p.stopTripFuels.push(Math.round(g.tripFuel||0)),p.stopContingencyFuels.push(Math.round(g.contingencyFuel||0)),p.stopAraFuels.push(Math.round(g.araFuel||0)),p.stopApproachFuels.push(Math.round(g.approachFuel||0)),p.stopExtraFuels.push(Math.round(g.extraFuel||0)),p.stopDeckFuels.push(Math.round(g.deckFuel||0)),p.stopReserveFuels.push(Math.round(g.reserveFuel||0)),p.stopExcessFuels.push(0))}),p.stopsMarkdownTable=this.generateMarkdownTable(e),p.minFuelBreakdown=this.generateFuelBreakdown(e[0]),console.log("üîÑ Transformed fuel record:",{stopCount:p.stopLocations.length,totalFuel:p.minTotalFuel,tripFuel:p.plannedTripFuel}),p}static generateStopDescription(e,o){const r=o===0?"Departure":"Stop",t=e.refuelMode===!0?" (REFUEL)":"";return`${r}: ${e.name} - ${Math.round(e.totalFuel||0)} lbs required${t}`}static generateMarkdownTable(e){if(!e||e.length===0)return"";let o=`| Stop | Type | Required Fuel | Trip | Contingency | Reserve | Deck | ARA | Approach | Extra | Passengers |
`;return o+=`|------|------|---------------|------|-------------|---------|------|-----|----------|-------|------------|
`,e.forEach((r,u)=>{if(!r||!r.name)return;let t="Stop";u===0?t="Departure":r.isDestination&&(t="Destination"),r.refuelMode===!0&&(t+=" (REFUEL)");let c="-";r.maxPassengers!==null&&r.maxPassengers!==void 0&&(typeof r.maxPassengers=="string"?c=r.maxPassengers:c=r.maxPassengers.toString()),o+=`| ${r.name} | ${t} | ${Math.round(r.totalFuel||0)} | ${Math.round(r.tripFuel||0)} | ${Math.round(r.contingencyFuel||0)} | ${Math.round(r.reserveFuel||0)} | ${Math.round(r.deckFuel||0)} | ${Math.round(r.araFuel||0)} | ${Math.round(r.approachFuel||0)} | ${Math.round(r.extraFuel||0)} | ${c} |
`}),o}static generateFuelBreakdown(e){return e?`Trip: ${Math.round(e.tripFuel||0)}, Reserve: ${Math.round(e.reserveFuel||0)}, Taxi: ${Math.round(e.taxiFuel||0)}, Contingency: ${Math.round(e.contingencyFuel||0)}`:""}static extractFuelDataFromStopCards(e,o={},r={},u={}){console.log("üîç FuelSaveBackService: Extracting fuel data from stop cards"),console.log("üîç Input data:",{stopCardsCount:e==null?void 0:e.length,flightSettings:Object.keys(o),weatherFuel:r,routeStats:Object.keys(u)});try{if(!e||e.length===0)return console.warn("‚ö†Ô∏è No stop cards available for fuel extraction"),{};const t=e[0];if(!t)return console.warn("‚ö†Ô∏è No departure card found"),{};const s={totalFuel:t.totalFuel||0,tripFuel:u.tripFuel||t.tripFuel||0,reserveFuel:t.reserveFuel||o.reserveFuel||0,taxiFuel:t.taxiFuel||o.taxiFuel||0,deckFuel:t.deckFuel||o.deckFuelPerStop||0,extraFuel:o.extraFuel||0,extraFuelReason:o.extraFuelReason||"",araFuel:r.araFuel||o.araFuel||0,approachFuel:r.approachFuel||o.approachFuel||0,contingencyFuel:t.contingencyFuel||0,passengerCount:o.passengerCount||0,cargoWeight:o.cargoWeight||0,extractedAt:new Date().toISOString(),source:"StopCardCalculator"};return console.log("‚úÖ FuelSaveBackService: Extracted fuel data:",s),s}catch(t){return console.error("‚ùå FuelSaveBackService: Error extracting fuel data:",t),{}}}static hasFuelDataChanged(e,o){if(!e||!o)return!0;const r=["totalFuel","tripFuel","reserveFuel","taxiFuel","deckFuel","extraFuel","araFuel","approachFuel","contingencyFuel"];for(const u of r){const t=Number(e[u])||0,s=Number(o[u])||0;if(Math.abs(t-s)>.1)return console.log(`üíæ FuelSaveBackService: Change detected in ${u}: ${s} ‚Üí ${t}`),!0}return console.log("üíæ FuelSaveBackService: No significant fuel changes detected"),!1}static async loadExistingFuelData(e){console.log("üì• FuelSaveBackService: Loading existing fuel data for flight:",e);try{if(!e)return console.log("üì• DEBUG: No flight ID provided"),null;const o=await le(()=>import("./osdk-vendors-CasKN2Wv.js").then(s=>s.i),[]);console.log("üì• DEBUG: About to query MainFuelV2 for flight:",e);const r=y(o.MainFuelV2).where(s=>s.flightUuid.exactMatch(e)).fetchPage({$pageSize:1}),u=new Promise((s,c)=>setTimeout(()=>c(new Error("Query timeout after 5 seconds")),5e3)),t=await Promise.race([r,u]);if(console.log("üì• DEBUG: Query completed, result:",t),t.data&&t.data.length>0){const s=t.data[0];return console.log("üì• FuelSaveBackService: Found existing fuel data:",s),s}return console.log("üì• FuelSaveBackService: No existing fuel data found - this is normal for new flights"),null}catch(o){return console.error("‚ùå FuelSaveBackService: Error loading existing fuel data:",o),null}}static async autoSaveFuelData(e,o,r,u,t,s,c=null){var d,p;console.log("ü§ñ FuelSaveBackService: Auto-save check for flight:",e);try{if(!e)return console.log("ü§ñ No flight ID provided, skipping auto-save"),!1;if(!o||o.length===0)return console.log("ü§ñ No stop cards available, skipping auto-save"),!1;console.log("ü§ñ DEBUG: Attempting to load existing fuel data...");let F=null;try{F=await this.loadExistingFuelData(e),console.log("ü§ñ DEBUG: Existing fuel data result:",F?"FOUND":"NOT FOUND")}catch(M){console.warn("ü§ñ WARNING: Failed to load existing fuel data, will create new:",M.message),F=null}const E=Math.round(((d=o[0])==null?void 0:d.totalFuel)||0),g=Math.round((F==null?void 0:F.minTotalFuel)||0);return console.log("ü§ñ DEBUG: Decision factors:",{currentTotalFuel:E,existingTotalFuel:g,stopCardsLength:o==null?void 0:o.length,existingStopsLength:(p=F==null?void 0:F.stopLocations)==null?void 0:p.length,hasExistingData:!!F}),this.shouldSaveFuelData(o,F,E,g)?(console.log("ü§ñ Changes detected, performing auto-save"),await this.saveFuelData(e,o,r,u,t,s,c),!0):(console.log("ü§ñ No significant changes detected, skipping auto-save"),!1)}catch(F){return console.error("‚ùå FuelSaveBackService: Auto-save failed:",F),!1}}static shouldSaveFuelData(e,o,r,u){var t;return o?e.length!==(((t=o.stopLocations)==null?void 0:t.length)||0)?(console.log("ü§ñ Stop count changed, will save"),!0):Math.abs(r-u)>10?(console.log(`ü§ñ Total fuel changed significantly: ${u} ‚Üí ${r}`),!0):!1:(console.log("ü§ñ No existing fuel data, will save"),!0)}}export{me as FuelSaveBackService,me as default};
