import{c as l,_ as d}from"./index-BduuyZfp.js";import"./react-vendors-Bh7YcOHL.js";import"./osdk-vendors-CasKN2Wv.js";class f{static isClientAvailable(){return!!l}static async runDiagnostic(){try{console.log("Running API diagnostic with minimal parameters...");const e=await this.getSDK();console.log("Available SDK Actions:",Object.keys(e).filter(r=>typeof r=="string"&&r.toLowerCase().includes("flight")));const t={flightName:"Diagnostic Test Flight",aircraftRegion:"NORWAY",new_parameter:"Norway",aircraftId:"190",region:"NORWAY",etd:new Date().toISOString(),locations:["ENZV","ENLE"]};console.log("Diagnostic params:",t);const n=await l(e.createNewFlightFp2).applyAction(t,{$returnEdits:!0});return console.log("Diagnostic successful with result:",n),!0}catch(e){if(console.error("Diagnostic failed:",e),e.message&&e.message.includes("evaluatedConstraints"))try{const t=e.message.match(/\{.*\}/s);if(t){const n=JSON.parse(t[0]);console.log("Parameter validation errors:",n)}}catch(t){console.log("Could not parse validation errors:",t)}return!1}}static async getSDK(){try{return await d(()=>import("./osdk-vendors-CasKN2Wv.js").then(e=>e.i),[])}catch(e){throw console.error("Error importing SDK:",e),new Error(`Failed to import SDK: ${e.message}`)}}static async createFlight(e){if(!this.isClientAvailable())throw new Error("OSDK client not available. Try logging in again.");return e.flightId&&e.flightId.trim()!==""?(console.log(`Updating existing flight with ID: ${e.flightId}`),await this.updateFlight(e)):(console.log("Creating new flight"),await this.createNewFlight(e))}static async createNewFlight(e){if(!this.isClientAvailable())throw new Error("OSDK client not available. Try logging in again.");let t=[];e.locations&&Array.isArray(e.locations)?t=e.locations.map(r=>typeof r=="string"?r.trim():r):t=["ENZV","ENLE"];const n=await this.getSDK();try{if(n.createFlightWithWaypoints){console.log("Using new createFlightWithWaypoints function");let r=null;if(e.waypoints&&Array.isArray(e.waypoints))if(console.log("=== PALANTIR SERVICE WAYPOINT DEBUG ==="),console.log("Raw waypoints received:",e.waypoints.length),e.waypoints.forEach((i,s)=>{console.log(`Waypoint ${s}:`,{name:i.name,type:i.type,pointType:i.pointType,isWaypoint:i.isWaypoint})}),!e.waypoints.some(i=>i.pointType==="NAVIGATION_WAYPOINT"||i.isWaypoint===!0||i.type==="WAYPOINT"))console.log("No actual navigation waypoints found - all waypoints have undefined classification. Setting displayWaypoints to null."),r=null;else{console.log("Found actual navigation waypoints, processing them...");const i=e.waypoints.filter(s=>s.pointType==="NAVIGATION_WAYPOINT"?!0:s.pointType==="LANDING_STOP"?!1:typeof s.isWaypoint=="boolean"?s.isWaypoint:s.type==="WAYPOINT"?!0:(s.type==="STOP",!1)).map((s,p)=>({legIndex:s.legIndex||0,waypoint:s.name||s.id}));i.length>0&&(r=JSON.stringify(i))}console.log("🧙‍♂️ CREATEFLIGHT DEBUG: flightData.etd =",e.etd);const o={flightName:e.flightName||"Fast Planner Flight",locations:t,displayWaypoints:r,useOnlyProvidedWaypoints:e.useOnlyProvidedWaypoints??!1,aircraftId:e.aircraftId||"190",region:e.region||"NORWAY",etd:e.etd||new Date().toISOString()};console.log("🧙‍♂️ CREATEFLIGHT DEBUG: params.etd =",o.etd),e.captainId&&(o.captainId=e.captainId),e.copilotId&&(o.copilotId=e.copilotId),e.medicId&&(o.medicId=e.medicId),e.soId&&(o.soId=e.soId),e.rswId&&(o.rswId=e.rswId),console.log("Creating flight with structured waypoints:",JSON.stringify(o,null,2));const c=await l(n.createFlightWithWaypoints).applyAction(o,{$returnEdits:!0});return console.log("Flight creation with structured waypoints successful!",c),c}else{console.log("New createFlightWithWaypoints function not available, falling back to createNewFlightFp2"),console.log("🧙‍♂️ PALANTIR DEBUG: flightData.etd =",e.etd),console.log("🧙‍♂️ PALANTIR DEBUG: flightData.etd type =",typeof e.etd),console.log("🧙‍♂️ PALANTIR DEBUG: flightData.etd truthy =",!!e.etd);const r=e.etd||new Date().toISOString();console.log("🧙‍♂️ PALANTIR DEBUG: Final ETD being used =",r);const o=new Date(r),c=o.toISOString().replace("Z","+00:00");console.log("🧙‍♂️ PALANTIR DEBUG: Extended offset format =",c),console.log("🧙‍♂️ PALANTIR DEBUG: Original .toISOString() =",o.toISOString());const a={flightName:e.flightName||"Test Flight",aircraftRegion:"NORWAY",new_parameter:"Norway",aircraftId:e.aircraftId||"190",region:"NORWAY",etd:r,locations:t,alternateLocation:e.alternateLocation||"",...e.captainId?{captainId:e.captainId}:{},...e.copilotId?{copilotId:e.copilotId}:{}};if(console.log("Flight data structure being sent to API:",JSON.stringify(a,null,2)),!n.createNewFlightFp2)throw console.error("createNewFlightFp2 action not found in SDK"),console.log("Available SDK actions:",Object.keys(n)),new Error("createNewFlightFp2 action not found in SDK");const i=this.formatFlightParams(a);console.log("Calling createNewFlightFp2 with params:",i),console.log("🧙‍♂️ PALANTIR DEBUG: Final params.etd =",i.etd);const s=await l(n.createNewFlightFp2).applyAction(i,{$returnEdits:!0});return console.log("Flight creation successful!",s),s}}catch(r){throw console.error("Error creating flight:",r),console.error("Error details:",r),r}}static async updateFlight(e){if(!this.isClientAvailable())throw new Error("OSDK client not available. Try logging in again.");if(!e.flightId)throw new Error("Flight ID is required for updating a flight");const t=await this.getSDK();try{if(t.updateFastPlannerFlight){console.log("Using new updateFastPlannerFlight function");let n=null;if(e.waypoints&&Array.isArray(e.waypoints)){const a=e.waypoints.filter(i=>i.pointType==="NAVIGATION_WAYPOINT"?!0:i.pointType==="LANDING_STOP"?!1:typeof i.isWaypoint=="boolean"?i.isWaypoint:i.type==="WAYPOINT"?!0:i.type!=="STOP").map(i=>({legIndex:i.legIndex||0,waypoint:i.name||i.id}));a.length>0&&(n=JSON.stringify(a))}let r=[];e.locations&&Array.isArray(e.locations)&&(r=e.locations.map(a=>typeof a=="string"?a.trim():a));const o={flightId:e.flightId,flightName:e.flightName,locations:r,structuredWaypoints:n,useOnlyProvidedWaypoints:!0,region:e.region||e.aircraftRegion||"NORWAY",aircraftRegion:e.aircraftRegion||e.region||"NORWAY",etd:e.etd||new Date().toISOString()};e.aircraftId&&(o.aircraftId=e.aircraftId),e.alternateLocation&&(o.alternateLocation=e.alternateLocation),e.captainId&&(o.captainId=e.captainId),e.copilotId&&(o.copilotId=e.copilotId),e.medicId&&(o.medicId=e.medicId),e.soId&&(o.soId=e.soId),e.rswId&&(o.rswId=e.rswId),e.fuelPlanId&&(o.fuelPlanId=e.fuelPlanId),e.timingId&&(o.timingId=e.timingId),e.weightBalanceId&&(o.weightBalanceId=e.weightBalanceId),e.policyUuid&&(o.policyUuid=e.policyUuid),console.log("Updating flight with parameters:",JSON.stringify(o,null,2));const c=await l(t.updateFastPlannerFlight).applyAction(o,{$returnEdits:!0});return console.log("Flight update successful!",c),c}else{if(console.log("New updateFastPlannerFlight function not available, falling back to editExistingFlightFp2"),!t.editExistingFlightFp2)throw new Error("Neither updateFastPlannerFlight nor editExistingFlightFp2 are available");const n={flightId:e.flightId,flightName:e.flightName,aircraftRegion:"NORWAY",aircraftId:e.aircraftId,region:"NORWAY",etd:e.etd||new Date().toISOString(),locations:e.locations||["ENZV","ENLE"],alternateLocation:e.alternateLocation||""};e.captainId&&(n.captainId=e.captainId),e.copilotId&&(n.copilotId=e.copilotId),console.log("Flight update data structure:",JSON.stringify(n,null,2));const r=await l(t.editExistingFlightFp2).applyAction(n,{$returnEdits:!0});return console.log("Flight update successful!",r),r}}catch(n){throw console.error("Error updating flight:",n),n}}static extractFlightId(e){if(console.log("Extracting flight ID from result:",e),e&&e.addedObjects&&Array.isArray(e.addedObjects)){for(const t of e.addedObjects)if(t.objectType==="MainFlightObjectFp2"&&t.primaryKey)return console.log("Found flight ID in addedObjects:",t.primaryKey),t.primaryKey}if(e){if(e.editedObjectTypes&&e.editedObjectTypes.length>0){const t=e.editedObjectTypes[0];if(t&&t.id)return console.log("Found flight ID in editedObjectTypes:",t.id),t.id}if(e.type==="edits"&&e.updatedObject){const t=e.updatedObject.id||"Unknown ID";return console.log("Found flight ID in updatedObject:",t),t}if(e.id)return console.log("Found flight ID directly in result:",e.id),e.id}return console.warn('Could not find flight ID in result. Using "Unknown ID"'),"Unknown ID"}static isSuccessfulResult(e){return e?e.type==="edits"||e.editedObjectTypes&&e.editedObjectTypes.length>0||e.updatedObject||e.id:!1}static formatFlightParams(e){const t={flightName:e.flightName||"Test Flight",aircraftRegion:"NORWAY",new_parameter:"Norway",aircraftId:e.aircraftId||"190",region:"NORWAY",etd:e.etd||new Date().toISOString(),locations:Array.isArray(e.locations)?e.locations:["ENZV","ENLE"],alternateLocation:e.alternateLocation||""};return e.captainId&&(t.captainId=e.captainId),e.copilotId&&(t.copilotId=e.copilotId),e.medicId&&(t.medicId=e.medicId),e.soId&&(t.soId=e.soId),e.rswId&&(t.rswId=e.rswId),console.log("Formatted flight parameters:",t),t}static formatErrorMessage(e){if(!e)return"Unknown error occurred";console.error("Full error details:",e);const t=e.message||"";if(t.includes("401")||t.includes("unauthorized"))return"Authentication error: You need to log in again to save flights";if(t.includes("404")||t.includes("not found"))return"API endpoint not found: The required action may not be available";if(t.includes("400")||t.includes("Bad Request")){let n="API request error (400): The server rejected the flight data.";return e.response&&e.response.data&&(n+=" Details: "+JSON.stringify(e.response.data)),n+=" Please check that all required fields are correctly formatted, especially IDs and dates.",n}return t.includes("timeout")||t.includes("aborted")?"Connection timeout: The server took too long to respond":t.includes("network")||t.includes("offline")?"Network error: Check your internet connection":t.includes("TypeError")&&t.includes("is not a function")?"API function error: The required action may not be available or has changed. Check the Palantir API documentation.":t.includes("bristol")||t.includes("foundry")?"API connection error: Unable to connect to the Palantir Foundry service. Please verify your authentication.":t.includes("import")||t.includes("module")?"SDK import error: Unable to load the @flight-app/sdk module. Please check that it is correctly installed.":`Error creating flight: ${t} (Check browser console for more details)`}}export{f as default};
