{"version":3,"file":"AutoFlightManager-Cjb__kKr.js","sources":["../../src/components/fast-planner/modules/weather/AutoFlightManager.js"],"sourcesContent":["/**\n * AutoFlightManager.js\n * \n * REVOLUTIONARY Automatic Flight Simulation System\n * Flies your planned route automatically with realistic movements,\n * altitude changes, weather avoidance, and time-lapse effects\n */\n\nclass AutoFlightManager {\n    constructor(mapInstance, enhanced3DControls) {\n        // Validate map instance\n        if (!mapInstance) {\n            throw new Error('‚ùå AutoFlightManager requires a valid map instance');\n        }\n        \n        // Validate map is loaded\n        if (!mapInstance.isStyleLoaded || !mapInstance.isStyleLoaded()) {\n            console.warn('‚ö†Ô∏è Map style not loaded yet - AutoFlight may not work correctly');\n        }\n        \n        this.map = mapInstance;\n        this.controls = enhanced3DControls;\n        this.isFlying = false;\n        this.isPaused = false;\n        this.currentWaypointIndex = 0;\n        this.flightProgress = 0; // 0-1 between current waypoints\n        this.animationFrame = null;\n        this.hasError = false; // Track error state\n        \n        // Flight configuration\n        this.config = {\n            speedMultiplier: 5,     // 1x to 50x speed\n            cruiseAltitude: 3000,   // Default cruise altitude (feet)\n            climbRate: 500,         // Feet per minute climb\n            turnRate: 2,            // Degrees per second turn rate\n            groundSpeed: 120,       // Knots ground speed\n            frameRate: 60          // Animation frames per second\n        };\n        \n        // Flight data\n        this.route = {\n            waypoints: [],          // [{ lat, lng, name, altitude? }]\n            totalDistance: 0,       // Nautical miles\n            estimatedTime: 0,       // Minutes\n            currentPosition: null,  // Current lat/lng\n            currentAltitude: 0,     // Current altitude\n            currentHeading: 0       // Current magnetic heading\n        };\n        \n        // Flight state\n        this.state = {\n            phase: 'PREFLIGHT',     // PREFLIGHT, TAXI, TAKEOFF, CRUISE, APPROACH, LANDED\n            startTime: null,\n            elapsedTime: 0,         // Real elapsed seconds\n            simulatedTime: 0,       // Simulated flight time\n            fuelRemaining: 100      // Percentage\n        };\n        \n        console.log('üõ©Ô∏è AutoFlight Manager initialized - Ready for automatic flight simulation!');\n    }\n    \n    /**\n     * Load flight route from waypoints\n     * @param {Array} waypoints - Array of waypoint objects\n     */\n    loadRoute(waypoints) {\n        console.log('üõ©Ô∏è Loading route with waypoints:', waypoints);\n        \n        if (!waypoints || waypoints.length < 2) {\n            console.error('‚ùå Need at least 2 waypoints for flight route, got:', waypoints?.length || 0);\n            return false;\n        }\n        \n        // Validate waypoint data\n        const validWaypoints = waypoints.filter(wp => {\n            const hasLat = wp.lat !== undefined || wp.latitude !== undefined;\n            const hasLng = wp.lng !== undefined || wp.longitude !== undefined || wp.lon !== undefined;\n            \n            if (!hasLat || !hasLng) {\n                console.warn('‚ö†Ô∏è Invalid waypoint (missing coordinates):', wp);\n                return false;\n            }\n            return true;\n        });\n        \n        if (validWaypoints.length < 2) {\n            console.error('‚ùå Not enough valid waypoints after validation:', validWaypoints.length);\n            return false;\n        }\n        \n        this.route.waypoints = validWaypoints.map((wp, index) => ({\n            lat: wp.lat || wp.latitude,\n            lng: wp.lng || wp.longitude || wp.lon,\n            name: wp.name || `WP${index + 1}`,\n            altitude: wp.altitude || this.config.cruiseAltitude,\n            index: index\n        }));\n        \n        console.log('üõ©Ô∏è Processed waypoints:', this.route.waypoints);\n        \n        // Calculate total distance and flight time\n        this.calculateRouteMetrics();\n        \n        // Set starting position\n        this.route.currentPosition = { ...this.route.waypoints[0] };\n        this.route.currentAltitude = this.route.waypoints[0].altitude;\n        this.currentWaypointIndex = 0;\n        this.flightProgress = 0;\n        \n        console.log(`‚úÖ Route loaded: ${this.route.waypoints.length} waypoints, ${this.route.totalDistance.toFixed(1)}NM, ~${this.route.estimatedTime.toFixed(0)} minutes`);\n        console.log(`üõ©Ô∏è Route: ${this.route.waypoints.map(wp => wp.name).join(' ‚Üí ')}`);\n        \n        // Don't create DOM panel - use React panel instead\n        console.log('üõ©Ô∏è Route ready for flight simulation');\n        return true;\n    }\n    \n    /**\n     * Calculate route distance and estimated flight time\n     */\n    calculateRouteMetrics() {\n        this.route.totalDistance = 0;\n        \n        for (let i = 0; i < this.route.waypoints.length - 1; i++) {\n            const from = this.route.waypoints[i];\n            const to = this.route.waypoints[i + 1];\n            const distance = this.calculateDistance(from.lat, from.lng, to.lat, to.lng);\n            this.route.totalDistance += distance;\n        }\n        \n        // Estimate flight time (distance / ground speed * 60 for minutes)\n        this.route.estimatedTime = (this.route.totalDistance / this.config.groundSpeed) * 60;\n    }\n    \n    /**\n     * Start automatic flight simulation\n     */\n    startFlight() {\n        console.log('üõ©Ô∏è Starting auto flight...');\n        \n        // Validate prerequisites\n        if (!this.route.waypoints.length) {\n            console.error('‚ùå No route loaded for flight');\n            this.hasError = true;\n            return false;\n        }\n        \n        if (this.isFlying) {\n            console.warn('‚ö†Ô∏è Flight already in progress');\n            return false;\n        }\n        \n        if (!this.map || !this.map.isStyleLoaded()) {\n            console.error('‚ùå Map not ready for flight simulation');\n            this.hasError = true;\n            return false;\n        }\n        \n        try {\n            this.isFlying = true;\n            this.isPaused = false;\n            this.hasError = false;\n            this.state.phase = 'TAKEOFF';\n            this.state.startTime = Date.now();\n            \n            // DON'T reset position if we already have one (preserve scrubbed position)\n            if (this.currentWaypointIndex === undefined || this.currentWaypointIndex === null) {\n                this.currentWaypointIndex = 0;\n                this.flightProgress = 0;\n            }\n            \n            console.log(`üõ©Ô∏è Starting flight from waypoint ${this.currentWaypointIndex + 1}, progress: ${Math.round(this.flightProgress * 100)}%`);\n            \n            console.log(`üõ´ Starting flight with ${this.route.waypoints.length} waypoints`);\n            console.log(`üõ´ Route: ${this.route.waypoints.map(wp => wp.name).join(' ‚Üí ')}`);\n            \n            // Move camera to current position (not always departure)\n            let currentPosition;\n            if (this.route.currentPosition) {\n                // Use existing current position (from scrubbing)\n                currentPosition = this.route.currentPosition;\n                console.log('üõ´ Moving camera to current position:', currentPosition);\n            } else {\n                // Fall back to departure if no current position\n                currentPosition = { lat: this.route.waypoints[0].lat, lng: this.route.waypoints[0].lng };\n                this.route.currentPosition = currentPosition;\n                console.log('üõ´ Moving camera to departure:', currentPosition);\n            }\n            \n            this.map.easeTo({\n                center: [currentPosition.lng, currentPosition.lat],\n                zoom: 12,\n                pitch: 45,\n                bearing: this.calculateInitialHeading(),\n                duration: 2000\n            });\n            \n            // Start flight animation after camera move\n            setTimeout(() => {\n                if (this.isFlying && !this.hasError) {\n                    console.log('üõ´ Starting flight animation...');\n                    this.startFlightAnimation();\n                }\n            }, 2500);\n            \n            console.log('‚úÖ Flight started! Automatic navigation engaged.');\n            this.updateFlightPanel();\n            \n            return true;\n            \n        } catch (error) {\n            console.error('‚ùå Error starting flight:', error);\n            this.hasError = true;\n            this.isFlying = false;\n            return false;\n        }\n    }\n    \n    /**\n     * Pause/resume flight\n     */\n    togglePause() {\n        this.isPaused = !this.isPaused;\n        console.log(`${this.isPaused ? '‚è∏Ô∏è Flight paused' : '‚ñ∂Ô∏è Flight resumed'}`);\n        this.updateFlightPanel();\n    }\n    \n    /**\n     * Stop flight and return to normal view\n     */\n    stopFlight() {\n        this.isFlying = false;\n        this.isPaused = false;\n        \n        if (this.animationFrame) {\n            cancelAnimationFrame(this.animationFrame);\n            this.animationFrame = null;\n        }\n        \n        this.state.phase = 'LANDED';\n        console.log('üõ¨ Flight stopped');\n        this.updateFlightPanel();\n    }\n    \n    /**\n     * Set flight progress to specific point (0-100%)\n     */\n    setFlightProgress(percent) {\n        if (!this.route.waypoints.length) return;\n        \n        console.log(`üõ©Ô∏è Setting flight progress to ${percent}%`);\n        \n        // Convert percentage to waypoint index and progress\n        const totalProgress = (percent / 100) * (this.route.waypoints.length - 1);\n        this.currentWaypointIndex = Math.floor(totalProgress);\n        this.flightProgress = totalProgress - this.currentWaypointIndex;\n        \n        // Ensure we don't exceed bounds\n        if (this.currentWaypointIndex >= this.route.waypoints.length - 1) {\n            this.currentWaypointIndex = this.route.waypoints.length - 2;\n            this.flightProgress = 1;\n        }\n        \n        // Calculate new position\n        if (this.currentWaypointIndex < this.route.waypoints.length - 1) {\n            const currentWP = this.route.waypoints[this.currentWaypointIndex];\n            const nextWP = this.route.waypoints[this.currentWaypointIndex + 1];\n            \n            // Interpolate position\n            const lat = currentWP.lat + (nextWP.lat - currentWP.lat) * this.flightProgress;\n            const lng = currentWP.lng + (nextWP.lng - currentWP.lng) * this.flightProgress;\n            const altitude = currentWP.altitude + (nextWP.altitude - currentWP.altitude) * this.flightProgress;\n            \n            this.route.currentPosition = { lat, lng };\n            this.route.currentAltitude = altitude;\n            \n            // Update camera to new position\n            if (this.map && this.map.isStyleLoaded()) {\n                this.map.easeTo({\n                    center: [lng, lat],\n                    duration: 1000\n                });\n            }\n        }\n        \n        console.log(`üõ©Ô∏è Jumped to waypoint ${this.currentWaypointIndex + 1}/${this.route.waypoints.length}, progress: ${Math.round(this.flightProgress * 100)}%`);\n    }\n    \n    /**\n     * Main flight animation loop\n     */\n    startFlightAnimation() {\n        const animate = () => {\n            if (!this.isFlying || this.hasError) {\n                console.log('üõ©Ô∏è Animation stopped - flying:', this.isFlying, 'error:', this.hasError);\n                return;\n            }\n            \n            try {\n                if (!this.isPaused) {\n                    this.updateFlightPosition();\n                    this.updateCamera();\n                    this.updateFlightState();\n                }\n                \n                this.updateFlightPanel();\n                this.animationFrame = requestAnimationFrame(animate);\n                \n            } catch (error) {\n                console.error('‚ùå Error in flight animation:', error);\n                this.hasError = true;\n                this.stopFlight();\n            }\n        };\n        \n        animate();\n    }\n    \n    /**\n     * Update aircraft position along route\n     */\n    updateFlightPosition() {\n        const deltaTime = (1000 / this.config.frameRate) * this.config.speedMultiplier;\n        \n        // Check if we've reached the destination\n        if (this.currentWaypointIndex >= this.route.waypoints.length - 1) {\n            this.completeFlight();\n            return;\n        }\n        \n        const currentWP = this.route.waypoints[this.currentWaypointIndex];\n        const nextWP = this.route.waypoints[this.currentWaypointIndex + 1];\n        \n        // Calculate distance between current waypoints\n        const segmentDistance = this.calculateDistance(currentWP.lat, currentWP.lng, nextWP.lat, nextWP.lng);\n        \n        // Calculate how far we should move this frame (in nautical miles)\n        const speedNMPerMs = this.config.groundSpeed / (60 * 60 * 1000); // NM per millisecond\n        const distanceThisFrame = speedNMPerMs * deltaTime;\n        const progressThisFrame = distanceThisFrame / segmentDistance;\n        \n        // Update progress along current segment\n        this.flightProgress += progressThisFrame;\n        \n        if (this.flightProgress >= 1.0) {\n            // Reached next waypoint\n            this.currentWaypointIndex++;\n            this.flightProgress = 0;\n            \n            if (this.currentWaypointIndex < this.route.waypoints.length) {\n                console.log(`üìç Reached waypoint: ${this.route.waypoints[this.currentWaypointIndex].name}`);\n            }\n        } else {\n            // Interpolate position between waypoints\n            const lat = this.lerp(currentWP.lat, nextWP.lat, this.flightProgress);\n            const lng = this.lerp(currentWP.lng, nextWP.lng, this.flightProgress);\n            const altitude = this.lerp(currentWP.altitude, nextWP.altitude, this.flightProgress);\n            \n            this.route.currentPosition = { lat, lng };\n            this.route.currentAltitude = altitude;\n            \n            // Calculate current heading\n            this.route.currentHeading = this.calculateBearing(currentWP.lat, currentWP.lng, nextWP.lat, nextWP.lng);\n        }\n        \n        // Update simulated time\n        this.state.elapsedTime = (Date.now() - this.state.startTime) / 1000;\n        this.state.simulatedTime = this.state.elapsedTime * this.config.speedMultiplier;\n        \n        // Update fuel (simple linear consumption)\n        const totalFlightTime = this.route.estimatedTime * 60; // seconds\n        this.state.fuelRemaining = Math.max(0, 100 - (this.state.simulatedTime / totalFlightTime) * 100);\n    }\n    \n    /**\n     * Update camera to follow aircraft\n     */\n    updateCamera() {\n        if (!this.route.currentPosition || !this.map) return;\n        \n        try {\n            // Calculate camera altitude based on flight altitude + offset\n            const cameraZoom = this.altitudeToZoom(this.route.currentAltitude + 2000);\n            \n            // Smooth camera following\n            this.map.easeTo({\n                center: [this.route.currentPosition.lng, this.route.currentPosition.lat],\n                zoom: cameraZoom,\n                bearing: this.route.currentHeading,\n                pitch: 60, // Good angle for following flight\n                duration: 100 // Smooth but responsive\n            });\n            \n            // Update 3D cloud effects if active\n            if (window.threeDCloudManager && window.threeDCloudManager.isActive) {\n                try {\n                    window.threeDCloudManager.cameraAltitude = this.route.currentAltitude;\n                    window.threeDCloudManager.updateCloudOpacity();\n                } catch (cloudError) {\n                    console.warn('‚ö†Ô∏è 3D cloud update error:', cloudError);\n                }\n            }\n            \n        } catch (error) {\n            console.error('‚ùå Camera update error:', error);\n            // Don't stop flight for camera errors, just log them\n        }\n    }\n    \n    /**\n     * Update flight state and phase\n     */\n    updateFlightState() {\n        const progressPercent = ((this.currentWaypointIndex + this.flightProgress) / (this.route.waypoints.length - 1)) * 100;\n        \n        // Update flight phase based on progress\n        if (progressPercent < 5) {\n            this.state.phase = 'TAKEOFF';\n        } else if (progressPercent < 95) {\n            this.state.phase = 'CRUISE';\n        } else {\n            this.state.phase = 'APPROACH';\n        }\n    }\n    \n    /**\n     * Complete flight sequence\n     */\n    completeFlight() {\n        this.isFlying = false;\n        this.state.phase = 'LANDED';\n        \n        // Final approach to destination\n        const destination = this.route.waypoints[this.route.waypoints.length - 1];\n        this.map.easeTo({\n            center: [destination.lng, destination.lat],\n            zoom: 14,\n            pitch: 30,\n            bearing: 0,\n            duration: 3000\n        });\n        \n        console.log('üõ¨ Flight completed! Welcome to your destination.');\n        this.updateFlightPanel();\n    }\n    \n    /**\n     * Flight control panel handled by React component\n     * This function is kept for compatibility but doesn't create DOM elements\n     */\n    createFlightPanel() {\n        console.log('üõ©Ô∏è Flight panel creation handled by React component');\n        // Panel is now handled by the React MapLayersCard component\n        // No DOM manipulation needed\n    }\n    \n    /**\n     * Update flight panel display - now handled by React component\n     */\n    updateFlightPanel() {\n        // Flight panel updates are now handled by React component\n        // The MapLayersCard component reads the flight state directly from this manager\n        console.log('üõ©Ô∏è Flight panel update: React component handles display');\n    }\n    \n    /**\n     * Utility functions\n     */\n    calculateDistance(lat1, lng1, lat2, lng2) {\n        const R = 3440.065; // Earth radius in nautical miles\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLng = (lng2 - lng1) * Math.PI / 180;\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                  Math.sin(dLng / 2) * Math.sin(dLng / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return R * c;\n    }\n    \n    calculateBearing(lat1, lng1, lat2, lng2) {\n        const dLng = (lng2 - lng1) * Math.PI / 180;\n        const y = Math.sin(dLng) * Math.cos(lat2 * Math.PI / 180);\n        const x = Math.cos(lat1 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180) -\n                  Math.sin(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.cos(dLng);\n        const bearing = Math.atan2(y, x) * 180 / Math.PI;\n        return (bearing + 360) % 360;\n    }\n    \n    calculateInitialHeading() {\n        if (this.route.waypoints.length < 2) return 0;\n        return this.calculateBearing(\n            this.route.waypoints[0].lat, this.route.waypoints[0].lng,\n            this.route.waypoints[1].lat, this.route.waypoints[1].lng\n        );\n    }\n    \n    altitudeToZoom(altitude) {\n        // Convert altitude to appropriate zoom level\n        return Math.max(8, Math.min(16, 18 - Math.log2(altitude / 1000)));\n    }\n    \n    lerp(start, end, progress) {\n        return start + (end - start) * progress;\n    }\n    \n    /**\n     * Remove flight panel - now handled by React component\n     */\n    removeFlightPanel() {\n        console.log('üõ©Ô∏è Flight panel removal handled by React component');\n        // Panel cleanup is now handled by the React MapLayersCard component\n    }\n    \n    /**\n     * Debug method to check current state\n     */\n    debugStatus() {\n        console.log('üõ©Ô∏è ===== AUTO FLIGHT DEBUG STATUS =====');\n        console.log('Map instance:', this.map);\n        console.log('Map style loaded:', this.map?.isStyleLoaded?.());\n        console.log('Is flying:', this.isFlying);\n        console.log('Is paused:', this.isPaused);\n        console.log('Has error:', this.hasError);\n        console.log('Route waypoints:', this.route.waypoints.length);\n        console.log('Current waypoint index:', this.currentWaypointIndex);\n        console.log('Flight progress:', this.flightProgress);\n        console.log('Current position:', this.route.currentPosition);\n        console.log('Flight state:', this.state);\n        console.log('Animation frame:', this.animationFrame);\n        console.log('Flight panel exists:', !!document.getElementById('auto-flight-panel'));\n        console.log('üõ©Ô∏è ===== END DEBUG STATUS =====');\n    }\n    \n    /**\n     * Clean up\n     */\n    destroy() {\n        this.stopFlight();\n        this.removeFlightPanel();\n    }\n}\n\nexport default AutoFlightManager;\n\n// Make available globally\nif (typeof window !== 'undefined') {\n    window.AutoFlightManager = AutoFlightManager;\n    console.log('üõ©Ô∏è AutoFlight Manager available at: window.AutoFlightManager');\n    \n    // Add global debug function\n    window.debugAutoFlight = () => {\n        if (window.autoFlightManager) {\n            window.autoFlightManager.debugStatus();\n        } else {\n            console.log('üõ©Ô∏è No active auto flight manager found');\n            console.log('üõ©Ô∏è Available:', {\n                AutoFlightManager: !!window.AutoFlightManager,\n                mapManager: !!window.mapManager,\n                enhanced3DControls: !!window.enhanced3DControls\n            });\n        }\n    };\n}"],"names":[],"mappings":"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"}