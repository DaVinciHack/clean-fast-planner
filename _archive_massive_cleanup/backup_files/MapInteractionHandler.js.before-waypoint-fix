/**
 * MapInteractionHandler.js
 * 
 * Handles map click events and route interactions
 * Separates these concerns from the main FastPlannerApp component
 */

class MapInteractionHandler {
  constructor(mapManager, waypointManager, platformManager) {
    this.mapManager = mapManager;
    this.waypointManager = waypointManager;
    this.platformManager = platformManager;
    this.isInitialized = false;
    this.callbacks = {
      onLeftPanelOpen: null,
      onMapClick: null,
      onRouteClick: null,
      onPlatformClick: null,
      onError: null
    };
  }

  /**
   * Set a callback function
   * @param {string} type - The callback type
   * @param {Function} callback - The callback function
   */
  setCallback(type, callback) {
    if (this.callbacks.hasOwnProperty(type)) {
      this.callbacks[type] = callback;
    }
  }

  /**
   * Trigger a callback if it exists
   * @param {string} type - The callback type
   * @param {*} data - The data to pass to the callback
   */
  triggerCallback(type, data) {
    if (this.callbacks[type]) {
      this.callbacks[type](data);
    }
  }

  /**
   * Initialize map click handlers
   * This is the main function that sets up all map interactions
   * @returns {boolean} - Success status
   */
  initialize() {
    console.log('🚨 EMERGENCY FIX: Forcing re-initialization of map interaction handlers');

    // Make sure we have all the required managers
    if (!this.mapManager || !this.waypointManager || !this.platformManager) {
      console.error('MapInteractionHandler: Missing required managers');
      this.triggerCallback('onError', 'Missing required managers');
      return false;
    }

    // Get the map instance
    const map = this.mapManager.getMap();
    if (!map) {
      console.error('MapInteractionHandler: Map is not initialized');
      this.triggerCallback('onError', 'Map is not initialized');
      return false;
    }

    // 🚨 EMERGENCY FIX: Force normal mode regardless of the global flag
    console.log('🚨 EMERGENCY FIX: Forcing global waypoint mode flag to false');
    window.isWaypointModeActive = false;
    
    // 🚨 EMERGENCY FIX: Completely remove all click handlers
    console.log('🚨 EMERGENCY FIX: Removing ALL map click handlers');
    map.off('click');
    
    // Also remove any layer-specific handlers
    const layers = ['route', 'platforms-layer', 'platforms-fixed-layer', 
                   'platforms-movable-layer', 'airfields-layer', 'waypoints-layer'];
    
    layers.forEach(layer => {
      if (map.getLayer(layer)) {
        map.off('click', layer);
      }
    });

    // Map click for adding waypoints - Use bind to ensure correct 'this'
    console.log('🚨 EMERGENCY FIX: Adding fresh map click handler');
    const boundHandler = this.handleMapClick.bind(this);
    map.on('click', boundHandler);

    // Set up route dragging via the waypoint manager's setupRouteDragging method
    if (typeof this.waypointManager.setupRouteDragging === 'function') {
      console.log('🚨 EMERGENCY FIX: Re-initializing route drag handlers');
      this.waypointManager.setupRouteDragging(this.handleRouteDragComplete.bind(this));
    }

    // Mark as initialized
    this.isInitialized = true;
    console.log('🚨 EMERGENCY FIX: Map interactions re-initialized successfully!');
    return true;
  }

  /**
   * Handle map click events
   * @param {Object} e - The click event
   */
  handleMapClick(e) {
    // CRITICAL FIX: Log the mode and flag value at the time of click
    const isWaypointMode = window.isWaypointModeActive === true;
    console.log(`DIRECT FIX: Map clicked in ${isWaypointMode ? 'WAYPOINT' : 'NORMAL'} mode. Flag value: ${window.isWaypointModeActive}`);
    
    // Ensure managers are initialized
    if (!this.mapManager || !this.waypointManager || !this.platformManager) {
      console.error('MapInteractionHandler: Required managers not initialized');
      return;
    }

    const map = this.mapManager.getMap();
    if (!map) return;

    // Notify the app to ensure left panel is shown when clicking on map
    this.triggerCallback('onLeftPanelOpen');
    
    // DIRECT FIX: For waypoint mode, handle differently
    if (isWaypointMode) {
      console.log('DIRECT FIX: Handling click in WAYPOINT mode');
      
      // In waypoint mode, add a waypoint directly
      this.waypointManager.addWaypoint(
        [e.lngLat.lng, e.lngLat.lat],
        `Waypoint ${this.waypointManager.getWaypoints().length + 1}`,
        { isWaypoint: true, type: 'WAYPOINT' }
      );
      
      // If we have a callback, call it
      if (this.callbacks.onMapClick) {
        this.triggerCallback('onMapClick', {
          lngLat: e.lngLat,
          coordinates: [e.lngLat.lng, e.lngLat.lat],
          isWaypointMode: true,
          type: 'WAYPOINT'
        });
      }
      
      return;
    }

    try {
      // First check if the layers exist before querying
      const map = this.mapManager.getMap();
      const availableLayers = [];
      
      // Safely check if each layer exists before adding to query
      ['platforms-fixed-layer', 'platforms-movable-layer', 'airfields-layer', 'platforms-layer'].forEach(layer => {
        try {
          if (map.getLayer(layer)) {
            availableLayers.push(layer);
          }
        } catch (err) {
          // Layer doesn't exist, skip it
          console.log(`Layer ${layer} not available for query`);
        }
      });
      
      // Only query if we have available layers
      if (availableLayers.length > 0) {
        console.log('Querying available platform layers:', availableLayers);
        const platformFeatures = map.queryRenderedFeatures(e.point, { layers: availableLayers });

        if (platformFeatures && platformFeatures.length > 0) {
          console.log('MapInteractionHandler: Clicked on platform:', platformFeatures[0].properties.name);
          const props = platformFeatures[0].properties;
          const coordinates = platformFeatures[0].geometry.coordinates.slice();

          // Handle platform click - either direct add or callback
          this.handlePlatformClick(coordinates, props.name);
          return;
        }
      } else {
        console.log('No platform layers available for query, skipping platform check');
      }
    } catch (err) {
      console.error('MapInteractionHandler: Error handling platform click:', err);
    }

    try {
      // Check if route layer exists before querying
      if (map.getLayer('route')) {
        // Check if clicking on the route line
        const routeFeatures = map.queryRenderedFeatures(e.point, { layers: ['route'] });
        if (routeFeatures && routeFeatures.length > 0) {
          console.log('MapInteractionHandler: Clicked on route line');
          
          // Find where to insert on the path
          const insertIndex = this.waypointManager.findPathInsertIndex(e.lngLat);

          // Try to find nearest platform but don't depend on findNearestPlatform
          let nearestRig = null;
          try {
            if (typeof this.platformManager.findNearestPlatform === 'function') {
              nearestRig = this.platformManager.findNearestPlatform(e.lngLat.lat, e.lngLat.lng);
            } else {
              console.log('findNearestPlatform not available, skipping nearest rig check');
            }
          } catch (err) {
            console.log('Error finding nearest platform, continuing without it');
          }

          // Handle route click - either direct add or callback
          this.handleRouteClick(e.lngLat, insertIndex, nearestRig);
          return;
        }
      } else {
        console.log('Route layer not available for query, skipping route check');
      }
    } catch (err) {
      console.error('MapInteractionHandler: Error handling route click:', err);
    }

    // If we're here, we clicked on the map background (not a platform or route)
    try {
      // Try to check for nearest rig but don't depend on it
      let nearestRig = null;
      
      try {
        if (typeof this.platformManager.findNearestPlatform === 'function') {
          nearestRig = this.platformManager.findNearestPlatform(e.lngLat.lat, e.lngLat.lng);
        } else {
          console.log('findNearestPlatform not available, skipping nearest rig check');
        }
      } catch (err) {
        console.log('Error finding nearest platform, continuing without it');
      }

      if (nearestRig && nearestRig.distance < 5) { // Within 5 nautical miles
        // Add the rig as a waypoint instead of the clicked location
        console.log(`MapInteractionHandler: Using nearest rig: ${nearestRig.name} (${nearestRig.distance.toFixed(1)} nm away)`);
        this.handlePlatformClick(nearestRig.coordinates, nearestRig.name);
      } else {
        // Just add the clicked location as a waypoint
        this.handleMapBackgroundClick(e.lngLat);
      }
    } catch (err) {
      console.error('MapInteractionHandler: Error handling map background click:', err);
      
      // Fallback to just adding the clicked point without any platform checks
      this.addClickedPoint(e.lngLat);
    }
  }

  /**
   * Handle clicks on platform markers
   * @param {Array} coordinates - [lng, lat] coordinates
   * @param {string} name - The platform name
   */
  handlePlatformClick(coordinates, name) {
    console.log(`MapInteractionHandler: Platform click on ${name} at ${coordinates}`);
    
    // Get waypoint mode status
    const isWaypointMode = window.isWaypointModeActive === true;
    
    // Either add directly or trigger callback
    if (this.callbacks.onPlatformClick) {
      this.triggerCallback('onPlatformClick', { 
        coordinates, 
        name,
        isWaypointMode
      });
    } else {
      // Direct add if no callback
      try {
        this.waypointManager.addWaypoint(
          coordinates, 
          name,
          { isWaypointMode: isWaypointMode, type: isWaypointMode ? 'WAYPOINT' : 'STOP' }
        );
      } catch (err) {
        console.error('MapInteractionHandler: Error adding platform waypoint:', err);
        
        // Fallback
        try {
          console.log('MapInteractionHandler: Trying fallback for platform click');
          this.waypointManager.addWaypoint(
            coordinates,
            name || 'Platform'
          );
        } catch (innerErr) {
          console.error('MapInteractionHandler: Fallback also failed:', innerErr);
        }
      }
    }
  }

  /**
   * Handle clicks on the route line
   * @param {Object} lngLat - {lng, lat} click coordinates
   * @param {number} insertIndex - Index to insert the new waypoint
   * @param {Object} nearestRig - The nearest rig if any
   */
  handleRouteClick(lngLat, insertIndex, nearestRig) {
    console.log(`MapInteractionHandler: Route click at [${lngLat.lng}, ${lngLat.lat}], insert at ${insertIndex}`);
    
    // Get waypoint mode status
    const isWaypointMode = window.isWaypointModeActive === true;
    
    // Either add directly or trigger callback
    if (this.callbacks.onRouteClick) {
      const callbackData = { 
        lngLat, 
        insertIndex, 
        nearestRig,
        isWaypointMode
      };
      
      this.triggerCallback('onRouteClick', callbackData);
    } else {
      // Direct add if no callback
      try {
        if (nearestRig && nearestRig.distance < 5) {
          // Add the rig instead of the clicked point
          console.log(`MapInteractionHandler: Using nearest rig: ${nearestRig.name}`);
          
          // Safely get coordinates
          let coordinates = [lngLat.lng, lngLat.lat]; // Default to clicked point
          
          try {
            if (Array.isArray(nearestRig.coordinates)) {
              coordinates = nearestRig.coordinates;
            } else if (Array.isArray(nearestRig.coords)) {
              coordinates = nearestRig.coords;
            } else if (nearestRig.lng !== undefined && nearestRig.lat !== undefined) {
              coordinates = [nearestRig.lng, nearestRig.lat];
            }
          } catch (err) {
            console.error('MapInteractionHandler: Error getting rig coordinates:', err);
          }
          
          this.waypointManager.addWaypointAtIndex(
            coordinates, 
            nearestRig.name,
            insertIndex,
            { isWaypoint: isWaypointMode, type: isWaypointMode ? 'WAYPOINT' : 'STOP' }
          );
        } else {
          // Add the clicked point
          console.log(`MapInteractionHandler: Adding ${isWaypointMode ? 'waypoint' : 'stop'} at route click`);
          this.waypointManager.addWaypointAtIndex(
            [lngLat.lng, lngLat.lat],
            isWaypointMode ? `Waypoint ${insertIndex}` : `Stop ${insertIndex}`,
            insertIndex,
            { isWaypoint: isWaypointMode, type: isWaypointMode ? 'WAYPOINT' : 'STOP' }
          );
        }
      } catch (err) {
        console.error('MapInteractionHandler: Error adding waypoint at route click:', err);
        
        // Fallback to simple addition
        try {
          this.waypointManager.addWaypointAtIndex(
            [lngLat.lng, lngLat.lat],
            isWaypointMode ? `Waypoint ${insertIndex}` : `Stop ${insertIndex}`,
            insertIndex,
            { isWaypoint: isWaypointMode, type: isWaypointMode ? 'WAYPOINT' : 'STOP' }
          );
        } catch (innerErr) {
          console.error('MapInteractionHandler: Fallback also failed:', innerErr);
        }
      }
    }
  }

  /**
   * Handle clicks on the map background (not on platforms or route)
   * @param {Object} lngLat - {lng, lat} click coordinates
   */
  handleMapBackgroundClick(lngLat) {
    console.log(`MapInteractionHandler: 🌐 Map background click at [${lngLat.lng}, ${lngLat.lat}]`);
    
    // Safe check for nearest platform
    let nearestRig = null;
    try {
      if (typeof this.platformManager.findNearestPlatform === 'function') {
        nearestRig = this.platformManager.findNearestPlatform(lngLat.lat, lngLat.lng, 5);
        if (nearestRig) {
          console.log(`MapInteractionHandler: 🌐 Found nearest rig: ${nearestRig.name} at distance ${nearestRig.distance.toFixed(2)} nm`);
        } else {
          console.log(`MapInteractionHandler: 🌐 No rig found within 5 nautical miles`);
        }
      } else {
        console.log('MapInteractionHandler: 🌐 findNearestPlatform not available');
      }
    } catch (err) {
      console.log('MapInteractionHandler: 🌐 Error getting nearest platform:', err);
      nearestRig = null;
    }

    // Get waypoint mode status
    const isWaypointMode = window.isWaypointModeActive === true;
    
    // Either use callback or direct add
    if (this.callbacks.onMapClick) {
      // Include the nearest rig info in the callback data
      const callbackData = { 
        lngLat: lngLat,
        coordinates: [lngLat.lng, lngLat.lat], // Ensure we have coordinates in array format
        mapClickSource: 'directClick', // CRITICAL FIX: Flag to identify this is a map click
        isWaypointMode: isWaypointMode // Add mode flag to callback data
      };
      
      // Safely add nearest rig if available
      if (nearestRig) {
        // Make sure coordinates are in the right format - check all possible formats
        let rigCoordinates = [lngLat.lng, lngLat.lat]; // Default to clicked point
        
        try {
          if (Array.isArray(nearestRig.coordinates)) {
            rigCoordinates = nearestRig.coordinates;
          } else if (Array.isArray(nearestRig.coords)) {
            rigCoordinates = nearestRig.coords;
          } else if (nearestRig.lng !== undefined && nearestRig.lat !== undefined) {
            rigCoordinates = [nearestRig.lng, nearestRig.lat];
          }
        } catch (err) {
          console.error('MapInteractionHandler: 🌐 Invalid rig coordinates format:', err);
        }
        
        callbackData.nearestRig = {
          ...nearestRig,
          coordinates: rigCoordinates,
          name: nearestRig.name || 'Unknown'
        };
      }
      
      console.log(`MapInteractionHandler: 🌐 Triggering onMapClick with data:`, callbackData);
      this.triggerCallback('onMapClick', callbackData);
    } else {
      // Direct add - use nearest rig if available within distance
      if (nearestRig && nearestRig.distance <= 5) {
        try {
          console.log(`MapInteractionHandler: 🌐 Snapping to rig ${nearestRig.name}`);
          
          // Safely get coordinates
          let coordinates = [lngLat.lng, lngLat.lat]; // Default to clicked point
          
          if (Array.isArray(nearestRig.coordinates)) {
            coordinates = nearestRig.coordinates;
          } else if (Array.isArray(nearestRig.coords)) {
            coordinates = nearestRig.coords;
          } else if (nearestRig.lng !== undefined && nearestRig.lat !== undefined) {
            coordinates = [nearestRig.lng, nearestRig.lat];
          }
          
          this.waypointManager.addWaypoint(
            coordinates, 
            nearestRig.name,
            { isWaypoint: isWaypointMode, type: isWaypointMode ? 'WAYPOINT' : 'STOP' }
          );
        } catch (err) {
          console.error('MapInteractionHandler: 🌐 Error adding nearest rig:', err);
          // Fall back to clicked point
          this.addClickedPoint(lngLat);
        }
      } else {
        // No nearby rig, just add the clicked point
        console.log(`MapInteractionHandler: 🌐 Adding ${isWaypointMode ? 'waypoint' : 'stop'} at clicked point`);
        this.waypointManager.addWaypoint(
          [lngLat.lng, lngLat.lat],
          isWaypointMode ? `Waypoint ${this.waypointManager.getWaypoints().length + 1}` : `Stop ${this.waypointManager.getWaypoints().length + 1}`,
          { isWaypoint: isWaypointMode, type: isWaypointMode ? 'WAYPOINT' : 'STOP' }
        );
      }
      
      // Force route update with a small delay
      setTimeout(() => {
        if (this.waypointManager && this.waypointManager.updateRoute) {
          this.waypointManager.updateRoute();
        }
      }, 50);
    }
  }

  /**
   * Handle route drag completion
   * @param {number} insertIndex - Index to insert the new waypoint
   * @param {Array} coords - [lng, lat] coordinates
   */
  handleRouteDragComplete(insertIndex, coords) {
    console.log(`MapInteractionHandler: Route dragged at index ${insertIndex}`, coords);
    
    // Check for nearest rig - but safely
    try {
      let nearestRig = null;
      
      // Safely check for nearest platform
      try {
        if (typeof this.platformManager.findNearestPlatform === 'function') {
          nearestRig = this.platformManager.findNearestPlatform(coords[1], coords[0], 5);
        } else {
          console.log('findNearestPlatform not available, skipping nearest rig check for drag');
        }
      } catch (err) {
        console.log('Error finding nearest platform for drag, continuing without it');
      }

      if (nearestRig && nearestRig.distance < 5) { // Within 5 nautical miles
        // Add the rig instead of the dragged point
        console.log(`MapInteractionHandler: Using nearest rig for drag: ${nearestRig.name} (${nearestRig.distance.toFixed(1)} nm away)`);
        this.waypointManager.addWaypointAtIndex(nearestRig.coordinates, nearestRig.name, insertIndex);
      } else {
        // Add the dragged point
        this.waypointManager.addWaypointAtIndex(coords, null, insertIndex);
      }
    } catch (err) {
      console.error('MapInteractionHandler: Error handling route drag:', err);
      
      // Fallback to just adding the dragged point
      this.waypointManager.addWaypointAtIndex(coords, null, insertIndex);
    }
  }
  
  /**
   * Add a clicked point directly without any platform checking
   * This is a simple fallback method for when other methods fail
   * @param {Object} lngLat - {lng, lat} click coordinates
   */
  addClickedPoint(lngLat) {
    console.log(`MapInteractionHandler: FALLBACK - Adding direct waypoint at [${lngLat.lng}, ${lngLat.lat}]`);
    
    // Get waypoint mode status
    const isWaypointMode = window.isWaypointModeActive === true;
    
    // Either use callback or direct add
    if (this.callbacks.onMapClick) {
      const callbackData = { 
        lngLat: lngLat,
        coordinates: [lngLat.lng, lngLat.lat],
        mapClickSource: 'fallback'
      };
      
      console.log(`MapInteractionHandler: Triggering onMapClick with fallback data`);
      this.triggerCallback('onMapClick', callbackData);
    } else {
      // Direct add
      if (this.waypointManager) {
        this.waypointManager.addWaypoint(
          [lngLat.lng, lngLat.lat], 
          isWaypointMode ? `Waypoint ${this.waypointManager.getWaypoints().length + 1}` : `Stop ${this.waypointManager.getWaypoints().length + 1}`,
          { isWaypoint: isWaypointMode, type: isWaypointMode ? 'WAYPOINT' : 'STOP' }
        );
      }
    }
  }
}

export default MapInteractionHandler;