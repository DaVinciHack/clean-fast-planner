{"version":3,"file":"WeatherSuiteManager-C_ou0WFV.js","sources":["../../src/components/fast-planner/modules/weather/WeatherSuiteManager.js"],"sourcesContent":["/**\n * WeatherSuiteManager.js\n * Complete weather system for offshore aviation operations\n * \n * Manages satellite, radar, lightning, and live weather data\n * Perfect for oil rig operations in Gulf of Mexico and global expansion\n */\n\nimport NOAASatelliteService from './NOAASatelliteService.js';\n\nclass WeatherSuiteManager {\n    constructor() {\n        this.noaaService = new NOAASatelliteService();\n        this.activeWeatherLayers = new Map();\n        this.isInitialized = false;\n        \n        // Weather layer configurations for different operations\n        this.weatherProfiles = {\n            // Perfect for oil rig helicopter operations\n            rigOperations: {\n                name: 'Oil Rig Operations',\n                layers: ['CARIBBEAN', 'LIGHTNING', 'VISIBLE', 'LONGWAVE'],\n                description: 'Optimized for Gulf of Mexico offshore operations',\n                priority: ['LIGHTNING', 'CARIBBEAN', 'VISIBLE'] // Safety first!\n            },\n            \n            // For storm monitoring and severe weather\n            stormTracking: {\n                name: 'Storm Tracking',\n                layers: ['LIGHTNING', 'CARIBBEAN', 'WATER_VAPOR', 'LONGWAVE'],\n                description: 'Real-time storm development and tracking',\n                priority: ['LIGHTNING', 'CARIBBEAN', 'WATER_VAPOR']\n            },\n            \n            // For flight planning and visibility\n            flightPlanning: {\n                name: 'Flight Planning',\n                layers: ['VISIBLE', 'CARIBBEAN', 'LIGHTNING'],\n                description: 'Essential weather for flight safety',\n                priority: ['LIGHTNING', 'CARIBBEAN', 'VISIBLE']\n            },\n            \n            // For global operations (Brazil, Nigeria)\n            globalOperations: {\n                name: 'Global Operations',\n                layers: ['LIGHTNING', 'VISIBLE', 'LONGWAVE'],\n                description: 'Global lightning and satellite coverage',\n                priority: ['LIGHTNING', 'VISIBLE', 'LONGWAVE']\n            }\n        };\n        \n        console.log('üå©Ô∏è Weather Suite Manager initialized');\n    }\n    \n    /**\n     * Initialize the weather suite with map reference\n     * @param {Object} mapInstance - Mapbox GL map instance\n     */\n    initialize(mapInstance) {\n        if (!mapInstance) {\n            throw new Error('Map instance required for weather suite');\n        }\n        \n        this.mapInstance = mapInstance;\n        this.isInitialized = true;\n        \n        console.log('‚úÖ Weather Suite Manager ready');\n        return true;\n    }\n    \n    /**\n     * Apply a complete weather profile\n     * @param {string} profileName - Name of the weather profile\n     * @param {Object} options - Additional options\n     */\n    async applyWeatherProfile(profileName, options = {}) {\n        if (!this.isInitialized) {\n            throw new Error('Weather suite not initialized');\n        }\n        \n        const profile = this.weatherProfiles[profileName];\n        if (!profile) {\n            throw new Error(`Unknown weather profile: ${profileName}`);\n        }\n        \n        console.log(`üå§Ô∏è Applying weather profile: ${profile.name}`);\n        console.log(`üìã ${profile.description}`);\n        \n        const results = {\n            profile: profileName,\n            success: [],\n            failed: [],\n            layersAdded: 0\n        };\n        \n        // Clear existing weather layers first\n        await this.clearAllWeatherLayers();\n        \n        // Add layers in priority order\n        const layersToAdd = options.priorityOrder ? profile.priority : profile.layers;\n        \n        for (const layerType of layersToAdd) {\n            try {\n                console.log(`üõ∞Ô∏è Adding ${layerType} layer...`);\n                \n                const success = await this.addWeatherLayer(layerType, {\n                    opacity: options.opacity || 0.7,\n                    ...options\n                });\n                \n                if (success) {\n                    results.success.push(layerType);\n                    results.layersAdded++;\n                    console.log(`‚úÖ ${layerType} layer added successfully`);\n                } else {\n                    results.failed.push(layerType);\n                    console.log(`‚ùå ${layerType} layer failed to add`);\n                }\n                \n                // Small delay between layers to prevent overwhelming\n                await new Promise(resolve => setTimeout(resolve, 500));\n                \n            } catch (error) {\n                console.error(`‚ùå Error adding ${layerType}:`, error.message);\n                results.failed.push(layerType);\n            }\n        }\n        \n        // Store active profile\n        this.activeProfile = profileName;\n        \n        console.log(`üéâ Weather profile applied: ${results.layersAdded}/${layersToAdd.length} layers successful`);\n        \n        return results;\n    }\n    \n    /**\n     * Add individual weather layer\n     * @param {string} layerType - Type of weather layer\n     * @param {Object} options - Layer options\n     */\n    async addWeatherLayer(layerType, options = {}) {\n        if (!this.isInitialized) {\n            throw new Error('Weather suite not initialized');\n        }\n        \n        try {\n            // Special handling for lightning (global coverage)\n            if (layerType === 'LIGHTNING') {\n                const success = await this.addLightningLayer(options);\n                if (success) {\n                    this.activeWeatherLayers.set(layerType, {\n                        type: 'lightning',\n                        layerId: 'noaa-lightning-layer',\n                        sourceId: 'noaa-lightning',\n                        addedAt: new Date()\n                    });\n                }\n                return success;\n            }\n            \n            // Use existing NOAA service for satellite/radar\n            const success = await this.noaaService.addTestOverlay(this.mapInstance, layerType);\n            \n            if (success) {\n                this.activeWeatherLayers.set(layerType, {\n                    type: this.getLayerType(layerType),\n                    layerId: 'noaa-satellite-layer', // Current implementation uses this\n                    sourceId: 'noaa-satellite',\n                    addedAt: new Date()\n                });\n                \n                // Apply opacity if specified\n                if (options.opacity !== undefined) {\n                    this.setLayerOpacity(layerType, options.opacity);\n                }\n            }\n            \n            return success;\n            \n        } catch (error) {\n            console.error(`Error adding weather layer ${layerType}:`, error);\n            return false;\n        }\n    }\n    \n    /**\n     * Add lightning detection layer (special handling for global coverage)\n     * @param {Object} options - Lightning layer options\n     */\n    async addLightningLayer(options = {}) {\n        try {\n            const layerName = this.noaaService.lightningLayers.LIGHTNING;\n            \n            // Create lightning-specific source\n            const source = {\n                type: 'raster',\n                tiles: [this.noaaService.getWMSUrl(layerName, {\n                    bbox: '{bbox-epsg-3857}',\n                    width: 512,\n                    height: 512\n                })],\n                tileSize: 512,\n                attribution: '¬© NOAA Lightning Detection Network'\n            };\n            \n            // Remove existing lightning layer if present\n            if (this.mapInstance.getSource('noaa-lightning')) {\n                this.mapInstance.removeLayer('noaa-lightning-layer');\n                this.mapInstance.removeSource('noaa-lightning');\n            }\n            \n            // Add source to map\n            this.mapInstance.addSource('noaa-lightning', source);\n            \n            // Add layer to map\n            this.mapInstance.addLayer({\n                id: 'noaa-lightning-layer',\n                type: 'raster',\n                source: 'noaa-lightning',\n                paint: {\n                    'raster-opacity': options.opacity || 0.8 // Lightning should be visible!\n                }\n            });\n            \n            console.log('‚ö° Lightning detection layer added successfully');\n            return true;\n            \n        } catch (error) {\n            console.error('‚ùå Failed to add lightning layer:', error);\n            return false;\n        }\n    }\n    \n    /**\n     * Clear all weather layers\n     */\n    async clearAllWeatherLayers() {\n        console.log('üßπ Clearing all weather layers...');\n        \n        // Remove NOAA satellite/radar layers\n        this.noaaService.removeOverlay(this.mapInstance);\n        \n        // Remove lightning layer\n        if (this.mapInstance.getSource('noaa-lightning')) {\n            this.mapInstance.removeLayer('noaa-lightning-layer');\n            this.mapInstance.removeSource('noaa-lightning');\n        }\n        \n        // Clear tracking\n        this.activeWeatherLayers.clear();\n        this.activeProfile = null;\n        \n        console.log('‚úÖ All weather layers cleared');\n    }\n    \n    /**\n     * Set opacity for specific weather layer\n     * @param {string} layerType - Type of weather layer\n     * @param {number} opacity - Opacity value (0-1)\n     */\n    setLayerOpacity(layerType, opacity) {\n        const layerInfo = this.activeWeatherLayers.get(layerType);\n        if (!layerInfo) {\n            console.warn(`Layer ${layerType} not found`);\n            return false;\n        }\n        \n        try {\n            this.mapInstance.setPaintProperty(layerInfo.layerId, 'raster-opacity', opacity);\n            console.log(`üé® ${layerType} opacity set to ${opacity}`);\n            return true;\n        } catch (error) {\n            console.error(`Error setting opacity for ${layerType}:`, error);\n            return false;\n        }\n    }\n    \n    /**\n     * Toggle visibility of weather layer\n     * @param {string} layerType - Type of weather layer\n     * @param {boolean} visible - Visibility state\n     */\n    toggleLayerVisibility(layerType, visible = null) {\n        const layerInfo = this.activeWeatherLayers.get(layerType);\n        if (!layerInfo) {\n            console.warn(`Layer ${layerType} not found`);\n            return false;\n        }\n        \n        try {\n            if (visible === null) {\n                // Toggle current visibility\n                const current = this.mapInstance.getLayoutProperty(layerInfo.layerId, 'visibility');\n                visible = current === 'visible' ? false : true;\n            }\n            \n            this.mapInstance.setLayoutProperty(\n                layerInfo.layerId, \n                'visibility', \n                visible ? 'visible' : 'none'\n            );\n            \n            console.log(`üëÅÔ∏è ${layerType} visibility: ${visible ? 'visible' : 'hidden'}`);\n            return true;\n        } catch (error) {\n            console.error(`Error toggling visibility for ${layerType}:`, error);\n            return false;\n        }\n    }\n    \n    /**\n     * Get status of weather suite\n     */\n    getWeatherStatus() {\n        const status = {\n            initialized: this.isInitialized,\n            activeProfile: this.activeProfile,\n            activeLayers: Array.from(this.activeWeatherLayers.keys()),\n            layerCount: this.activeWeatherLayers.size,\n            profiles: Object.keys(this.weatherProfiles)\n        };\n        \n        console.log('üå§Ô∏è Weather Suite Status:', status);\n        return status;\n    }\n    \n    /**\n     * Helper to determine layer type\n     * @private\n     */\n    getLayerType(layerType) {\n        if (Object.keys(this.noaaService.satelliteLayers).includes(layerType)) {\n            return 'satellite';\n        } else if (Object.keys(this.noaaService.radarLayers).includes(layerType)) {\n            return 'radar';\n        } else if (Object.keys(this.noaaService.lightningLayers).includes(layerType)) {\n            return 'lightning';\n        } else {\n            return 'unknown';\n        }\n    }\n    \n    /**\n     * Quick setup for oil rig operations\n     */\n    async setupForRigOperations() {\n        console.log('üõ¢Ô∏è Setting up weather for oil rig operations...');\n        return await this.applyWeatherProfile('rigOperations', {\n            opacity: 0.7,\n            priorityOrder: true // Use priority order (safety first!)\n        });\n    }\n    \n    /**\n     * Quick setup for storm tracking\n     */\n    async setupForStormTracking() {\n        console.log('‚õàÔ∏è Setting up weather for storm tracking...');\n        return await this.applyWeatherProfile('stormTracking', {\n            opacity: 0.8, // More visible for storm monitoring\n            priorityOrder: true\n        });\n    }\n}\n\n// Export for use\nexport default WeatherSuiteManager;\n\n// Make available globally for console testing\nif (typeof window !== 'undefined') {\n    window.WeatherSuiteManager = WeatherSuiteManager;\n    window.weatherSuite = new WeatherSuiteManager();\n    \n    console.log('üå©Ô∏è Weather Suite Manager available at: window.weatherSuite');\n    console.log('üõ¢Ô∏è Setup for rig ops: window.weatherSuite.setupForRigOperations()');\n    console.log('‚õàÔ∏è Setup for storms: window.weatherSuite.setupForStormTracking()');\n}"],"names":["success"],"mappings":"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"}