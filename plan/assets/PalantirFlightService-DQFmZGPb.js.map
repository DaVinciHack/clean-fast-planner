{"version":3,"mappings":"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","names":["PalantirFlightService","client","sdk","key","minimalParams","result","error","errorJson","validationData","parseError","__vitePreload","n","flightData","cleanLocations","loc","displayWaypoints","wp","index","structuredWaypoints","params","cleanData","structuredWaypointsJson","obj","firstObject","id","formattedParams","message","detailedMessage"],"ignoreList":[],"sources":["../../src/components/fast-planner/services/PalantirFlightService.js"],"sourcesContent":["/**\n * PalantirFlightService.js\n * \n * Service for interacting with Palantir OSDK Flight API\n * This provides a clean interface for creating flights in Palantir from the Fast Planner\n */\nimport client from '../../../client';\n\nclass PalantirFlightService {\n  /**\n   * Check if the OSDK client is available and authenticated\n   * @returns {boolean} - True if OSDK client is available\n   */\n  static isClientAvailable() {\n    return !!client;\n  }\n  \n  /**\n   * Run a diagnostic test with minimal parameters to identify API issues\n   * @returns {Promise<boolean>} - True if the diagnostic succeeded\n   */\n  static async runDiagnostic() {\n    try {\n      console.log(\"Running API diagnostic with minimal parameters...\");\n      \n      // Import the SDK\n      const sdk = await this.getSDK();\n      \n      // Log available Actions\n      console.log(\"Available SDK Actions:\", Object.keys(sdk).filter(key => \n        typeof key === 'string' && key.toLowerCase().includes('flight')\n      ));\n      \n      // Try with absolute minimal parameters\n      const minimalParams = {\n        \"flightName\": \"Diagnostic Test Flight\",\n        \"aircraftRegion\": \"NORWAY\",\n        \"new_parameter\": \"Norway\",\n        \"aircraftId\": \"190\",\n        \"region\": \"NORWAY\",\n        \"etd\": new Date().toISOString(),\n        \"locations\": [\"ENZV\", \"ENLE\"]\n      };\n      \n      console.log(\"Diagnostic params:\", minimalParams);\n      \n      // Test the API call with returnEdits option\n      const result = await client(sdk.createNewFlightFp2).applyAction(\n        minimalParams,\n        { $returnEdits: true }\n      );\n      \n      console.log(\"Diagnostic successful with result:\", result);\n      return true;\n    } catch (error) {\n      console.error(\"Diagnostic failed:\", error);\n      \n      // Check if we have validation errors and log them clearly\n      if (error.message && error.message.includes('evaluatedConstraints')) {\n        try {\n          const errorJson = error.message.match(/\\{.*\\}/s);\n          if (errorJson) {\n            const validationData = JSON.parse(errorJson[0]);\n            console.log('Parameter validation errors:', validationData);\n          }\n        } catch (parseError) {\n          console.log('Could not parse validation errors:', parseError);\n        }\n      }\n      \n      return false;\n    }\n  }\n  \n  /**\n   * Import the SDK dynamically\n   * @returns {Object} - The SDK object\n   */\n  static async getSDK() {\n    try {\n      return await import('@flight-app/sdk');\n    } catch (error) {\n      console.error('Error importing SDK:', error);\n      throw new Error(`Failed to import SDK: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Create a new flight or update existing flight in Palantir\n   * Automatically chooses between createFlightWithWaypoints (new) or updateFastPlannerFlight (existing)\n   * @param {Object} flightData - The flight data\n   * @returns {Promise<Object>} - The result of the API call\n   */\n  static async createFlight(flightData) {\n    if (!this.isClientAvailable()) {\n      throw new Error('OSDK client not available. Try logging in again.');\n    }\n    \n    // Check if this is an update (existing flight with ID) or create (new flight)\n    const isUpdate = flightData.flightId && flightData.flightId.trim() !== '';\n    \n    if (isUpdate) {\n      console.log(`Updating existing flight with ID: ${flightData.flightId}`);\n      return await this.updateFlight(flightData);\n    } else {\n      console.log('Creating new flight');\n      return await this.createNewFlight(flightData);\n    }\n  }\n  \n  /**\n   * Create a new flight in Palantir using createFlightWithWaypoints\n   * @param {Object} flightData - The flight data\n   * @returns {Promise<Object>} - The result of the API call\n   */\n  static async createNewFlight(flightData) {\n    if (!this.isClientAvailable()) {\n      throw new Error('OSDK client not available. Try logging in again.');\n    }\n    \n    // Clean up the locations to ensure no leading/trailing spaces\n    let cleanLocations = [];\n    if (flightData.locations && Array.isArray(flightData.locations)) {\n      cleanLocations = flightData.locations.map(loc => typeof loc === 'string' ? loc.trim() : loc);\n    } else {\n      cleanLocations = [\"ENZV\", \"ENLE\"]; // Default locations\n    }\n    \n    // Import the SDK\n    const sdk = await this.getSDK();\n    \n    try {\n      // Check if we should use the new createFlightWithWaypoints function\n      if (sdk.createFlightWithWaypoints) {\n        console.log('Using new createFlightWithWaypoints function');\n        \n        // Format waypoints with type information - distinguish stops from navigation waypoints\n        let displayWaypoints = null;\n        \n        if (flightData.waypoints && Array.isArray(flightData.waypoints)) {\n          console.log('=== PALANTIR SERVICE WAYPOINT DEBUG ===');\n          console.log('Raw waypoints received:', flightData.waypoints.length);\n          flightData.waypoints.forEach((wp, index) => {\n            console.log(`Waypoint ${index}:`, {\n              name: wp.name,\n              type: wp.type,\n              pointType: wp.pointType,\n              isWaypoint: wp.isWaypoint\n            });\n          });\n          \n          // CRITICAL FIX: If all waypoints have undefined classification properties,\n          // this means Fast Planner is sending stops as waypoints, not actual navigation waypoints\n          const hasActualWaypoints = flightData.waypoints.some(wp => \n            wp.pointType === 'NAVIGATION_WAYPOINT' || \n            wp.isWaypoint === true || \n            wp.type === 'WAYPOINT'\n          );\n          \n          if (!hasActualWaypoints) {\n            console.log('No actual navigation waypoints found - all waypoints have undefined classification. Setting displayWaypoints to null.');\n            displayWaypoints = null;\n          } else {\n            console.log('Found actual navigation waypoints, processing them...');\n            \n            // Create structured waypoints with leg index and waypoint type information\n            const structuredWaypoints = flightData.waypoints\n              .filter(wp => {\n                // Use the same classification logic as WaypointManager.js\n                // 1. First check the explicit point type (most reliable)\n                if (wp.pointType === 'NAVIGATION_WAYPOINT') return true;\n                if (wp.pointType === 'LANDING_STOP') return false;\n                \n                // 2. Check the isWaypoint boolean flag\n                if (typeof wp.isWaypoint === 'boolean') return wp.isWaypoint;\n                \n                // 3. Check the type string (older method)\n                if (wp.type === 'WAYPOINT') return true; // Note: uppercase WAYPOINT\n                if (wp.type === 'STOP') return false;\n                \n                // 4. Don't default to true anymore - only include properly classified waypoints\n                return false;\n              })\n              .map((wp, index) => ({\n                legIndex: wp.legIndex || 0,\n                waypoint: wp.name || wp.id\n              }));\n              \n            // Convert to JSON string if we have waypoints\n            if (structuredWaypoints.length > 0) {\n              displayWaypoints = JSON.stringify(structuredWaypoints);\n            }\n          }\n        }\n        \n        // Prepare the parameters for createFlightWithWaypoints\n        const params = {\n          \"flightName\": flightData.flightName || \"Fast Planner Flight\",\n          \"locations\": cleanLocations,\n          \"displayWaypoints\": displayWaypoints,  // Send structured waypoint information\n          \"useOnlyProvidedWaypoints\": flightData.useOnlyProvidedWaypoints ?? false,  // 🔧 FIX: Respect Auto Plan setting for weather replanning\n          \"aircraftId\": flightData.aircraftId || \"190\",\n          \"region\": flightData.region || \"NORWAY\"\n        };\n        \n        // Add crew members if provided\n        if (flightData.captainId) params.captainId = flightData.captainId;\n        if (flightData.copilotId) params.copilotId = flightData.copilotId;\n        if (flightData.medicId) params.medicId = flightData.medicId;\n        if (flightData.soId) params.soId = flightData.soId;\n        if (flightData.rswId) params.rswId = flightData.rswId;\n        \n        console.log('Creating flight with structured waypoints:', JSON.stringify(params, null, 2));\n        \n        // Call the API\n        const result = await client(sdk.createFlightWithWaypoints).applyAction(\n          params,\n          { $returnEdits: true }\n        );\n        \n        console.log('Flight creation with structured waypoints successful!', result);\n        return result;\n      } else {\n        // Fall back to the old createNewFlightFp2 if the new function is not available\n        console.log('New createFlightWithWaypoints function not available, falling back to createNewFlightFp2');\n        \n        // Use a greatly simplified approach that matches the working ApiTester\n        const cleanData = {\n          flightName: flightData.flightName || \"Test Flight\",\n          aircraftRegion: \"NORWAY\",\n          new_parameter: \"Norway\",\n          aircraftId: flightData.aircraftId || \"190\",\n          region: \"NORWAY\",\n          etd: flightData.etd || new Date().toISOString(),\n          locations: cleanLocations,\n          alternateLocation: flightData.alternateLocation || \"\",\n          // Only include crew if provided\n          ...(flightData.captainId ? { captainId: flightData.captainId } : {}),\n          ...(flightData.copilotId ? { copilotId: flightData.copilotId } : {})\n        };\n        \n        // Log the clean data \n        console.log('Flight data structure being sent to API:', JSON.stringify(cleanData, null, 2));\n        \n        // Check if the createNewFlightFp2 action exists\n        if (!sdk.createNewFlightFp2) {\n          console.error('createNewFlightFp2 action not found in SDK');\n          console.log('Available SDK actions:', Object.keys(sdk));\n          throw new Error('createNewFlightFp2 action not found in SDK');\n        }\n        \n        // Format the parameters\n        const params = this.formatFlightParams(cleanData);\n        \n        console.log('Calling createNewFlightFp2 with params:', params);\n        \n        // Make the API call with the exact format from the documentation\n        const result = await client(sdk.createNewFlightFp2).applyAction(\n          params,\n          { $returnEdits: true }\n        );\n        \n        console.log('Flight creation successful!', result);\n        return result;\n      }\n    } catch (error) {\n      console.error('Error creating flight:', error);\n      \n      // Log the full error for debugging\n      console.error('Error details:', error);\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Update an existing flight in Palantir using the new updateFastPlannerFlight function\n   * @param {Object} flightData - The flight data including the flightId\n   * @returns {Promise<Object>} - The result of the API call\n   */\n  static async updateFlight(flightData) {\n    if (!this.isClientAvailable()) {\n      throw new Error('OSDK client not available. Try logging in again.');\n    }\n    \n    if (!flightData.flightId) {\n      throw new Error('Flight ID is required for updating a flight');\n    }\n    \n    // Import the SDK\n    const sdk = await this.getSDK();\n    \n    try {\n      // Check if we should use the new updateFastPlannerFlight function\n      if (sdk.updateFastPlannerFlight) {\n        console.log('Using new updateFastPlannerFlight function');\n        \n        // Format structured waypoints if available\n        let structuredWaypointsJson = null;\n        \n        if (flightData.waypoints && Array.isArray(flightData.waypoints)) {\n          // Convert waypoints to structured format and stringify\n          const structuredWaypoints = flightData.waypoints\n            .filter(wp => {\n              // Use the same classification logic as create\n              if (wp.pointType === 'NAVIGATION_WAYPOINT') return true;\n              if (wp.pointType === 'LANDING_STOP') return false;\n              if (typeof wp.isWaypoint === 'boolean') return wp.isWaypoint;\n              if (wp.type === 'WAYPOINT') return true;\n              if (wp.type === 'STOP') return false;\n              return true;\n            })\n            .map(wp => ({\n              legIndex: wp.legIndex || 0,\n              waypoint: wp.name || wp.id\n            }));\n            \n          // Convert to JSON string if we have waypoints\n          if (structuredWaypoints.length > 0) {\n            structuredWaypointsJson = JSON.stringify(structuredWaypoints);\n          }\n        }\n        \n        // Clean up the locations\n        let cleanLocations = [];\n        if (flightData.locations && Array.isArray(flightData.locations)) {\n          cleanLocations = flightData.locations.map(loc => typeof loc === 'string' ? loc.trim() : loc);\n        }\n        \n        // Prepare the parameters for updateFastPlannerFlight\n        const params = {\n          \"flightId\": flightData.flightId,\n          \"flightName\": flightData.flightName,\n          \"locations\": cleanLocations,\n          \"structuredWaypoints\": structuredWaypointsJson,\n          \"useOnlyProvidedWaypoints\": true,\n          \"region\": flightData.region || flightData.aircraftRegion || \"NORWAY\",\n          \"aircraftRegion\": flightData.aircraftRegion || flightData.region || \"NORWAY\", \n          \"etd\": flightData.etd || new Date().toISOString()\n        };\n        \n        // Add optional parameters if provided\n        if (flightData.aircraftId) params.aircraftId = flightData.aircraftId;\n        if (flightData.alternateLocation) params.alternateLocation = flightData.alternateLocation;\n        if (flightData.captainId) params.captainId = flightData.captainId;\n        if (flightData.copilotId) params.copilotId = flightData.copilotId;\n        if (flightData.medicId) params.medicId = flightData.medicId;\n        if (flightData.soId) params.soId = flightData.soId;\n        if (flightData.rswId) params.rswId = flightData.rswId;\n        \n        // Add any additional parameters\n        if (flightData.fuelPlanId) params.fuelPlanId = flightData.fuelPlanId;\n        if (flightData.timingId) params.timingId = flightData.timingId;\n        if (flightData.weightBalanceId) params.weightBalanceId = flightData.weightBalanceId;\n        if (flightData.policyUuid) params.policyUuid = flightData.policyUuid;\n        \n        console.log('Updating flight with parameters:', JSON.stringify(params, null, 2));\n        \n        // Call the API\n        const result = await client(sdk.updateFastPlannerFlight).applyAction(\n          params,\n          { $returnEdits: true }\n        );\n        \n        console.log('Flight update successful!', result);\n        return result;\n      } else {\n        // Fall back to the old editExistingFlightFp2 if available\n        console.log('New updateFastPlannerFlight function not available, falling back to editExistingFlightFp2');\n        \n        if (!sdk.editExistingFlightFp2) {\n          throw new Error('Neither updateFastPlannerFlight nor editExistingFlightFp2 are available');\n        }\n        \n        // Use a greatly simplified approach that matches the working ApiTester\n        const cleanData = {\n          flightId: flightData.flightId,\n          flightName: flightData.flightName,\n          aircraftRegion: \"NORWAY\",\n          aircraftId: flightData.aircraftId,\n          region: \"NORWAY\",\n          etd: flightData.etd || new Date().toISOString(),\n          locations: flightData.locations || [\"ENZV\", \"ENLE\"],\n          alternateLocation: flightData.alternateLocation || \"\"\n        };\n        \n        // Only include crew if provided\n        if (flightData.captainId) cleanData.captainId = flightData.captainId;\n        if (flightData.copilotId) cleanData.copilotId = flightData.copilotId;\n        \n        // Log the clean data \n        console.log('Flight update data structure:', JSON.stringify(cleanData, null, 2));\n        \n        // Make the API call\n        const result = await client(sdk.editExistingFlightFp2).applyAction(\n          cleanData,\n          { $returnEdits: true }\n        );\n        \n        console.log('Flight update successful!', result);\n        return result;\n      }\n    } catch (error) {\n      console.error('Error updating flight:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Extract an ID from an API result\n   * @param {Object} result - The API result\n   * @returns {string} - The extracted ID or 'Unknown ID'\n   */\n  static extractFlightId(result) {\n    // Log the entire result structure for debugging\n    console.log('Extracting flight ID from result:', result);\n    \n    // Based on the working example in ApiTester, check for addedObjects first\n    if (result && result.addedObjects && Array.isArray(result.addedObjects)) {\n      for (const obj of result.addedObjects) {\n        if (obj.objectType === 'MainFlightObjectFp2' && obj.primaryKey) {\n          console.log('Found flight ID in addedObjects:', obj.primaryKey);\n          return obj.primaryKey;\n        }\n      }\n    }\n    \n    // Fall back to other methods if addedObjects doesn't contain the ID\n    if (result) {\n      // If the result has an editedObjectTypes property\n      if (result.editedObjectTypes && result.editedObjectTypes.length > 0) {\n        const firstObject = result.editedObjectTypes[0];\n        // Return the ID if it exists\n        if (firstObject && firstObject.id) {\n          console.log('Found flight ID in editedObjectTypes:', firstObject.id);\n          return firstObject.id;\n        }\n      }\n      \n      // If the result has a type of 'edits' and an updatedObject property\n      if (result.type === 'edits' && result.updatedObject) {\n        const id = result.updatedObject.id || 'Unknown ID';\n        console.log('Found flight ID in updatedObject:', id);\n        return id;\n      }\n      \n      // If the result has an id property directly\n      if (result.id) {\n        console.log('Found flight ID directly in result:', result.id);\n        return result.id;\n      }\n    }\n    \n    console.warn('Could not find flight ID in result. Using \"Unknown ID\"');\n    return 'Unknown ID';\n  }\n  \n  /**\n   * Check if a result is successful\n   * @param {Object} result - The API result\n   * @returns {boolean} - True if the result is successful\n   */\n  static isSuccessfulResult(result) {\n    if (!result) return false;\n    \n    // Based on the API documentation, the result should have one of these structures\n    return (\n      // Check for the format shown in the API documentation screenshot\n      (result.type === 'edits') || \n      \n      // Check for editedObjectTypes property\n      (result.editedObjectTypes && result.editedObjectTypes.length > 0) ||\n      \n      // Check for updatedObject property\n      (result.updatedObject) ||\n      \n      // Check for id property directly\n      (result.id)\n    );\n  }\n  \n  /**\n   * Format flight parameters for the API\n   * @param {Object} params - Flight parameters\n   * @returns {Object} - Formatted parameters for the API exactly as specified in the documentation\n   */\n  static formatFlightParams(params) {\n    // Based on actual implementation, use simple string for aircraftId\n    const formattedParams = {\n      \"flightName\": params.flightName || \"Test Flight\",\n      \"aircraftRegion\": \"NORWAY\",\n      \"new_parameter\": \"Norway\",\n      \"aircraftId\": params.aircraftId || \"190\", // Use the numeric ID as fallback\n      \"region\": \"NORWAY\",\n      \"etd\": params.etd || new Date().toISOString(),\n      \"locations\": Array.isArray(params.locations) ? params.locations : [\"ENZV\", \"ENLE\"],\n      \"alternateLocation\": params.alternateLocation || \"\"\n    };\n    \n    // Add crew members only if provided\n    if (params.captainId) {\n      formattedParams.captainId = params.captainId; // Simple string, no $primaryKey\n    }\n    \n    if (params.copilotId) {\n      formattedParams.copilotId = params.copilotId; // Simple string, no $primaryKey\n    }\n    \n    if (params.medicId) {\n      formattedParams.medicId = params.medicId; // Simple string, no $primaryKey\n    }\n    \n    if (params.soId) {\n      formattedParams.soId = params.soId; // Simple string, no $primaryKey\n    }\n    \n    if (params.rswId) {\n      formattedParams.rswId = params.rswId; // Simple string, no $primaryKey\n    }\n    \n    console.log('Formatted flight parameters:', formattedParams);\n    return formattedParams;\n  }\n  \n  /**\n   * Format error message for the user\n   * @param {Error} error - The error object\n   * @returns {string} - A user-friendly error message\n   */\n  static formatErrorMessage(error) {\n    if (!error) return 'Unknown error occurred';\n    \n    // Log the full error for debugging\n    console.error('Full error details:', error);\n    \n    // Extract useful information from the error\n    const message = error.message || '';\n    \n    // Check for specific error patterns based on the Palantir API\n    if (message.includes('401') || message.includes('unauthorized')) {\n      return 'Authentication error: You need to log in again to save flights';\n    }\n    \n    if (message.includes('404') || message.includes('not found')) {\n      return 'API endpoint not found: The required action may not be available';\n    }\n    \n    if (message.includes('400') || message.includes('Bad Request')) {\n      // For 400 errors, try to extract more details to help diagnose parameter formatting issues\n      let detailedMessage = 'API request error (400): The server rejected the flight data.';\n      \n      // Try to extract parameter-specific errors if they exist\n      if (error.response && error.response.data) {\n        detailedMessage += ' Details: ' + JSON.stringify(error.response.data);\n      }\n      \n      // Provide guidance for common issues\n      detailedMessage += ' Please check that all required fields are correctly formatted, especially IDs and dates.';\n      \n      return detailedMessage;\n    }\n    \n    if (message.includes('timeout') || message.includes('aborted')) {\n      return 'Connection timeout: The server took too long to respond';\n    }\n    \n    if (message.includes('network') || message.includes('offline')) {\n      return 'Network error: Check your internet connection';\n    }\n    \n    if (message.includes('TypeError') && message.includes('is not a function')) {\n      return 'API function error: The required action may not be available or has changed. Check the Palantir API documentation.';\n    }\n    \n    if (message.includes('bristol') || message.includes('foundry')) {\n      return 'API connection error: Unable to connect to the Palantir Foundry service. Please verify your authentication.';\n    }\n    \n    // Special message for missing SDK\n    if (message.includes('import') || message.includes('module')) {\n      return 'SDK import error: Unable to load the @flight-app/sdk module. Please check that it is correctly installed.';\n    }\n    \n    // Default error message with more detail\n    return `Error creating flight: ${message} (Check browser console for more details)`;\n  }\n}\n\nexport default PalantirFlightService;"],"file":"assets/PalantirFlightService-DQFmZGPb.js"}