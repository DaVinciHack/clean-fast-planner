class d{constructor(t,e){this.map=t,this.controls=e,this.isFlying=!1,this.isPaused=!1,this.currentWaypointIndex=0,this.flightProgress=0,this.animationFrame=null,this.config={speedMultiplier:5,cruiseAltitude:3e3,climbRate:500,turnRate:2,groundSpeed:120,frameRate:60},this.route={waypoints:[],totalDistance:0,estimatedTime:0,currentPosition:null,currentAltitude:0,currentHeading:0},this.state={phase:"PREFLIGHT",startTime:null,elapsedTime:0,simulatedTime:0,fuelRemaining:100},console.log("üõ©Ô∏è AutoFlight Manager initialized - Ready for automatic flight simulation!")}loadRoute(t){return!t||t.length<2?(console.error("‚ùå Need at least 2 waypoints for flight route"),!1):(this.route.waypoints=t.map((e,i)=>({lat:e.lat||e.latitude,lng:e.lng||e.longitude||e.lon,name:e.name||`WP${i+1}`,altitude:e.altitude||this.config.cruiseAltitude,index:i})),this.calculateRouteMetrics(),this.route.currentPosition={...this.route.waypoints[0]},this.route.currentAltitude=this.route.waypoints[0].altitude,this.currentWaypointIndex=0,this.flightProgress=0,console.log(`üõ©Ô∏è Route loaded: ${this.route.waypoints.length} waypoints, ${this.route.totalDistance.toFixed(1)}NM, ~${this.route.estimatedTime.toFixed(0)} minutes`),this.createFlightPanel(),!0)}calculateRouteMetrics(){this.route.totalDistance=0;for(let t=0;t<this.route.waypoints.length-1;t++){const e=this.route.waypoints[t],i=this.route.waypoints[t+1],n=this.calculateDistance(e.lat,e.lng,i.lat,i.lng);this.route.totalDistance+=n}this.route.estimatedTime=this.route.totalDistance/this.config.groundSpeed*60}startFlight(){return this.route.waypoints.length?this.isFlying?(console.warn("‚ö†Ô∏è Flight already in progress"),!1):(this.isFlying=!0,this.isPaused=!1,this.state.phase="TAKEOFF",this.state.startTime=Date.now(),this.currentWaypointIndex=0,this.flightProgress=0,this.map.easeTo({center:[this.route.waypoints[0].lng,this.route.waypoints[0].lat],zoom:12,pitch:45,bearing:this.calculateInitialHeading(),duration:2e3}),setTimeout(()=>{this.startFlightAnimation()},2500),console.log("üõ´ Flight started! Automatic navigation engaged."),this.updateFlightPanel(),!0):(console.error("‚ùå No route loaded for flight"),!1)}togglePause(){this.isPaused=!this.isPaused,console.log(`${this.isPaused?"‚è∏Ô∏è Flight paused":"‚ñ∂Ô∏è Flight resumed"}`),this.updateFlightPanel()}stopFlight(){this.isFlying=!1,this.isPaused=!1,this.animationFrame&&(cancelAnimationFrame(this.animationFrame),this.animationFrame=null),this.state.phase="LANDED",console.log("üõ¨ Flight stopped"),this.updateFlightPanel()}startFlightAnimation(){const t=()=>{this.isFlying&&(this.isPaused||(this.updateFlightPosition(),this.updateCamera(),this.updateFlightState()),this.updateFlightPanel(),this.animationFrame=requestAnimationFrame(t))};t()}updateFlightPosition(){const t=1e3/this.config.frameRate*this.config.speedMultiplier;if(this.currentWaypointIndex>=this.route.waypoints.length-1){this.completeFlight();return}const e=this.route.waypoints[this.currentWaypointIndex],i=this.route.waypoints[this.currentWaypointIndex+1],n=this.calculateDistance(e.lat,e.lng,i.lat,i.lng),s=this.config.groundSpeed/(60*60*1e3)*t/n;if(this.flightProgress+=s,this.flightProgress>=1)this.currentWaypointIndex++,this.flightProgress=0,this.currentWaypointIndex<this.route.waypoints.length&&console.log(`üìç Reached waypoint: ${this.route.waypoints[this.currentWaypointIndex].name}`);else{const l=this.lerp(e.lat,i.lat,this.flightProgress),h=this.lerp(e.lng,i.lng,this.flightProgress),u=this.lerp(e.altitude,i.altitude,this.flightProgress);this.route.currentPosition={lat:l,lng:h},this.route.currentAltitude=u,this.route.currentHeading=this.calculateBearing(e.lat,e.lng,i.lat,i.lng)}this.state.elapsedTime=(Date.now()-this.state.startTime)/1e3,this.state.simulatedTime=this.state.elapsedTime*this.config.speedMultiplier;const r=this.route.estimatedTime*60;this.state.fuelRemaining=Math.max(0,100-this.state.simulatedTime/r*100)}updateCamera(){if(!this.route.currentPosition)return;const t=this.altitudeToZoom(this.route.currentAltitude+2e3);this.map.easeTo({center:[this.route.currentPosition.lng,this.route.currentPosition.lat],zoom:t,bearing:this.route.currentHeading,pitch:60,duration:100}),window.threeDCloudManager&&window.threeDCloudManager.isActive&&(window.threeDCloudManager.cameraAltitude=this.route.currentAltitude,window.threeDCloudManager.updateCloudOpacity())}updateFlightState(){const t=(this.currentWaypointIndex+this.flightProgress)/(this.route.waypoints.length-1)*100;t<5?this.state.phase="TAKEOFF":t<95?this.state.phase="CRUISE":this.state.phase="APPROACH"}completeFlight(){this.isFlying=!1,this.state.phase="LANDED";const t=this.route.waypoints[this.route.waypoints.length-1];this.map.easeTo({center:[t.lng,t.lat],zoom:14,pitch:30,bearing:0,duration:3e3}),console.log("üõ¨ Flight completed! Welcome to your destination."),this.updateFlightPanel()}createFlightPanel(){if(document.getElementById("auto-flight-panel"))return;const t=document.createElement("div");t.id="auto-flight-panel",t.style.cssText=`
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 15px;
            border-radius: 8px;
            font-family: monospace;
            font-size: 12px;
            z-index: 1000;
            border: 1px solid rgba(0, 150, 255, 0.5);
            min-width: 280px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
        `,t.innerHTML=`
            <div style="font-weight: bold; margin-bottom: 8px; color: #00aaff;">‚úàÔ∏è Auto Flight Control</div>
            <div id="flight-info">
                <div>Phase: <span id="flight-phase">PREFLIGHT</span></div>
                <div>Waypoint: <span id="current-waypoint">-</span></div>
                <div>Position: <span id="current-position">-</span></div>
                <div>Altitude: <span id="current-altitude">0ft</span></div>
                <div>Heading: <span id="current-heading">0¬∞</span></div>
                <div>Speed: <span id="flight-speed">${this.config.groundSpeed}kt</span></div>
                <div>Fuel: <span id="fuel-remaining">100%</span></div>
                <div>Time: <span id="flight-time">00:00</span></div>
            </div>
            <div style="margin-top: 10px;">
                <button id="start-flight-btn" style="margin-right: 5px; padding: 4px 8px; background: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer;">üõ´ Start</button>
                <button id="pause-flight-btn" style="margin-right: 5px; padding: 4px 8px; background: #FF9800; color: white; border: none; border-radius: 3px; cursor: pointer;">‚è∏Ô∏è Pause</button>
                <button id="stop-flight-btn" style="margin-right: 5px; padding: 4px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer;">üõë Stop</button>
            </div>
            <div style="margin-top: 8px;">
                <label>Speed: </label>
                <input type="range" id="speed-slider" min="1" max="50" value="${this.config.speedMultiplier}" 
                       style="width: 100px; margin: 0 5px;"> 
                <span id="speed-value">${this.config.speedMultiplier}x</span>
            </div>
        `,document.body.appendChild(t),document.getElementById("start-flight-btn").onclick=()=>this.startFlight(),document.getElementById("pause-flight-btn").onclick=()=>this.togglePause(),document.getElementById("stop-flight-btn").onclick=()=>this.stopFlight();const e=document.getElementById("speed-slider");e.oninput=i=>{this.config.speedMultiplier=parseInt(i.target.value),document.getElementById("speed-value").textContent=`${this.config.speedMultiplier}x`}}updateFlightPanel(){const t=document.getElementById("flight-phase"),e=document.getElementById("current-waypoint"),i=document.getElementById("current-position"),n=document.getElementById("current-altitude"),o=document.getElementById("current-heading"),a=document.getElementById("fuel-remaining"),s=document.getElementById("flight-time");if(t&&(t.textContent=this.state.phase),e&&this.currentWaypointIndex<this.route.waypoints.length&&(e.textContent=`${this.currentWaypointIndex+1}/${this.route.waypoints.length} - ${this.route.waypoints[this.currentWaypointIndex].name}`),i&&this.route.currentPosition&&(i.textContent=`${this.route.currentPosition.lat.toFixed(4)}, ${this.route.currentPosition.lng.toFixed(4)}`),n&&(n.textContent=`${Math.round(this.route.currentAltitude)}ft`),o&&(o.textContent=`${Math.round(this.route.currentHeading)}¬∞`),a&&(a.textContent=`${Math.round(this.state.fuelRemaining)}%`),s){const r=Math.floor(this.state.simulatedTime/60),l=Math.floor(this.state.simulatedTime%60);s.textContent=`${r.toString().padStart(2,"0")}:${l.toString().padStart(2,"0")}`}}calculateDistance(t,e,i,n){const a=(i-t)*Math.PI/180,s=(n-e)*Math.PI/180,r=Math.sin(a/2)*Math.sin(a/2)+Math.cos(t*Math.PI/180)*Math.cos(i*Math.PI/180)*Math.sin(s/2)*Math.sin(s/2);return 3440.065*(2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)))}calculateBearing(t,e,i,n){const o=(n-e)*Math.PI/180,a=Math.sin(o)*Math.cos(i*Math.PI/180),s=Math.cos(t*Math.PI/180)*Math.sin(i*Math.PI/180)-Math.sin(t*Math.PI/180)*Math.cos(i*Math.PI/180)*Math.cos(o);return(Math.atan2(a,s)*180/Math.PI+360)%360}calculateInitialHeading(){return this.route.waypoints.length<2?0:this.calculateBearing(this.route.waypoints[0].lat,this.route.waypoints[0].lng,this.route.waypoints[1].lat,this.route.waypoints[1].lng)}altitudeToZoom(t){return Math.max(8,Math.min(16,18-Math.log2(t/1e3)))}lerp(t,e,i){return t+(e-t)*i}removeFlightPanel(){const t=document.getElementById("auto-flight-panel");t&&t.remove()}destroy(){this.stopFlight(),this.removeFlightPanel()}}typeof window<"u"&&(window.AutoFlightManager=d,console.log("üõ©Ô∏è AutoFlight Manager available at: window.AutoFlightManager"));export{d as default};
//# sourceMappingURL=AutoFlightManager-IxOXAzzj.js.map
