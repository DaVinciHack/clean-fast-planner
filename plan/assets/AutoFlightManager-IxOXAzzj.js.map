{"version":3,"file":"AutoFlightManager-IxOXAzzj.js","sources":["../../src/components/fast-planner/modules/weather/AutoFlightManager.js"],"sourcesContent":["/**\n * AutoFlightManager.js\n * \n * REVOLUTIONARY Automatic Flight Simulation System\n * Flies your planned route automatically with realistic movements,\n * altitude changes, weather avoidance, and time-lapse effects\n */\n\nclass AutoFlightManager {\n    constructor(mapInstance, enhanced3DControls) {\n        this.map = mapInstance;\n        this.controls = enhanced3DControls;\n        this.isFlying = false;\n        this.isPaused = false;\n        this.currentWaypointIndex = 0;\n        this.flightProgress = 0; // 0-1 between current waypoints\n        this.animationFrame = null;\n        \n        // Flight configuration\n        this.config = {\n            speedMultiplier: 5,     // 1x to 50x speed\n            cruiseAltitude: 3000,   // Default cruise altitude (feet)\n            climbRate: 500,         // Feet per minute climb\n            turnRate: 2,            // Degrees per second turn rate\n            groundSpeed: 120,       // Knots ground speed\n            frameRate: 60          // Animation frames per second\n        };\n        \n        // Flight data\n        this.route = {\n            waypoints: [],          // [{ lat, lng, name, altitude? }]\n            totalDistance: 0,       // Nautical miles\n            estimatedTime: 0,       // Minutes\n            currentPosition: null,  // Current lat/lng\n            currentAltitude: 0,     // Current altitude\n            currentHeading: 0       // Current magnetic heading\n        };\n        \n        // Flight state\n        this.state = {\n            phase: 'PREFLIGHT',     // PREFLIGHT, TAXI, TAKEOFF, CRUISE, APPROACH, LANDED\n            startTime: null,\n            elapsedTime: 0,         // Real elapsed seconds\n            simulatedTime: 0,       // Simulated flight time\n            fuelRemaining: 100      // Percentage\n        };\n        \n        console.log('üõ©Ô∏è AutoFlight Manager initialized - Ready for automatic flight simulation!');\n    }\n    \n    /**\n     * Load flight route from waypoints\n     * @param {Array} waypoints - Array of waypoint objects\n     */\n    loadRoute(waypoints) {\n        if (!waypoints || waypoints.length < 2) {\n            console.error('‚ùå Need at least 2 waypoints for flight route');\n            return false;\n        }\n        \n        this.route.waypoints = waypoints.map((wp, index) => ({\n            lat: wp.lat || wp.latitude,\n            lng: wp.lng || wp.longitude || wp.lon,\n            name: wp.name || `WP${index + 1}`,\n            altitude: wp.altitude || this.config.cruiseAltitude,\n            index: index\n        }));\n        \n        // Calculate total distance and flight time\n        this.calculateRouteMetrics();\n        \n        // Set starting position\n        this.route.currentPosition = { ...this.route.waypoints[0] };\n        this.route.currentAltitude = this.route.waypoints[0].altitude;\n        this.currentWaypointIndex = 0;\n        this.flightProgress = 0;\n        \n        console.log(`üõ©Ô∏è Route loaded: ${this.route.waypoints.length} waypoints, ${this.route.totalDistance.toFixed(1)}NM, ~${this.route.estimatedTime.toFixed(0)} minutes`);\n        \n        this.createFlightPanel();\n        return true;\n    }\n    \n    /**\n     * Calculate route distance and estimated flight time\n     */\n    calculateRouteMetrics() {\n        this.route.totalDistance = 0;\n        \n        for (let i = 0; i < this.route.waypoints.length - 1; i++) {\n            const from = this.route.waypoints[i];\n            const to = this.route.waypoints[i + 1];\n            const distance = this.calculateDistance(from.lat, from.lng, to.lat, to.lng);\n            this.route.totalDistance += distance;\n        }\n        \n        // Estimate flight time (distance / ground speed * 60 for minutes)\n        this.route.estimatedTime = (this.route.totalDistance / this.config.groundSpeed) * 60;\n    }\n    \n    /**\n     * Start automatic flight simulation\n     */\n    startFlight() {\n        if (!this.route.waypoints.length) {\n            console.error('‚ùå No route loaded for flight');\n            return false;\n        }\n        \n        if (this.isFlying) {\n            console.warn('‚ö†Ô∏è Flight already in progress');\n            return false;\n        }\n        \n        this.isFlying = true;\n        this.isPaused = false;\n        this.state.phase = 'TAKEOFF';\n        this.state.startTime = Date.now();\n        this.currentWaypointIndex = 0;\n        this.flightProgress = 0;\n        \n        // Move camera to departure position\n        this.map.easeTo({\n            center: [this.route.waypoints[0].lng, this.route.waypoints[0].lat],\n            zoom: 12,\n            pitch: 45,\n            bearing: this.calculateInitialHeading(),\n            duration: 2000\n        });\n        \n        // Start flight animation\n        setTimeout(() => {\n            this.startFlightAnimation();\n        }, 2500);\n        \n        console.log('üõ´ Flight started! Automatic navigation engaged.');\n        this.updateFlightPanel();\n        \n        return true;\n    }\n    \n    /**\n     * Pause/resume flight\n     */\n    togglePause() {\n        this.isPaused = !this.isPaused;\n        console.log(`${this.isPaused ? '‚è∏Ô∏è Flight paused' : '‚ñ∂Ô∏è Flight resumed'}`);\n        this.updateFlightPanel();\n    }\n    \n    /**\n     * Stop flight and return to normal view\n     */\n    stopFlight() {\n        this.isFlying = false;\n        this.isPaused = false;\n        \n        if (this.animationFrame) {\n            cancelAnimationFrame(this.animationFrame);\n            this.animationFrame = null;\n        }\n        \n        this.state.phase = 'LANDED';\n        console.log('üõ¨ Flight stopped');\n        this.updateFlightPanel();\n    }\n    \n    /**\n     * Main flight animation loop\n     */\n    startFlightAnimation() {\n        const animate = () => {\n            if (!this.isFlying) return;\n            \n            if (!this.isPaused) {\n                this.updateFlightPosition();\n                this.updateCamera();\n                this.updateFlightState();\n            }\n            \n            this.updateFlightPanel();\n            this.animationFrame = requestAnimationFrame(animate);\n        };\n        \n        animate();\n    }\n    \n    /**\n     * Update aircraft position along route\n     */\n    updateFlightPosition() {\n        const deltaTime = (1000 / this.config.frameRate) * this.config.speedMultiplier;\n        \n        // Check if we've reached the destination\n        if (this.currentWaypointIndex >= this.route.waypoints.length - 1) {\n            this.completeFlight();\n            return;\n        }\n        \n        const currentWP = this.route.waypoints[this.currentWaypointIndex];\n        const nextWP = this.route.waypoints[this.currentWaypointIndex + 1];\n        \n        // Calculate distance between current waypoints\n        const segmentDistance = this.calculateDistance(currentWP.lat, currentWP.lng, nextWP.lat, nextWP.lng);\n        \n        // Calculate how far we should move this frame (in nautical miles)\n        const speedNMPerMs = this.config.groundSpeed / (60 * 60 * 1000); // NM per millisecond\n        const distanceThisFrame = speedNMPerMs * deltaTime;\n        const progressThisFrame = distanceThisFrame / segmentDistance;\n        \n        // Update progress along current segment\n        this.flightProgress += progressThisFrame;\n        \n        if (this.flightProgress >= 1.0) {\n            // Reached next waypoint\n            this.currentWaypointIndex++;\n            this.flightProgress = 0;\n            \n            if (this.currentWaypointIndex < this.route.waypoints.length) {\n                console.log(`üìç Reached waypoint: ${this.route.waypoints[this.currentWaypointIndex].name}`);\n            }\n        } else {\n            // Interpolate position between waypoints\n            const lat = this.lerp(currentWP.lat, nextWP.lat, this.flightProgress);\n            const lng = this.lerp(currentWP.lng, nextWP.lng, this.flightProgress);\n            const altitude = this.lerp(currentWP.altitude, nextWP.altitude, this.flightProgress);\n            \n            this.route.currentPosition = { lat, lng };\n            this.route.currentAltitude = altitude;\n            \n            // Calculate current heading\n            this.route.currentHeading = this.calculateBearing(currentWP.lat, currentWP.lng, nextWP.lat, nextWP.lng);\n        }\n        \n        // Update simulated time\n        this.state.elapsedTime = (Date.now() - this.state.startTime) / 1000;\n        this.state.simulatedTime = this.state.elapsedTime * this.config.speedMultiplier;\n        \n        // Update fuel (simple linear consumption)\n        const totalFlightTime = this.route.estimatedTime * 60; // seconds\n        this.state.fuelRemaining = Math.max(0, 100 - (this.state.simulatedTime / totalFlightTime) * 100);\n    }\n    \n    /**\n     * Update camera to follow aircraft\n     */\n    updateCamera() {\n        if (!this.route.currentPosition) return;\n        \n        // Calculate camera altitude based on flight altitude + offset\n        const cameraZoom = this.altitudeToZoom(this.route.currentAltitude + 2000);\n        \n        // Smooth camera following\n        this.map.easeTo({\n            center: [this.route.currentPosition.lng, this.route.currentPosition.lat],\n            zoom: cameraZoom,\n            bearing: this.route.currentHeading,\n            pitch: 60, // Good angle for following flight\n            duration: 100 // Smooth but responsive\n        });\n        \n        // Update 3D cloud effects if active\n        if (window.threeDCloudManager && window.threeDCloudManager.isActive) {\n            // Force cloud opacity update based on current altitude\n            window.threeDCloudManager.cameraAltitude = this.route.currentAltitude;\n            window.threeDCloudManager.updateCloudOpacity();\n        }\n    }\n    \n    /**\n     * Update flight state and phase\n     */\n    updateFlightState() {\n        const progressPercent = ((this.currentWaypointIndex + this.flightProgress) / (this.route.waypoints.length - 1)) * 100;\n        \n        // Update flight phase based on progress\n        if (progressPercent < 5) {\n            this.state.phase = 'TAKEOFF';\n        } else if (progressPercent < 95) {\n            this.state.phase = 'CRUISE';\n        } else {\n            this.state.phase = 'APPROACH';\n        }\n    }\n    \n    /**\n     * Complete flight sequence\n     */\n    completeFlight() {\n        this.isFlying = false;\n        this.state.phase = 'LANDED';\n        \n        // Final approach to destination\n        const destination = this.route.waypoints[this.route.waypoints.length - 1];\n        this.map.easeTo({\n            center: [destination.lng, destination.lat],\n            zoom: 14,\n            pitch: 30,\n            bearing: 0,\n            duration: 3000\n        });\n        \n        console.log('üõ¨ Flight completed! Welcome to your destination.');\n        this.updateFlightPanel();\n    }\n    \n    /**\n     * Create flight control panel\n     */\n    createFlightPanel() {\n        if (document.getElementById('auto-flight-panel')) return;\n        \n        const panel = document.createElement('div');\n        panel.id = 'auto-flight-panel';\n        panel.style.cssText = `\n            position: fixed;\n            top: 10px;\n            left: 10px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 1000;\n            border: 1px solid rgba(0, 150, 255, 0.5);\n            min-width: 280px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\n        `;\n        \n        panel.innerHTML = `\n            <div style=\"font-weight: bold; margin-bottom: 8px; color: #00aaff;\">‚úàÔ∏è Auto Flight Control</div>\n            <div id=\"flight-info\">\n                <div>Phase: <span id=\"flight-phase\">PREFLIGHT</span></div>\n                <div>Waypoint: <span id=\"current-waypoint\">-</span></div>\n                <div>Position: <span id=\"current-position\">-</span></div>\n                <div>Altitude: <span id=\"current-altitude\">0ft</span></div>\n                <div>Heading: <span id=\"current-heading\">0¬∞</span></div>\n                <div>Speed: <span id=\"flight-speed\">${this.config.groundSpeed}kt</span></div>\n                <div>Fuel: <span id=\"fuel-remaining\">100%</span></div>\n                <div>Time: <span id=\"flight-time\">00:00</span></div>\n            </div>\n            <div style=\"margin-top: 10px;\">\n                <button id=\"start-flight-btn\" style=\"margin-right: 5px; padding: 4px 8px; background: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer;\">üõ´ Start</button>\n                <button id=\"pause-flight-btn\" style=\"margin-right: 5px; padding: 4px 8px; background: #FF9800; color: white; border: none; border-radius: 3px; cursor: pointer;\">‚è∏Ô∏è Pause</button>\n                <button id=\"stop-flight-btn\" style=\"margin-right: 5px; padding: 4px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer;\">üõë Stop</button>\n            </div>\n            <div style=\"margin-top: 8px;\">\n                <label>Speed: </label>\n                <input type=\"range\" id=\"speed-slider\" min=\"1\" max=\"50\" value=\"${this.config.speedMultiplier}\" \n                       style=\"width: 100px; margin: 0 5px;\"> \n                <span id=\"speed-value\">${this.config.speedMultiplier}x</span>\n            </div>\n        `;\n        \n        document.body.appendChild(panel);\n        \n        // Add event listeners\n        document.getElementById('start-flight-btn').onclick = () => this.startFlight();\n        document.getElementById('pause-flight-btn').onclick = () => this.togglePause();\n        document.getElementById('stop-flight-btn').onclick = () => this.stopFlight();\n        \n        const speedSlider = document.getElementById('speed-slider');\n        speedSlider.oninput = (e) => {\n            this.config.speedMultiplier = parseInt(e.target.value);\n            document.getElementById('speed-value').textContent = `${this.config.speedMultiplier}x`;\n        };\n    }\n    \n    /**\n     * Update flight panel display\n     */\n    updateFlightPanel() {\n        const phaseEl = document.getElementById('flight-phase');\n        const waypointEl = document.getElementById('current-waypoint');\n        const positionEl = document.getElementById('current-position');\n        const altitudeEl = document.getElementById('current-altitude');\n        const headingEl = document.getElementById('current-heading');\n        const fuelEl = document.getElementById('fuel-remaining');\n        const timeEl = document.getElementById('flight-time');\n        \n        if (phaseEl) phaseEl.textContent = this.state.phase;\n        if (waypointEl && this.currentWaypointIndex < this.route.waypoints.length) {\n            waypointEl.textContent = `${this.currentWaypointIndex + 1}/${this.route.waypoints.length} - ${this.route.waypoints[this.currentWaypointIndex].name}`;\n        }\n        if (positionEl && this.route.currentPosition) {\n            positionEl.textContent = `${this.route.currentPosition.lat.toFixed(4)}, ${this.route.currentPosition.lng.toFixed(4)}`;\n        }\n        if (altitudeEl) altitudeEl.textContent = `${Math.round(this.route.currentAltitude)}ft`;\n        if (headingEl) headingEl.textContent = `${Math.round(this.route.currentHeading)}¬∞`;\n        if (fuelEl) fuelEl.textContent = `${Math.round(this.state.fuelRemaining)}%`;\n        if (timeEl) {\n            const minutes = Math.floor(this.state.simulatedTime / 60);\n            const seconds = Math.floor(this.state.simulatedTime % 60);\n            timeEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n        }\n    }\n    \n    /**\n     * Utility functions\n     */\n    calculateDistance(lat1, lng1, lat2, lng2) {\n        const R = 3440.065; // Earth radius in nautical miles\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLng = (lng2 - lng1) * Math.PI / 180;\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                  Math.sin(dLng / 2) * Math.sin(dLng / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return R * c;\n    }\n    \n    calculateBearing(lat1, lng1, lat2, lng2) {\n        const dLng = (lng2 - lng1) * Math.PI / 180;\n        const y = Math.sin(dLng) * Math.cos(lat2 * Math.PI / 180);\n        const x = Math.cos(lat1 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180) -\n                  Math.sin(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.cos(dLng);\n        const bearing = Math.atan2(y, x) * 180 / Math.PI;\n        return (bearing + 360) % 360;\n    }\n    \n    calculateInitialHeading() {\n        if (this.route.waypoints.length < 2) return 0;\n        return this.calculateBearing(\n            this.route.waypoints[0].lat, this.route.waypoints[0].lng,\n            this.route.waypoints[1].lat, this.route.waypoints[1].lng\n        );\n    }\n    \n    altitudeToZoom(altitude) {\n        // Convert altitude to appropriate zoom level\n        return Math.max(8, Math.min(16, 18 - Math.log2(altitude / 1000)));\n    }\n    \n    lerp(start, end, progress) {\n        return start + (end - start) * progress;\n    }\n    \n    /**\n     * Remove flight panel\n     */\n    removeFlightPanel() {\n        const panel = document.getElementById('auto-flight-panel');\n        if (panel) panel.remove();\n    }\n    \n    /**\n     * Clean up\n     */\n    destroy() {\n        this.stopFlight();\n        this.removeFlightPanel();\n    }\n}\n\nexport default AutoFlightManager;\n\n// Make available globally\nif (typeof window !== 'undefined') {\n    window.AutoFlightManager = AutoFlightManager;\n    console.log('üõ©Ô∏è AutoFlight Manager available at: window.AutoFlightManager');\n}"],"names":["AutoFlightManager","mapInstance","enhanced3DControls","waypoints","wp","index","i","from","to","distance","animate","deltaTime","currentWP","nextWP","segmentDistance","progressThisFrame","lat","lng","altitude","totalFlightTime","cameraZoom","progressPercent","destination","panel","speedSlider","e","phaseEl","waypointEl","positionEl","altitudeEl","headingEl","fuelEl","timeEl","minutes","seconds","lat1","lng1","lat2","lng2","dLat","dLng","a","y","x","start","end","progress"],"mappings":"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"}