class d{constructor(e){this.map=e,this.isActive=!1,this.activeCloudLayers=new Map,this.cameraAltitude=0,this.animationFrame=null,this.cloudLayers={LOW_CLOUDS:{name:"Low Clouds & Fog",layerType:"SHORTWAVE",baseAltitude:0,topAltitude:3e3,mapLayerId:"noaa-shortwave-layer",color:[200,200,200]},MID_CLOUDS:{name:"Middle Clouds",layerType:"LONGWAVE",baseAltitude:6e3,topAltitude:15e3,mapLayerId:"noaa-longwave-layer",color:[180,180,200]},HIGH_CLOUDS:{name:"High Clouds",layerType:"VISIBLE",baseAltitude:2e4,topAltitude:4e4,mapLayerId:"noaa-visible-layer",color:[255,255,255]}},console.log("üå©Ô∏è 3D Cloud Manager initialized with altitude-based opacity system")}initialize(){if(!this.map)return console.error("‚ùå No map instance provided for 3D clouds"),!1;try{return this.map.on("move",()=>this.updateCloudOpacity()),this.map.on("zoom",()=>this.updateCloudOpacity()),this.map.on("pitch",()=>this.updateCloudOpacity()),this.startAltitudeMonitoring(),console.log("‚úÖ 3D Cloud system initialized successfully"),!0}catch(e){return console.error("‚ùå Failed to initialize 3D cloud system:",e),!1}}enableCloudLayer(e,t=.8){const a=this.cloudLayers[e];return a?this.map.getLayer(a.mapLayerId)?(this.activeCloudLayers.set(e,{...a,baseOpacity:t,currentOpacity:t}),console.log(`üå©Ô∏è Enabled 3D cloud layer: ${a.name} (${a.baseAltitude}-${a.topAltitude}ft)`),this.isActive||this.activate(),this.updateCloudOpacity(),!0):(console.warn(`‚ùå Map layer not found: ${a.mapLayerId}`),!1):(console.warn(`‚ùå Unknown cloud layer: ${e}`),!1)}disableCloudLayer(e){const t=this.activeCloudLayers.get(e);t&&(this.map.getLayer(t.mapLayerId)&&this.map.setPaintProperty(t.mapLayerId,"raster-opacity",t.baseOpacity),this.activeCloudLayers.delete(e),console.log(`üå©Ô∏è Disabled 3D cloud layer: ${t.name}`),this.activeCloudLayers.size===0&&this.deactivate())}calculateCameraAltitude(){const e=this.map.getZoom(),t=this.map.getPitch();let a;e<=6?a=5e4:e<=8?a=25e3:e<=10?a=1e4:e<=12?a=5e3:e<=14?a=2e3:e<=16?a=1e3:a=500;const o=t/60*a*.5,i=a+o;return console.log(`üõ©Ô∏è Altitude calc: zoom=${e.toFixed(1)}, pitch=${t.toFixed(1)}¬∞ ‚Üí ${Math.round(i)}ft`),Math.max(0,Math.min(5e4,i))}calculateCloudOpacity(e,t){const{baseAltitude:a,topAltitude:o,baseOpacity:i}=e;if(console.log(`üå©Ô∏è Cloud calc: ${e.name} (${a}-${o}ft) vs camera ${Math.round(t)}ft`),t>o+500)return console.log("‚òÅÔ∏è ABOVE clouds: Full opacity (looking down)"),i;if(t<a-500)return console.log("‚òÅÔ∏è BELOW clouds: Clear (no clouds visible)"),0;const n=o-a,c=Math.max(500,n*.1);let s;if(t>=o){const l=t-o,r=Math.min(1,l/c);s=i*r,console.log(`‚òÅÔ∏è Above cloud top: ${(s*100).toFixed(0)}% opacity`)}else if(t<=a){const l=a-t,r=Math.max(0,1-l/c);s=i*r,console.log(`‚òÅÔ∏è Below cloud base: ${(s*100).toFixed(0)}% opacity`)}else{const l=(t-a)/n,r=.3+.5*Math.sin(l*Math.PI);s=i*r,console.log(`‚òÅÔ∏è INSIDE clouds (${(l*100).toFixed(0)}%): ${(s*100).toFixed(0)}% opacity`)}return Math.max(0,Math.min(i,s))}updateCloudOpacity(){if(!(!this.isActive||this.activeCloudLayers.size===0))try{this.cameraAltitude=this.calculateCameraAltitude(),console.log(`üõ©Ô∏è Camera altitude: ${Math.round(this.cameraAltitude)}ft`);for(const[e,t]of this.activeCloudLayers){const a=this.calculateCloudOpacity(t,this.cameraAltitude);t.currentOpacity=a,this.map.getLayer(t.mapLayerId)?(this.map.setPaintProperty(t.mapLayerId,"raster-opacity",a),console.log(`‚òÅÔ∏è ${t.name}: ${Math.round(this.cameraAltitude)}ft ‚Üí ${(a*100).toFixed(0)}% opacity`)):console.warn(`‚ö†Ô∏è Map layer not found: ${t.mapLayerId}`)}}catch(e){console.error("‚ùå Error updating cloud opacity:",e)}}startAltitudeMonitoring(){const e=()=>{this.updateCloudOpacity(),this.isActive&&(this.animationFrame=requestAnimationFrame(e))};e()}activate(){this.isActive=!0,this.startAltitudeMonitoring(),console.log("üå©Ô∏è 3D Cloud system ACTIVATED - Ready for flight simulation!")}deactivate(){this.isActive=!1,this.animationFrame&&(cancelAnimationFrame(this.animationFrame),this.animationFrame=null);for(const[e,t]of this.activeCloudLayers)this.map.getLayer(t.mapLayerId)&&this.map.setPaintProperty(t.mapLayerId,"raster-opacity",t.baseOpacity);console.log("üå©Ô∏è 3D Cloud system deactivated")}updateRealCloudHeights(e){if(!e||!e.cloudLayers){console.warn("‚ö†Ô∏è No real cloud height data available, using generic heights");return}console.log("üå©Ô∏è Updating cloud heights with real weather data:",e.cloudLayers),e.cloudLayers.forEach((t,a)=>{const o=this.getLayerKeyForCloudType(t.type,a);o&&this.cloudLayers[o]&&(this.cloudLayers[o].baseAltitude=t.base,this.cloudLayers[o].topAltitude=t.top,this.cloudLayers[o].coverage=t.coverage||"SCT",console.log(`‚òÅÔ∏è Updated ${o}: ${t.base}-${t.top}ft (${t.type})`))}),this.updateCloudOpacity()}getLayerKeyForCloudType(e,t){return{FEW:t===0?"LOW_CLOUDS":"MID_CLOUDS",SCT:t===0?"LOW_CLOUDS":"MID_CLOUDS",BKN:"MID_CLOUDS",OVC:"LOW_CLOUDS"}[e]||(t===0?"LOW_CLOUDS":"MID_CLOUDS")}getStatus(){return{isActive:this.isActive,cameraAltitude:Math.round(this.cameraAltitude),activeCloudLayers:Array.from(this.activeCloudLayers.keys()),layerOpacities:Array.from(this.activeCloudLayers.entries()).map(([e,t])=>({name:t.name,opacity:Math.round(t.currentOpacity*100),altitudeRange:`${t.baseAltitude}-${t.topAltitude}ft`}))}}}typeof window<"u"&&(window.ThreeDCloudManager=d,console.log("üå©Ô∏è 3D Cloud Manager available at: window.ThreeDCloudManager"));export{d as default};
//# sourceMappingURL=3DCloudManager-DcrcAtXU.js.map
