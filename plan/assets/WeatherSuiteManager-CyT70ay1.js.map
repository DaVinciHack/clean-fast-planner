{"version":3,"file":"WeatherSuiteManager-CyT70ay1.js","sources":["../../src/components/fast-planner/modules/weather/WeatherSuiteManager.js"],"sourcesContent":["/**\n * WeatherSuiteManager.js\n * Complete weather system for offshore aviation operations\n * \n * Manages satellite, radar, lightning, and live weather data\n * Perfect for oil rig operations in Gulf of Mexico and global expansion\n */\n\nimport NOAASatelliteService from './NOAASatelliteService.js';\n\nclass WeatherSuiteManager {\n    constructor() {\n        this.noaaService = new NOAASatelliteService();\n        this.activeWeatherLayers = new Map();\n        this.isInitialized = false;\n        \n        // Weather layer configurations for different operations\n        this.weatherProfiles = {\n            // Perfect for oil rig helicopter operations\n            rigOperations: {\n                name: 'Oil Rig Operations',\n                layers: ['CARIBBEAN', 'LIGHTNING', 'VISIBLE', 'LONGWAVE'],\n                description: 'Optimized for Gulf of Mexico offshore operations',\n                priority: ['LIGHTNING', 'CARIBBEAN', 'VISIBLE'] // Safety first!\n            },\n            \n            // For storm monitoring and severe weather\n            stormTracking: {\n                name: 'Storm Tracking',\n                layers: ['LIGHTNING', 'CARIBBEAN', 'WATER_VAPOR', 'LONGWAVE'],\n                description: 'Real-time storm development and tracking',\n                priority: ['LIGHTNING', 'CARIBBEAN', 'WATER_VAPOR']\n            },\n            \n            // For flight planning and visibility\n            flightPlanning: {\n                name: 'Flight Planning',\n                layers: ['VISIBLE', 'CARIBBEAN', 'LIGHTNING'],\n                description: 'Essential weather for flight safety',\n                priority: ['LIGHTNING', 'CARIBBEAN', 'VISIBLE']\n            },\n            \n            // For global operations (Brazil, Nigeria)\n            globalOperations: {\n                name: 'Global Operations',\n                layers: ['LIGHTNING', 'VISIBLE', 'LONGWAVE'],\n                description: 'Global lightning and satellite coverage',\n                priority: ['LIGHTNING', 'VISIBLE', 'LONGWAVE']\n            }\n        };\n        \n        console.log('üå©Ô∏è Weather Suite Manager initialized');\n    }\n    \n    /**\n     * Initialize the weather suite with map reference\n     * @param {Object} mapInstance - Mapbox GL map instance\n     */\n    initialize(mapInstance) {\n        if (!mapInstance) {\n            throw new Error('Map instance required for weather suite');\n        }\n        \n        this.mapInstance = mapInstance;\n        this.isInitialized = true;\n        \n        console.log('‚úÖ Weather Suite Manager ready');\n        return true;\n    }\n    \n    /**\n     * Apply a complete weather profile\n     * @param {string} profileName - Name of the weather profile\n     * @param {Object} options - Additional options\n     */\n    async applyWeatherProfile(profileName, options = {}) {\n        if (!this.isInitialized) {\n            throw new Error('Weather suite not initialized');\n        }\n        \n        const profile = this.weatherProfiles[profileName];\n        if (!profile) {\n            throw new Error(`Unknown weather profile: ${profileName}`);\n        }\n        \n        console.log(`üå§Ô∏è Applying weather profile: ${profile.name}`);\n        console.log(`üìã ${profile.description}`);\n        \n        const results = {\n            profile: profileName,\n            success: [],\n            failed: [],\n            layersAdded: 0\n        };\n        \n        // Clear existing weather layers first\n        await this.clearAllWeatherLayers();\n        \n        // Add layers in priority order\n        const layersToAdd = options.priorityOrder ? profile.priority : profile.layers;\n        \n        for (const layerType of layersToAdd) {\n            try {\n                console.log(`üõ∞Ô∏è Adding ${layerType} layer...`);\n                \n                const success = await this.addWeatherLayer(layerType, {\n                    opacity: options.opacity || 0.7,\n                    ...options\n                });\n                \n                if (success) {\n                    results.success.push(layerType);\n                    results.layersAdded++;\n                    console.log(`‚úÖ ${layerType} layer added successfully`);\n                } else {\n                    results.failed.push(layerType);\n                    console.log(`‚ùå ${layerType} layer failed to add`);\n                }\n                \n                // Small delay between layers to prevent overwhelming\n                await new Promise(resolve => setTimeout(resolve, 500));\n                \n            } catch (error) {\n                console.error(`‚ùå Error adding ${layerType}:`, error.message);\n                results.failed.push(layerType);\n            }\n        }\n        \n        // Store active profile\n        this.activeProfile = profileName;\n        \n        console.log(`üéâ Weather profile applied: ${results.layersAdded}/${layersToAdd.length} layers successful`);\n        \n        return results;\n    }\n    \n    /**\n     * Add individual weather layer\n     * @param {string} layerType - Type of weather layer\n     * @param {Object} options - Layer options\n     */\n    async addWeatherLayer(layerType, options = {}) {\n        if (!this.isInitialized) {\n            throw new Error('Weather suite not initialized');\n        }\n        \n        try {\n            // Special handling for lightning (global coverage)\n            if (layerType === 'LIGHTNING') {\n                const success = await this.addLightningLayer(options);\n                if (success) {\n                    this.activeWeatherLayers.set(layerType, {\n                        type: 'lightning',\n                        layerId: 'noaa-lightning-layer',\n                        sourceId: 'noaa-lightning',\n                        addedAt: new Date()\n                    });\n                }\n                return success;\n            }\n            \n            // Use existing NOAA service for satellite/radar\n            const success = await this.noaaService.addTestOverlay(this.mapInstance, layerType);\n            \n            if (success) {\n                this.activeWeatherLayers.set(layerType, {\n                    type: this.getLayerType(layerType),\n                    layerId: 'noaa-satellite-layer', // Current implementation uses this\n                    sourceId: 'noaa-satellite',\n                    addedAt: new Date()\n                });\n                \n                // Apply opacity if specified\n                if (options.opacity !== undefined) {\n                    this.setLayerOpacity(layerType, options.opacity);\n                }\n            }\n            \n            return success;\n            \n        } catch (error) {\n            console.error(`Error adding weather layer ${layerType}:`, error);\n            return false;\n        }\n    }\n    \n    /**\n     * Add lightning detection layer (special handling for global coverage)\n     * @param {Object} options - Lightning layer options\n     */\n    async addLightningLayer(options = {}) {\n        try {\n            const layerName = this.noaaService.lightningLayers.LIGHTNING;\n            \n            // Create lightning-specific source\n            const source = {\n                type: 'raster',\n                tiles: [this.noaaService.getWMSUrl(layerName, {\n                    bbox: '{bbox-epsg-3857}',\n                    width: 512,\n                    height: 512\n                })],\n                tileSize: 512,\n                attribution: '¬© NOAA Lightning Detection Network'\n            };\n            \n            // Remove existing lightning layer if present\n            if (this.mapInstance.getSource('noaa-lightning')) {\n                this.mapInstance.removeLayer('noaa-lightning-layer');\n                this.mapInstance.removeSource('noaa-lightning');\n            }\n            \n            // Add source to map\n            this.mapInstance.addSource('noaa-lightning', source);\n            \n            // Add layer to map\n            this.mapInstance.addLayer({\n                id: 'noaa-lightning-layer',\n                type: 'raster',\n                source: 'noaa-lightning',\n                paint: {\n                    'raster-opacity': options.opacity || 0.8 // Lightning should be visible!\n                }\n            });\n            \n            console.log('‚ö° Lightning detection layer added successfully');\n            return true;\n            \n        } catch (error) {\n            console.error('‚ùå Failed to add lightning layer:', error);\n            return false;\n        }\n    }\n    \n    /**\n     * Clear all weather layers\n     */\n    async clearAllWeatherLayers() {\n        console.log('üßπ Clearing all weather layers...');\n        \n        // Remove NOAA satellite/radar layers\n        this.noaaService.removeOverlay(this.mapInstance);\n        \n        // Remove lightning layer\n        if (this.mapInstance.getSource('noaa-lightning')) {\n            this.mapInstance.removeLayer('noaa-lightning-layer');\n            this.mapInstance.removeSource('noaa-lightning');\n        }\n        \n        // Clear tracking\n        this.activeWeatherLayers.clear();\n        this.activeProfile = null;\n        \n        console.log('‚úÖ All weather layers cleared');\n    }\n    \n    /**\n     * Set opacity for specific weather layer\n     * @param {string} layerType - Type of weather layer\n     * @param {number} opacity - Opacity value (0-1)\n     */\n    setLayerOpacity(layerType, opacity) {\n        const layerInfo = this.activeWeatherLayers.get(layerType);\n        if (!layerInfo) {\n            console.warn(`Layer ${layerType} not found`);\n            return false;\n        }\n        \n        try {\n            this.mapInstance.setPaintProperty(layerInfo.layerId, 'raster-opacity', opacity);\n            console.log(`üé® ${layerType} opacity set to ${opacity}`);\n            return true;\n        } catch (error) {\n            console.error(`Error setting opacity for ${layerType}:`, error);\n            return false;\n        }\n    }\n    \n    /**\n     * Toggle visibility of weather layer\n     * @param {string} layerType - Type of weather layer\n     * @param {boolean} visible - Visibility state\n     */\n    toggleLayerVisibility(layerType, visible = null) {\n        const layerInfo = this.activeWeatherLayers.get(layerType);\n        if (!layerInfo) {\n            console.warn(`Layer ${layerType} not found`);\n            return false;\n        }\n        \n        try {\n            if (visible === null) {\n                // Toggle current visibility\n                const current = this.mapInstance.getLayoutProperty(layerInfo.layerId, 'visibility');\n                visible = current === 'visible' ? false : true;\n            }\n            \n            this.mapInstance.setLayoutProperty(\n                layerInfo.layerId, \n                'visibility', \n                visible ? 'visible' : 'none'\n            );\n            \n            console.log(`üëÅÔ∏è ${layerType} visibility: ${visible ? 'visible' : 'hidden'}`);\n            return true;\n        } catch (error) {\n            console.error(`Error toggling visibility for ${layerType}:`, error);\n            return false;\n        }\n    }\n    \n    /**\n     * Get status of weather suite\n     */\n    getWeatherStatus() {\n        const status = {\n            initialized: this.isInitialized,\n            activeProfile: this.activeProfile,\n            activeLayers: Array.from(this.activeWeatherLayers.keys()),\n            layerCount: this.activeWeatherLayers.size,\n            profiles: Object.keys(this.weatherProfiles)\n        };\n        \n        console.log('üå§Ô∏è Weather Suite Status:', status);\n        return status;\n    }\n    \n    /**\n     * Helper to determine layer type\n     * @private\n     */\n    getLayerType(layerType) {\n        if (Object.keys(this.noaaService.satelliteLayers).includes(layerType)) {\n            return 'satellite';\n        } else if (Object.keys(this.noaaService.radarLayers).includes(layerType)) {\n            return 'radar';\n        } else if (Object.keys(this.noaaService.lightningLayers).includes(layerType)) {\n            return 'lightning';\n        } else {\n            return 'unknown';\n        }\n    }\n    \n    /**\n     * Quick setup for oil rig operations\n     */\n    async setupForRigOperations() {\n        console.log('üõ¢Ô∏è Setting up weather for oil rig operations...');\n        return await this.applyWeatherProfile('rigOperations', {\n            opacity: 0.7,\n            priorityOrder: true // Use priority order (safety first!)\n        });\n    }\n    \n    /**\n     * Quick setup for storm tracking\n     */\n    async setupForStormTracking() {\n        console.log('‚õàÔ∏è Setting up weather for storm tracking...');\n        return await this.applyWeatherProfile('stormTracking', {\n            opacity: 0.8, // More visible for storm monitoring\n            priorityOrder: true\n        });\n    }\n}\n\n// Export for use\nexport default WeatherSuiteManager;\n\n// Make available globally for console testing\nif (typeof window !== 'undefined') {\n    window.WeatherSuiteManager = WeatherSuiteManager;\n    window.weatherSuite = new WeatherSuiteManager();\n    \n    console.log('üå©Ô∏è Weather Suite Manager available at: window.weatherSuite');\n    console.log('üõ¢Ô∏è Setup for rig ops: window.weatherSuite.setupForRigOperations()');\n    console.log('‚õàÔ∏è Setup for storms: window.weatherSuite.setupForStormTracking()');\n}"],"names":["WeatherSuiteManager","NOAASatelliteService","mapInstance","profileName","options","profile","results","layersToAdd","layerType","resolve","error","success","layerName","source","opacity","layerInfo","visible","status"],"mappings":"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"}