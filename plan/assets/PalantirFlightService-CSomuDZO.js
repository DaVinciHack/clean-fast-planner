import{c as l,_ as d}from"./index-N0sxxNZ-.js";import"./react-vendors-Bh7YcOHL.js";import"./osdk-vendors-uCUaU2oH.js";class f{static isClientAvailable(){return!!l}static async runDiagnostic(){try{console.log("Running API diagnostic with minimal parameters...");const e=await this.getSDK();console.log("Available SDK Actions:",Object.keys(e).filter(o=>typeof o=="string"&&o.toLowerCase().includes("flight")));const t={flightName:"Diagnostic Test Flight",aircraftRegion:"NORWAY",new_parameter:"Norway",aircraftId:"190",region:"NORWAY",etd:new Date().toISOString(),locations:["ENZV","ENLE"]};console.log("Diagnostic params:",t);const i=await l(e.createNewFlightFp2).applyAction(t,{$returnEdits:!0});return console.log("Diagnostic successful with result:",i),!0}catch(e){if(console.error("Diagnostic failed:",e),e.message&&e.message.includes("evaluatedConstraints"))try{const t=e.message.match(/\{.*\}/s);if(t){const i=JSON.parse(t[0]);console.log("Parameter validation errors:",i)}}catch(t){console.log("Could not parse validation errors:",t)}return!1}}static async getSDK(){try{return await d(()=>import("./osdk-vendors-uCUaU2oH.js").then(e=>e.i),[])}catch(e){throw console.error("Error importing SDK:",e),new Error(`Failed to import SDK: ${e.message}`)}}static async createFlight(e){if(!this.isClientAvailable())throw new Error("OSDK client not available. Try logging in again.");return e.flightId&&e.flightId.trim()!==""?(console.log(`Updating existing flight with ID: ${e.flightId}`),await this.updateFlight(e)):(console.log("Creating new flight"),await this.createNewFlight(e))}static async createNewFlight(e){if(!this.isClientAvailable())throw new Error("OSDK client not available. Try logging in again.");let t=[];e.locations&&Array.isArray(e.locations)?t=e.locations.map(o=>typeof o=="string"?o.trim():o):t=["ENZV","ENLE"];const i=await this.getSDK();try{if(i.createFlightWithWaypoints){console.log("Using new createFlightWithWaypoints function");let o=null;if(e.waypoints&&Array.isArray(e.waypoints))if(console.log("=== PALANTIR SERVICE WAYPOINT DEBUG ==="),console.log("Raw waypoints received:",e.waypoints.length),e.waypoints.forEach((r,s)=>{console.log(`Waypoint ${s}:`,{name:r.name,type:r.type,pointType:r.pointType,isWaypoint:r.isWaypoint})}),!e.waypoints.some(r=>r.pointType==="NAVIGATION_WAYPOINT"||r.isWaypoint===!0||r.type==="WAYPOINT"))console.log("No actual navigation waypoints found - all waypoints have undefined classification. Setting displayWaypoints to null."),o=null;else{console.log("Found actual navigation waypoints, processing them...");const r=e.waypoints.filter(s=>s.pointType==="NAVIGATION_WAYPOINT"?!0:s.pointType==="LANDING_STOP"?!1:typeof s.isWaypoint=="boolean"?s.isWaypoint:s.type==="WAYPOINT"?!0:(s.type==="STOP",!1)).map((s,p)=>({legIndex:s.legIndex||0,waypoint:s.name||s.id}));r.length>0&&(o=JSON.stringify(r))}const n={flightName:e.flightName||"Fast Planner Flight",locations:t,displayWaypoints:o,useOnlyProvidedWaypoints:e.useOnlyProvidedWaypoints??!1,aircraftId:e.aircraftId||"190",region:e.region||"NORWAY"};e.captainId&&(n.captainId=e.captainId),e.copilotId&&(n.copilotId=e.copilotId),e.medicId&&(n.medicId=e.medicId),e.soId&&(n.soId=e.soId),e.rswId&&(n.rswId=e.rswId),console.log("Creating flight with structured waypoints:",JSON.stringify(n,null,2));const a=await l(i.createFlightWithWaypoints).applyAction(n,{$returnEdits:!0});return console.log("Flight creation with structured waypoints successful!",a),a}else{console.log("New createFlightWithWaypoints function not available, falling back to createNewFlightFp2");const o={flightName:e.flightName||"Test Flight",aircraftRegion:"NORWAY",new_parameter:"Norway",aircraftId:e.aircraftId||"190",region:"NORWAY",etd:e.etd||new Date().toISOString(),locations:t,alternateLocation:e.alternateLocation||"",...e.captainId?{captainId:e.captainId}:{},...e.copilotId?{copilotId:e.copilotId}:{}};if(console.log("Flight data structure being sent to API:",JSON.stringify(o,null,2)),!i.createNewFlightFp2)throw console.error("createNewFlightFp2 action not found in SDK"),console.log("Available SDK actions:",Object.keys(i)),new Error("createNewFlightFp2 action not found in SDK");const n=this.formatFlightParams(o);console.log("Calling createNewFlightFp2 with params:",n);const a=await l(i.createNewFlightFp2).applyAction(n,{$returnEdits:!0});return console.log("Flight creation successful!",a),a}}catch(o){throw console.error("Error creating flight:",o),console.error("Error details:",o),o}}static async updateFlight(e){if(!this.isClientAvailable())throw new Error("OSDK client not available. Try logging in again.");if(!e.flightId)throw new Error("Flight ID is required for updating a flight");const t=await this.getSDK();try{if(t.updateFastPlannerFlight){console.log("Using new updateFastPlannerFlight function");let i=null;if(e.waypoints&&Array.isArray(e.waypoints)){const c=e.waypoints.filter(r=>r.pointType==="NAVIGATION_WAYPOINT"?!0:r.pointType==="LANDING_STOP"?!1:typeof r.isWaypoint=="boolean"?r.isWaypoint:r.type==="WAYPOINT"?!0:r.type!=="STOP").map(r=>({legIndex:r.legIndex||0,waypoint:r.name||r.id}));c.length>0&&(i=JSON.stringify(c))}let o=[];e.locations&&Array.isArray(e.locations)&&(o=e.locations.map(c=>typeof c=="string"?c.trim():c));const n={flightId:e.flightId,flightName:e.flightName,locations:o,structuredWaypoints:i,useOnlyProvidedWaypoints:!0,region:e.region||e.aircraftRegion||"NORWAY",aircraftRegion:e.aircraftRegion||e.region||"NORWAY",etd:e.etd||new Date().toISOString()};e.aircraftId&&(n.aircraftId=e.aircraftId),e.alternateLocation&&(n.alternateLocation=e.alternateLocation),e.captainId&&(n.captainId=e.captainId),e.copilotId&&(n.copilotId=e.copilotId),e.medicId&&(n.medicId=e.medicId),e.soId&&(n.soId=e.soId),e.rswId&&(n.rswId=e.rswId),e.fuelPlanId&&(n.fuelPlanId=e.fuelPlanId),e.timingId&&(n.timingId=e.timingId),e.weightBalanceId&&(n.weightBalanceId=e.weightBalanceId),e.policyUuid&&(n.policyUuid=e.policyUuid),console.log("Updating flight with parameters:",JSON.stringify(n,null,2));const a=await l(t.updateFastPlannerFlight).applyAction(n,{$returnEdits:!0});return console.log("Flight update successful!",a),a}else{if(console.log("New updateFastPlannerFlight function not available, falling back to editExistingFlightFp2"),!t.editExistingFlightFp2)throw new Error("Neither updateFastPlannerFlight nor editExistingFlightFp2 are available");const i={flightId:e.flightId,flightName:e.flightName,aircraftRegion:"NORWAY",aircraftId:e.aircraftId,region:"NORWAY",etd:e.etd||new Date().toISOString(),locations:e.locations||["ENZV","ENLE"],alternateLocation:e.alternateLocation||""};e.captainId&&(i.captainId=e.captainId),e.copilotId&&(i.copilotId=e.copilotId),console.log("Flight update data structure:",JSON.stringify(i,null,2));const o=await l(t.editExistingFlightFp2).applyAction(i,{$returnEdits:!0});return console.log("Flight update successful!",o),o}}catch(i){throw console.error("Error updating flight:",i),i}}static extractFlightId(e){if(console.log("Extracting flight ID from result:",e),e&&e.addedObjects&&Array.isArray(e.addedObjects)){for(const t of e.addedObjects)if(t.objectType==="MainFlightObjectFp2"&&t.primaryKey)return console.log("Found flight ID in addedObjects:",t.primaryKey),t.primaryKey}if(e){if(e.editedObjectTypes&&e.editedObjectTypes.length>0){const t=e.editedObjectTypes[0];if(t&&t.id)return console.log("Found flight ID in editedObjectTypes:",t.id),t.id}if(e.type==="edits"&&e.updatedObject){const t=e.updatedObject.id||"Unknown ID";return console.log("Found flight ID in updatedObject:",t),t}if(e.id)return console.log("Found flight ID directly in result:",e.id),e.id}return console.warn('Could not find flight ID in result. Using "Unknown ID"'),"Unknown ID"}static isSuccessfulResult(e){return e?e.type==="edits"||e.editedObjectTypes&&e.editedObjectTypes.length>0||e.updatedObject||e.id:!1}static formatFlightParams(e){const t={flightName:e.flightName||"Test Flight",aircraftRegion:"NORWAY",new_parameter:"Norway",aircraftId:e.aircraftId||"190",region:"NORWAY",etd:e.etd||new Date().toISOString(),locations:Array.isArray(e.locations)?e.locations:["ENZV","ENLE"],alternateLocation:e.alternateLocation||""};return e.captainId&&(t.captainId=e.captainId),e.copilotId&&(t.copilotId=e.copilotId),e.medicId&&(t.medicId=e.medicId),e.soId&&(t.soId=e.soId),e.rswId&&(t.rswId=e.rswId),console.log("Formatted flight parameters:",t),t}static formatErrorMessage(e){if(!e)return"Unknown error occurred";console.error("Full error details:",e);const t=e.message||"";if(t.includes("401")||t.includes("unauthorized"))return"Authentication error: You need to log in again to save flights";if(t.includes("404")||t.includes("not found"))return"API endpoint not found: The required action may not be available";if(t.includes("400")||t.includes("Bad Request")){let i="API request error (400): The server rejected the flight data.";return e.response&&e.response.data&&(i+=" Details: "+JSON.stringify(e.response.data)),i+=" Please check that all required fields are correctly formatted, especially IDs and dates.",i}return t.includes("timeout")||t.includes("aborted")?"Connection timeout: The server took too long to respond":t.includes("network")||t.includes("offline")?"Network error: Check your internet connection":t.includes("TypeError")&&t.includes("is not a function")?"API function error: The required action may not be available or has changed. Check the Palantir API documentation.":t.includes("bristol")||t.includes("foundry")?"API connection error: Unable to connect to the Palantir Foundry service. Please verify your authentication.":t.includes("import")||t.includes("module")?"SDK import error: Unable to load the @flight-app/sdk module. Please check that it is correctly installed.":`Error creating flight: ${t} (Check browser console for more details)`}}export{f as default};
//# sourceMappingURL=PalantirFlightService-CSomuDZO.js.map
