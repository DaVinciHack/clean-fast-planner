{"version":3,"file":"3DCloudManager-DcrcAtXU.js","sources":["../../src/components/fast-planner/modules/weather/3DCloudManager.js"],"sourcesContent":["/**\n * 3DCloudManager.js\n * \n * GENIUS 3D Cloud Visualization System\n * Creates altitude-based cloud opacity for realistic \"flying through clouds\" experience\n * \n * This creates the visual illusion of flying under/over/through cloud layers\n * by dynamically adjusting opacity based on camera altitude vs cloud layer heights\n */\n\nclass ThreeDCloudManager {\n    constructor(mapInstance) {\n        this.map = mapInstance;\n        this.isActive = false;\n        this.activeCloudLayers = new Map();\n        this.cameraAltitude = 0; // feet above sea level\n        this.animationFrame = null;\n        \n        // Cloud layer definitions (altitude in feet) - these can be updated with real weather data\n        this.cloudLayers = {\n            'LOW_CLOUDS': {\n                name: 'Low Clouds & Fog',\n                layerType: 'SHORTWAVE',\n                baseAltitude: 0,      // Surface level\n                topAltitude: 3000,    // 3,000ft (typical low clouds)\n                mapLayerId: 'noaa-shortwave-layer',\n                color: [200, 200, 200] // Light gray\n            },\n            'MID_CLOUDS': {\n                name: 'Middle Clouds',\n                layerType: 'LONGWAVE', \n                baseAltitude: 6000,   // 6,000ft\n                topAltitude: 15000,   // 15,000ft (typical mid-level clouds)\n                mapLayerId: 'noaa-longwave-layer',\n                color: [180, 180, 200] // Slightly blue-gray\n            },\n            'HIGH_CLOUDS': {\n                name: 'High Clouds',\n                layerType: 'VISIBLE',\n                baseAltitude: 20000,  // 20,000ft\n                topAltitude: 40000,   // 40,000ft (cirrus level)\n                mapLayerId: 'noaa-visible-layer',\n                color: [255, 255, 255] // White\n            }\n        };\n        \n        console.log('üå©Ô∏è 3D Cloud Manager initialized with altitude-based opacity system');\n    }\n    \n    /**\n     * Initialize 3D cloud system\n     */\n    initialize() {\n        if (!this.map) {\n            console.error('‚ùå No map instance provided for 3D clouds');\n            return false;\n        }\n        \n        try {\n            // Listen for camera movements to update cloud opacity\n            this.map.on('move', () => this.updateCloudOpacity());\n            this.map.on('zoom', () => this.updateCloudOpacity());\n            this.map.on('pitch', () => this.updateCloudOpacity());\n            \n            // Start monitoring camera altitude\n            this.startAltitudeMonitoring();\n            \n            console.log('‚úÖ 3D Cloud system initialized successfully');\n            return true;\n            \n        } catch (error) {\n            console.error('‚ùå Failed to initialize 3D cloud system:', error);\n            return false;\n        }\n    }\n    \n    /**\n     * Enable 3D cloud effects for specific layer\n     * @param {string} cloudLayerKey - Key from this.cloudLayers\n     * @param {number} baseOpacity - Base opacity when above clouds\n     */\n    enableCloudLayer(cloudLayerKey, baseOpacity = 0.8) {\n        const cloudLayer = this.cloudLayers[cloudLayerKey];\n        if (!cloudLayer) {\n            console.warn(`‚ùå Unknown cloud layer: ${cloudLayerKey}`);\n            return false;\n        }\n        \n        // Check if the map layer exists\n        if (!this.map.getLayer(cloudLayer.mapLayerId)) {\n            console.warn(`‚ùå Map layer not found: ${cloudLayer.mapLayerId}`);\n            return false;\n        }\n        \n        this.activeCloudLayers.set(cloudLayerKey, {\n            ...cloudLayer,\n            baseOpacity: baseOpacity,\n            currentOpacity: baseOpacity\n        });\n        \n        console.log(`üå©Ô∏è Enabled 3D cloud layer: ${cloudLayer.name} (${cloudLayer.baseAltitude}-${cloudLayer.topAltitude}ft)`);\n        \n        // Start the 3D effect\n        if (!this.isActive) {\n            this.activate();\n        }\n        \n        // Initial opacity calculation\n        this.updateCloudOpacity();\n        \n        return true;\n    }\n    \n    /**\n     * Disable 3D cloud effects for specific layer\n     */\n    disableCloudLayer(cloudLayerKey) {\n        const cloudLayer = this.activeCloudLayers.get(cloudLayerKey);\n        if (cloudLayer) {\n            // Reset to normal opacity\n            if (this.map.getLayer(cloudLayer.mapLayerId)) {\n                this.map.setPaintProperty(cloudLayer.mapLayerId, 'raster-opacity', cloudLayer.baseOpacity);\n            }\n            \n            this.activeCloudLayers.delete(cloudLayerKey);\n            console.log(`üå©Ô∏è Disabled 3D cloud layer: ${cloudLayer.name}`);\n            \n            // Deactivate if no layers remain\n            if (this.activeCloudLayers.size === 0) {\n                this.deactivate();\n            }\n        }\n    }\n    \n    /**\n     * Calculate camera altitude from map zoom and pitch\n     * This approximates the viewing altitude in feet above sea level\n     */\n    calculateCameraAltitude() {\n        const zoom = this.map.getZoom();\n        const pitch = this.map.getPitch();\n        \n        // FIXED: Much more responsive altitude calculation\n        // Zoom levels: 6 = 50,000ft, 10 = 10,000ft, 14 = 2,000ft, 18 = 200ft\n        let altitude;\n        \n        if (zoom <= 6) {\n            altitude = 50000; // Very high\n        } else if (zoom <= 8) {\n            altitude = 25000; // High altitude\n        } else if (zoom <= 10) {\n            altitude = 10000; // Medium high\n        } else if (zoom <= 12) {\n            altitude = 5000;  // Medium\n        } else if (zoom <= 14) {\n            altitude = 2000;  // Low\n        } else if (zoom <= 16) {\n            altitude = 1000;  // Very low\n        } else {\n            altitude = 500;   // Ground level\n        }\n        \n        // Pitch adjustment: Higher pitch = higher effective altitude\n        const pitchBonus = (pitch / 60) * altitude * 0.5;\n        \n        const finalAltitude = altitude + pitchBonus;\n        \n        console.log(`üõ©Ô∏è Altitude calc: zoom=${zoom.toFixed(1)}, pitch=${pitch.toFixed(1)}¬∞ ‚Üí ${Math.round(finalAltitude)}ft`);\n        \n        return Math.max(0, Math.min(50000, finalAltitude));\n    }\n    \n    /**\n     * Calculate opacity based on camera altitude vs cloud layer\n     * This creates the \"flying through clouds\" effect with proper altitude behavior\n     */\n    calculateCloudOpacity(cloudLayer, cameraAltitude) {\n        const { baseAltitude, topAltitude, baseOpacity } = cloudLayer;\n        \n        console.log(`üå©Ô∏è Cloud calc: ${cloudLayer.name} (${baseAltitude}-${topAltitude}ft) vs camera ${Math.round(cameraAltitude)}ft`);\n        \n        // ABOVE CLOUDS: Camera is above cloud top - see clouds below you\n        if (cameraAltitude > topAltitude + 500) {\n            console.log(`‚òÅÔ∏è ABOVE clouds: Full opacity (looking down)`);\n            return baseOpacity; // Full visibility of clouds below\n        }\n        \n        // BELOW CLOUDS: Camera is below cloud base - clear view (no clouds visible)\n        if (cameraAltitude < baseAltitude - 500) {\n            console.log(`‚òÅÔ∏è BELOW clouds: Clear (no clouds visible)`);\n            return 0; // No clouds visible when below them\n        }\n        \n        // TRANSITION ZONES and IN-CLOUD behavior\n        const layerThickness = topAltitude - baseAltitude;\n        const transitionZone = Math.max(500, layerThickness * 0.1); // 10% transition zone\n        \n        let opacity;\n        \n        if (cameraAltitude >= topAltitude) {\n            // Approaching cloud top from above - fade in as you get closer\n            const distanceFromTop = cameraAltitude - topAltitude;\n            const fadeIn = Math.min(1, distanceFromTop / transitionZone);\n            opacity = baseOpacity * fadeIn;\n            console.log(`‚òÅÔ∏è Above cloud top: ${(opacity * 100).toFixed(0)}% opacity`);\n            \n        } else if (cameraAltitude <= baseAltitude) {\n            // Approaching cloud base from below - fade in as you get closer\n            const distanceFromBase = baseAltitude - cameraAltitude;\n            const fadeIn = Math.max(0, 1 - (distanceFromBase / transitionZone));\n            opacity = baseOpacity * fadeIn;\n            console.log(`‚òÅÔ∏è Below cloud base: ${(opacity * 100).toFixed(0)}% opacity`);\n            \n        } else {\n            // INSIDE THE CLOUD LAYER - this is the key part!\n            const positionInLayer = (cameraAltitude - baseAltitude) / layerThickness;\n            \n            // Inside clouds: reduce opacity significantly (you're IN the clouds, they're around you)\n            // Bottom of layer: 80% opacity (entering clouds)\n            // Middle of layer: 30% opacity (deep in clouds - poor visibility)\n            // Top of layer: 60% opacity (exiting clouds)\n            const inCloudCurve = 0.3 + 0.5 * Math.sin(positionInLayer * Math.PI);\n            opacity = baseOpacity * inCloudCurve;\n            console.log(`‚òÅÔ∏è INSIDE clouds (${(positionInLayer * 100).toFixed(0)}%): ${(opacity * 100).toFixed(0)}% opacity`);\n        }\n        \n        return Math.max(0, Math.min(baseOpacity, opacity));\n    }\n    \n    /**\n     * Update all active cloud layer opacities based on current camera position\n     */\n    updateCloudOpacity() {\n        if (!this.isActive || this.activeCloudLayers.size === 0) return;\n        \n        try {\n            this.cameraAltitude = this.calculateCameraAltitude();\n            \n            console.log(`üõ©Ô∏è Camera altitude: ${Math.round(this.cameraAltitude)}ft`);\n            \n            // Update each active cloud layer\n            for (const [layerKey, cloudLayer] of this.activeCloudLayers) {\n                const newOpacity = this.calculateCloudOpacity(cloudLayer, this.cameraAltitude);\n                \n                // Always update (remove the threshold check for more responsive updates)\n                cloudLayer.currentOpacity = newOpacity;\n                \n                // Apply to map layer\n                if (this.map.getLayer(cloudLayer.mapLayerId)) {\n                    this.map.setPaintProperty(cloudLayer.mapLayerId, 'raster-opacity', newOpacity);\n                    console.log(`‚òÅÔ∏è ${cloudLayer.name}: ${Math.round(this.cameraAltitude)}ft ‚Üí ${(newOpacity * 100).toFixed(0)}% opacity`);\n                } else {\n                    console.warn(`‚ö†Ô∏è Map layer not found: ${cloudLayer.mapLayerId}`);\n                }\n            }\n            \n        } catch (error) {\n            console.error('‚ùå Error updating cloud opacity:', error);\n        }\n    }\n    \n    /**\n     * Start continuous altitude monitoring\n     */\n    startAltitudeMonitoring() {\n        const monitor = () => {\n            this.updateCloudOpacity();\n            \n            if (this.isActive) {\n                this.animationFrame = requestAnimationFrame(monitor);\n            }\n        };\n        \n        monitor();\n    }\n    \n    /**\n     * Activate 3D cloud system\n     */\n    activate() {\n        this.isActive = true;\n        this.startAltitudeMonitoring();\n        console.log('üå©Ô∏è 3D Cloud system ACTIVATED - Ready for flight simulation!');\n    }\n    \n    /**\n     * Deactivate 3D cloud system\n     */\n    deactivate() {\n        this.isActive = false;\n        \n        if (this.animationFrame) {\n            cancelAnimationFrame(this.animationFrame);\n            this.animationFrame = null;\n        }\n        \n        // Reset all cloud layers to their base opacity\n        for (const [layerKey, cloudLayer] of this.activeCloudLayers) {\n            if (this.map.getLayer(cloudLayer.mapLayerId)) {\n                this.map.setPaintProperty(cloudLayer.mapLayerId, 'raster-opacity', cloudLayer.baseOpacity);\n            }\n        }\n        \n        console.log('üå©Ô∏è 3D Cloud system deactivated');\n    }\n    \n    /**\n     * Update cloud layer altitudes with real weather data\n     * @param {Object} weatherData - Real weather data with cloud heights\n     * Example: { cloudLayers: [{ type: 'SCT', base: 2500, top: 8000 }, { type: 'BKN', base: 12000, top: 18000 }] }\n     */\n    updateRealCloudHeights(weatherData) {\n        if (!weatherData || !weatherData.cloudLayers) {\n            console.warn('‚ö†Ô∏è No real cloud height data available, using generic heights');\n            return;\n        }\n        \n        console.log('üå©Ô∏è Updating cloud heights with real weather data:', weatherData.cloudLayers);\n        \n        // Map weather cloud layers to our visualization layers\n        weatherData.cloudLayers.forEach((cloudData, index) => {\n            const layerKey = this.getLayerKeyForCloudType(cloudData.type, index);\n            if (layerKey && this.cloudLayers[layerKey]) {\n                this.cloudLayers[layerKey].baseAltitude = cloudData.base;\n                this.cloudLayers[layerKey].topAltitude = cloudData.top;\n                this.cloudLayers[layerKey].coverage = cloudData.coverage || 'SCT';\n                \n                console.log(`‚òÅÔ∏è Updated ${layerKey}: ${cloudData.base}-${cloudData.top}ft (${cloudData.type})`);\n            }\n        });\n        \n        // Recalculate opacities with new heights\n        this.updateCloudOpacity();\n    }\n    \n    /**\n     * Map cloud type to our layer system\n     */\n    getLayerKeyForCloudType(cloudType, index) {\n        // METAR cloud types: CLR, FEW, SCT, BKN, OVC\n        const typeMap = {\n            'FEW': index === 0 ? 'LOW_CLOUDS' : 'MID_CLOUDS',\n            'SCT': index === 0 ? 'LOW_CLOUDS' : 'MID_CLOUDS', \n            'BKN': 'MID_CLOUDS',\n            'OVC': 'LOW_CLOUDS'\n        };\n        return typeMap[cloudType] || (index === 0 ? 'LOW_CLOUDS' : 'MID_CLOUDS');\n    }\n    getStatus() {\n        return {\n            isActive: this.isActive,\n            cameraAltitude: Math.round(this.cameraAltitude),\n            activeCloudLayers: Array.from(this.activeCloudLayers.keys()),\n            layerOpacities: Array.from(this.activeCloudLayers.entries()).map(([key, layer]) => ({\n                name: layer.name,\n                opacity: Math.round(layer.currentOpacity * 100),\n                altitudeRange: `${layer.baseAltitude}-${layer.topAltitude}ft`\n            }))\n        };\n    }\n}\n\nexport default ThreeDCloudManager;\n\n// Make available globally for console testing\nif (typeof window !== 'undefined') {\n    window.ThreeDCloudManager = ThreeDCloudManager;\n    console.log('üå©Ô∏è 3D Cloud Manager available at: window.ThreeDCloudManager');\n}"],"names":["ThreeDCloudManager","mapInstance","error","cloudLayerKey","baseOpacity","cloudLayer","zoom","pitch","altitude","pitchBonus","finalAltitude","cameraAltitude","baseAltitude","topAltitude","layerThickness","transitionZone","opacity","distanceFromTop","fadeIn","distanceFromBase","positionInLayer","inCloudCurve","layerKey","newOpacity","monitor","weatherData","cloudData","index","cloudType","key","layer"],"mappings":"AAUA,MAAMA,CAAmB,CACrB,YAAYC,EAAa,CACrB,KAAK,IAAMA,EACX,KAAK,SAAW,GAChB,KAAK,kBAAoB,IAAI,IAC7B,KAAK,eAAiB,EACtB,KAAK,eAAiB,KAGtB,KAAK,YAAc,CACf,WAAc,CACV,KAAM,mBACN,UAAW,YACX,aAAc,EACd,YAAa,IACb,WAAY,uBACZ,MAAO,CAAC,IAAK,IAAK,GAAG,CACxB,EACD,WAAc,CACV,KAAM,gBACN,UAAW,WACX,aAAc,IACd,YAAa,KACb,WAAY,sBACZ,MAAO,CAAC,IAAK,IAAK,GAAG,CACxB,EACD,YAAe,CACX,KAAM,cACN,UAAW,UACX,aAAc,IACd,YAAa,IACb,WAAY,qBACZ,MAAO,CAAC,IAAK,IAAK,GAAG,CACrC,CACS,EAED,QAAQ,IAAI,qEAAqE,CACzF,CAKI,YAAa,CACT,GAAI,CAAC,KAAK,IACN,eAAQ,MAAM,0CAA0C,EACjD,GAGX,GAAI,CAEA,YAAK,IAAI,GAAG,OAAQ,IAAM,KAAK,oBAAoB,EACnD,KAAK,IAAI,GAAG,OAAQ,IAAM,KAAK,oBAAoB,EACnD,KAAK,IAAI,GAAG,QAAS,IAAM,KAAK,oBAAoB,EAGpD,KAAK,wBAAyB,EAE9B,QAAQ,IAAI,4CAA4C,EACjD,EAEV,OAAQC,EAAO,CACZ,eAAQ,MAAM,0CAA2CA,CAAK,EACvD,EACnB,CACA,CAOI,iBAAiBC,EAAeC,EAAc,GAAK,CAC/C,MAAMC,EAAa,KAAK,YAAYF,CAAa,EACjD,OAAKE,EAMA,KAAK,IAAI,SAASA,EAAW,UAAU,GAK5C,KAAK,kBAAkB,IAAIF,EAAe,CACtC,GAAGE,EACH,YAAaD,EACb,eAAgBA,CAC5B,CAAS,EAED,QAAQ,IAAI,+BAA+BC,EAAW,IAAI,KAAKA,EAAW,YAAY,IAAIA,EAAW,WAAW,KAAK,EAGhH,KAAK,UACN,KAAK,SAAU,EAInB,KAAK,mBAAoB,EAElB,KApBH,QAAQ,KAAK,0BAA0BA,EAAW,UAAU,EAAE,EACvD,KAPP,QAAQ,KAAK,0BAA0BF,CAAa,EAAE,EAC/C,GA0BnB,CAKI,kBAAkBA,EAAe,CAC7B,MAAME,EAAa,KAAK,kBAAkB,IAAIF,CAAa,EACvDE,IAEI,KAAK,IAAI,SAASA,EAAW,UAAU,GACvC,KAAK,IAAI,iBAAiBA,EAAW,WAAY,iBAAkBA,EAAW,WAAW,EAG7F,KAAK,kBAAkB,OAAOF,CAAa,EAC3C,QAAQ,IAAI,gCAAgCE,EAAW,IAAI,EAAE,EAGzD,KAAK,kBAAkB,OAAS,GAChC,KAAK,WAAY,EAGjC,CAMI,yBAA0B,CACtB,MAAMC,EAAO,KAAK,IAAI,QAAS,EACzBC,EAAQ,KAAK,IAAI,SAAU,EAIjC,IAAIC,EAEAF,GAAQ,EACRE,EAAW,IACJF,GAAQ,EACfE,EAAW,KACJF,GAAQ,GACfE,EAAW,IACJF,GAAQ,GACfE,EAAW,IACJF,GAAQ,GACfE,EAAW,IACJF,GAAQ,GACfE,EAAW,IAEXA,EAAW,IAIf,MAAMC,EAAcF,EAAQ,GAAMC,EAAW,GAEvCE,EAAgBF,EAAWC,EAEjC,eAAQ,IAAI,2BAA2BH,EAAK,QAAQ,CAAC,CAAC,WAAWC,EAAM,QAAQ,CAAC,CAAC,OAAO,KAAK,MAAMG,CAAa,CAAC,IAAI,EAE9G,KAAK,IAAI,EAAG,KAAK,IAAI,IAAOA,CAAa,CAAC,CACzD,CAMI,sBAAsBL,EAAYM,EAAgB,CAC9C,KAAM,CAAE,aAAAC,EAAc,YAAAC,EAAa,YAAAT,CAAa,EAAGC,EAKnD,GAHA,QAAQ,IAAI,mBAAmBA,EAAW,IAAI,KAAKO,CAAY,IAAIC,CAAW,iBAAiB,KAAK,MAAMF,CAAc,CAAC,IAAI,EAGzHA,EAAiBE,EAAc,IAC/B,eAAQ,IAAI,8CAA8C,EACnDT,EAIX,GAAIO,EAAiBC,EAAe,IAChC,eAAQ,IAAI,4CAA4C,EACjD,EAIX,MAAME,EAAiBD,EAAcD,EAC/BG,EAAiB,KAAK,IAAI,IAAKD,EAAiB,EAAG,EAEzD,IAAIE,EAEJ,GAAIL,GAAkBE,EAAa,CAE/B,MAAMI,EAAkBN,EAAiBE,EACnCK,EAAS,KAAK,IAAI,EAAGD,EAAkBF,CAAc,EAC3DC,EAAUZ,EAAcc,EACxB,QAAQ,IAAI,wBAAwBF,EAAU,KAAK,QAAQ,CAAC,CAAC,WAAW,CAEpF,SAAmBL,GAAkBC,EAAc,CAEvC,MAAMO,EAAmBP,EAAeD,EAClCO,EAAS,KAAK,IAAI,EAAG,EAAKC,EAAmBJ,CAAe,EAClEC,EAAUZ,EAAcc,EACxB,QAAQ,IAAI,yBAAyBF,EAAU,KAAK,QAAQ,CAAC,CAAC,WAAW,CAErF,KAAe,CAEH,MAAMI,GAAmBT,EAAiBC,GAAgBE,EAMpDO,EAAe,GAAM,GAAM,KAAK,IAAID,EAAkB,KAAK,EAAE,EACnEJ,EAAUZ,EAAciB,EACxB,QAAQ,IAAI,sBAAsBD,EAAkB,KAAK,QAAQ,CAAC,CAAC,QAAQJ,EAAU,KAAK,QAAQ,CAAC,CAAC,WAAW,CAC3H,CAEQ,OAAO,KAAK,IAAI,EAAG,KAAK,IAAIZ,EAAaY,CAAO,CAAC,CACzD,CAKI,oBAAqB,CACjB,GAAI,GAAC,KAAK,UAAY,KAAK,kBAAkB,OAAS,GAEtD,GAAI,CACA,KAAK,eAAiB,KAAK,wBAAyB,EAEpD,QAAQ,IAAI,wBAAwB,KAAK,MAAM,KAAK,cAAc,CAAC,IAAI,EAGvE,SAAW,CAACM,EAAUjB,CAAU,IAAK,KAAK,kBAAmB,CACzD,MAAMkB,EAAa,KAAK,sBAAsBlB,EAAY,KAAK,cAAc,EAG7EA,EAAW,eAAiBkB,EAGxB,KAAK,IAAI,SAASlB,EAAW,UAAU,GACvC,KAAK,IAAI,iBAAiBA,EAAW,WAAY,iBAAkBkB,CAAU,EAC7E,QAAQ,IAAI,MAAMlB,EAAW,IAAI,KAAK,KAAK,MAAM,KAAK,cAAc,CAAC,SAASkB,EAAa,KAAK,QAAQ,CAAC,CAAC,WAAW,GAErH,QAAQ,KAAK,2BAA2BlB,EAAW,UAAU,EAAE,CAEnF,CAES,OAAQH,EAAO,CACZ,QAAQ,MAAM,kCAAmCA,CAAK,CAClE,CACA,CAKI,yBAA0B,CACtB,MAAMsB,EAAU,IAAM,CAClB,KAAK,mBAAoB,EAErB,KAAK,WACL,KAAK,eAAiB,sBAAsBA,CAAO,EAE1D,EAEDA,EAAS,CACjB,CAKI,UAAW,CACP,KAAK,SAAW,GAChB,KAAK,wBAAyB,EAC9B,QAAQ,IAAI,8DAA8D,CAClF,CAKI,YAAa,CACT,KAAK,SAAW,GAEZ,KAAK,iBACL,qBAAqB,KAAK,cAAc,EACxC,KAAK,eAAiB,MAI1B,SAAW,CAACF,EAAUjB,CAAU,IAAK,KAAK,kBAClC,KAAK,IAAI,SAASA,EAAW,UAAU,GACvC,KAAK,IAAI,iBAAiBA,EAAW,WAAY,iBAAkBA,EAAW,WAAW,EAIjG,QAAQ,IAAI,iCAAiC,CACrD,CAOI,uBAAuBoB,EAAa,CAChC,GAAI,CAACA,GAAe,CAACA,EAAY,YAAa,CAC1C,QAAQ,KAAK,+DAA+D,EAC5E,MACZ,CAEQ,QAAQ,IAAI,qDAAsDA,EAAY,WAAW,EAGzFA,EAAY,YAAY,QAAQ,CAACC,EAAWC,IAAU,CAClD,MAAML,EAAW,KAAK,wBAAwBI,EAAU,KAAMC,CAAK,EAC/DL,GAAY,KAAK,YAAYA,CAAQ,IACrC,KAAK,YAAYA,CAAQ,EAAE,aAAeI,EAAU,KACpD,KAAK,YAAYJ,CAAQ,EAAE,YAAcI,EAAU,IACnD,KAAK,YAAYJ,CAAQ,EAAE,SAAWI,EAAU,UAAY,MAE5D,QAAQ,IAAI,cAAcJ,CAAQ,KAAKI,EAAU,IAAI,IAAIA,EAAU,GAAG,OAAOA,EAAU,IAAI,GAAG,EAE9G,CAAS,EAGD,KAAK,mBAAoB,CACjC,CAKI,wBAAwBE,EAAWD,EAAO,CAQtC,MANgB,CACZ,IAAOA,IAAU,EAAI,aAAe,aACpC,IAAOA,IAAU,EAAI,aAAe,aACpC,IAAO,aACP,IAAO,YACV,EACcC,CAAS,IAAMD,IAAU,EAAI,aAAe,aACnE,CACI,WAAY,CACR,MAAO,CACH,SAAU,KAAK,SACf,eAAgB,KAAK,MAAM,KAAK,cAAc,EAC9C,kBAAmB,MAAM,KAAK,KAAK,kBAAkB,KAAI,CAAE,EAC3D,eAAgB,MAAM,KAAK,KAAK,kBAAkB,SAAS,EAAE,IAAI,CAAC,CAACE,EAAKC,CAAK,KAAO,CAChF,KAAMA,EAAM,KACZ,QAAS,KAAK,MAAMA,EAAM,eAAiB,GAAG,EAC9C,cAAe,GAAGA,EAAM,YAAY,IAAIA,EAAM,WAAW,IACzE,EAAc,CACL,CACT,CACA,CAKI,OAAO,OAAW,MAClB,OAAO,mBAAqB9B,EAC5B,QAAQ,IAAI,8DAA8D"}