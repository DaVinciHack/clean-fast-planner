{"version":3,"mappings":"sHAOA,MAAMA,CAAkB,CAOtB,aAAa,cAAcC,EAAUC,EAAa,KAAM,CACtD,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,sCAAsC,EAGxD,GAAI,CACF,QAAQ,IAAI,oDAAoDA,CAAQ,EAAE,EAGtEC,GACFA,EAAW,CACT,KAAM,OACN,QAAS,gCACT,OAAQ,0CACR,SAAU,CACpB,CAAS,EAIH,MAAMC,EAAM,MAAM,KAAK,OAAQ,EAE3BD,GACFA,EAAW,CACT,KAAM,OACN,QAAS,iCACT,OAAQ,sDACR,SAAU,EACpB,CAAS,EAIH,MAAM,IAAI,QAAQE,GAAW,WAAWA,EAAS,GAAI,CAAC,EAElDF,GACFA,EAAW,CACT,KAAM,OACN,QAAS,qCACT,OAAQ,yBAAyBD,CAAQ,GACzC,SAAU,EACpB,CAAS,EAIH,MAAMI,EAAS,MAAMC,EAAOH,EAAI,sBAAsB,EAAE,YACtD,CAAE,SAAUF,CAAQ,CAErB,EAED,OAAIC,GACFA,EAAW,CACT,KAAM,OACN,QAAS,gCACT,OAAQ,wCACR,SAAU,EACpB,CAAS,EAIH,MAAM,IAAI,QAAQE,GAAW,WAAWA,EAAS,GAAG,CAAC,EAEjDF,GACFA,EAAW,CACT,KAAM,YACN,QAAS,oCACT,OAAQ,+DACR,SAAU,IACV,OAAAG,CACV,CAAS,EAGH,QAAQ,IAAI,yBAA0BA,CAAM,EACrCA,CACR,OAAQE,EAAO,CACd,cAAQ,MAAM,qBAAsBA,CAAK,EAErCL,GACFA,EAAW,CACT,KAAM,QACN,QAAS,oBACT,OAAQ,KAAK,mBAAmBK,CAAK,EACrC,SAAU,EACV,MAAAA,CACV,CAAS,EAGGA,CACZ,CACA,CAME,aAAa,QAAS,CACpB,GAAI,CACF,OAAO,MAAKC,EAAA,IAAC,OAAO,4BAAiB,EAAC,KAAAC,KAAA,MACvC,OAAQF,EAAO,CACd,cAAQ,MAAM,uBAAwBA,CAAK,EACrC,IAAI,MAAM,yBAAyBA,EAAM,OAAO,EAAE,CAC9D,CACA,CAOE,OAAO,mBAAmBA,EAAO,CAC/B,GAAI,CAACA,EAAO,MAAO,yBAEnB,MAAMG,EAAUH,EAAM,SAAW,GAEjC,OAAIG,EAAQ,SAAS,KAAK,GAAKA,EAAQ,SAAS,cAAc,EACrD,mEAGLA,EAAQ,SAAS,KAAK,GAAKA,EAAQ,SAAS,WAAW,EAClD,qEAGLA,EAAQ,SAAS,KAAK,GAAKA,EAAQ,SAAS,aAAa,EACpD,gIAGF,6BAA6BA,CAAO,EAC/C,CACA","names":["AutomationService","flightId","onProgress","sdk","resolve","result","client","error","__vitePreload","n","message"],"ignoreList":[],"sources":["../../src/components/fast-planner/services/AutomationService.js"],"sourcesContent":["/**\n * AutomationService.js\n * \n * Service for handling flight automation in Palantir\n */\nimport client from '../../../client';\n\nclass AutomationService {\n  /**\n   * Run automation for a flight\n   * @param {string} flightId - The ID of the flight to automate\n   * @param {Function} onProgress - Optional callback for progress updates\n   * @returns {Promise<Object>} - The result of the automation\n   */\n  static async runAutomation(flightId, onProgress = null) {\n    if (!flightId) {\n      throw new Error('Flight ID is required for automation');\n    }\n    \n    try {\n      console.log(`AutomationService: Running automation for flight ${flightId}`);\n      \n      // Report initial progress\n      if (onProgress) {\n        onProgress({\n          type: 'step',\n          message: 'Starting flight automation...',\n          detail: 'Initializing Palantir automation system',\n          progress: 0\n        });\n      }\n      \n      // Import the SDK\n      const sdk = await this.getSDK();\n      \n      if (onProgress) {\n        onProgress({\n          type: 'step',\n          message: 'Connecting to Palantir Foundry',\n          detail: 'Establishing secure connection to automation engine',\n          progress: 10\n        });\n      }\n      \n      // Add a small delay to show the connection message\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      if (onProgress) {\n        onProgress({\n          type: 'step',\n          message: 'Running Palantir Flight Automation',\n          detail: `Processing flight ID: ${flightId}`,\n          progress: 20\n        });\n      }\n      \n      // CRITICAL: Don't pass any options parameter\n      const result = await client(sdk.singleFlightAutomation).applyAction(\n        { flightId: flightId }\n        // No options parameter - this is the key difference!\n      );\n      \n      if (onProgress) {\n        onProgress({\n          type: 'step',\n          message: 'Processing automation results',\n          detail: 'Validating and formatting flight data',\n          progress: 90\n        });\n      }\n      \n      // Add a brief delay to show processing\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      if (onProgress) {\n        onProgress({\n          type: 'completed',\n          message: 'Automation completed successfully',\n          detail: 'Flight automation finished - preparing to reload flight data',\n          progress: 100,\n          result\n        });\n      }\n      \n      console.log('Automation successful!', result);\n      return result;\n    } catch (error) {\n      console.error('Automation failed:', error);\n      \n      if (onProgress) {\n        onProgress({\n          type: 'error',\n          message: 'Automation failed',\n          detail: this.formatErrorMessage(error),\n          progress: 0,\n          error\n        });\n      }\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Import the SDK dynamically\n   * @returns {Object} - The SDK object\n   */\n  static async getSDK() {\n    try {\n      return await import('@flight-app/sdk');\n    } catch (error) {\n      console.error('Error importing SDK:', error);\n      throw new Error(`Failed to import SDK: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Format error message for the user\n   * @param {Error} error - The error object\n   * @returns {string} - A user-friendly error message\n   */\n  static formatErrorMessage(error) {\n    if (!error) return 'Unknown error occurred';\n    \n    const message = error.message || '';\n    \n    if (message.includes('401') || message.includes('unauthorized')) {\n      return 'Authentication error: You need to log in again to run automation';\n    }\n    \n    if (message.includes('404') || message.includes('not found')) {\n      return 'API endpoint not found: The automation action may not be available';\n    }\n    \n    if (message.includes('400') || message.includes('Bad Request')) {\n      return 'API request error (400): The server rejected the automation request. The flight might not be in a valid state for automation.';\n    }\n    \n    return `Error running automation: ${message}`;\n  }\n}\n\nexport default AutomationService;"],"file":"assets/AutomationService-BBCPcxcK.js"}