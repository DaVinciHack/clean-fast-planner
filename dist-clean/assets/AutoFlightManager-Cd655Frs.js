class g{constructor(t,i){if(!t)throw new Error("‚ùå AutoFlightManager requires a valid map instance");(!t.isStyleLoaded||!t.isStyleLoaded())&&console.warn("‚ö†Ô∏è Map style not loaded yet - AutoFlight may not work correctly"),this.map=t,this.controls=i,this.isFlying=!1,this.isPaused=!1,this.currentWaypointIndex=0,this.flightProgress=0,this.animationFrame=null,this.hasError=!1,this.config={speedMultiplier:5,cruiseAltitude:3e3,climbRate:500,turnRate:2,groundSpeed:120,frameRate:60},this.route={waypoints:[],totalDistance:0,estimatedTime:0,currentPosition:null,currentAltitude:0,currentHeading:0},this.state={phase:"PREFLIGHT",startTime:null,elapsedTime:0,simulatedTime:0,fuelRemaining:100},console.log("üõ©Ô∏è AutoFlight Manager initialized - Ready for automatic flight simulation!")}loadRoute(t){if(console.log("üõ©Ô∏è Loading route with waypoints:",t),!t||t.length<2)return console.error("‚ùå Need at least 2 waypoints for flight route, got:",(t==null?void 0:t.length)||0),!1;const i=t.filter(e=>{const o=e.lat!==void 0||e.latitude!==void 0,s=e.lng!==void 0||e.longitude!==void 0||e.lon!==void 0;return!o||!s?(console.warn("‚ö†Ô∏è Invalid waypoint (missing coordinates):",e),!1):!0});return i.length<2?(console.error("‚ùå Not enough valid waypoints after validation:",i.length),!1):(this.route.waypoints=i.map((e,o)=>({lat:e.lat||e.latitude,lng:e.lng||e.longitude||e.lon,name:e.name||`WP${o+1}`,altitude:e.altitude||this.config.cruiseAltitude,index:o})),console.log("üõ©Ô∏è Processed waypoints:",this.route.waypoints),this.calculateRouteMetrics(),this.route.currentPosition={...this.route.waypoints[0]},this.route.currentAltitude=this.route.waypoints[0].altitude,this.currentWaypointIndex=0,this.flightProgress=0,console.log(`‚úÖ Route loaded: ${this.route.waypoints.length} waypoints, ${this.route.totalDistance.toFixed(1)}NM, ~${this.route.estimatedTime.toFixed(0)} minutes`),console.log(`üõ©Ô∏è Route: ${this.route.waypoints.map(e=>e.name).join(" ‚Üí ")}`),console.log("üõ©Ô∏è Route ready for flight simulation"),!0)}calculateRouteMetrics(){this.route.totalDistance=0;for(let t=0;t<this.route.waypoints.length-1;t++){const i=this.route.waypoints[t],e=this.route.waypoints[t+1],o=this.calculateDistance(i.lat,i.lng,e.lat,e.lng);this.route.totalDistance+=o}this.route.estimatedTime=this.route.totalDistance/this.config.groundSpeed*60}startFlight(){if(console.log("üõ©Ô∏è Starting auto flight..."),!this.route.waypoints.length)return console.error("‚ùå No route loaded for flight"),this.hasError=!0,!1;if(this.isFlying)return console.warn("‚ö†Ô∏è Flight already in progress"),!1;if(!this.map||!this.map.isStyleLoaded())return console.error("‚ùå Map not ready for flight simulation"),this.hasError=!0,!1;try{this.isFlying=!0,this.isPaused=!1,this.hasError=!1,this.state.phase="TAKEOFF",this.state.startTime=Date.now(),(this.currentWaypointIndex===void 0||this.currentWaypointIndex===null)&&(this.currentWaypointIndex=0,this.flightProgress=0),console.log(`üõ©Ô∏è Starting flight from waypoint ${this.currentWaypointIndex+1}, progress: ${Math.round(this.flightProgress*100)}%`),console.log(`üõ´ Starting flight with ${this.route.waypoints.length} waypoints`),console.log(`üõ´ Route: ${this.route.waypoints.map(i=>i.name).join(" ‚Üí ")}`);let t;return this.route.currentPosition?(t=this.route.currentPosition,console.log("üõ´ Moving camera to current position:",t)):(t={lat:this.route.waypoints[0].lat,lng:this.route.waypoints[0].lng},this.route.currentPosition=t,console.log("üõ´ Moving camera to departure:",t)),this.map.easeTo({center:[t.lng,t.lat],zoom:12,pitch:45,bearing:this.calculateInitialHeading(),duration:2e3}),setTimeout(()=>{this.isFlying&&!this.hasError&&(console.log("üõ´ Starting flight animation..."),this.startFlightAnimation())},2500),console.log("‚úÖ Flight started! Automatic navigation engaged."),this.updateFlightPanel(),!0}catch(t){return console.error("‚ùå Error starting flight:",t),this.hasError=!0,this.isFlying=!1,!1}}togglePause(){this.isPaused=!this.isPaused,console.log(`${this.isPaused?"‚è∏Ô∏è Flight paused":"‚ñ∂Ô∏è Flight resumed"}`),this.updateFlightPanel()}stopFlight(){this.isFlying=!1,this.isPaused=!1,this.animationFrame&&(cancelAnimationFrame(this.animationFrame),this.animationFrame=null),this.state.phase="LANDED",console.log("üõ¨ Flight stopped"),this.updateFlightPanel()}setFlightProgress(t){if(!this.route.waypoints.length)return;console.log(`üõ©Ô∏è Setting flight progress to ${t}%`);const i=t/100*(this.route.waypoints.length-1);if(this.currentWaypointIndex=Math.floor(i),this.flightProgress=i-this.currentWaypointIndex,this.currentWaypointIndex>=this.route.waypoints.length-1&&(this.currentWaypointIndex=this.route.waypoints.length-2,this.flightProgress=1),this.currentWaypointIndex<this.route.waypoints.length-1){const e=this.route.waypoints[this.currentWaypointIndex],o=this.route.waypoints[this.currentWaypointIndex+1],s=e.lat+(o.lat-e.lat)*this.flightProgress,n=e.lng+(o.lng-e.lng)*this.flightProgress,a=e.altitude+(o.altitude-e.altitude)*this.flightProgress;this.route.currentPosition={lat:s,lng:n},this.route.currentAltitude=a,this.map&&this.map.isStyleLoaded()&&this.map.easeTo({center:[n,s],duration:1e3})}console.log(`üõ©Ô∏è Jumped to waypoint ${this.currentWaypointIndex+1}/${this.route.waypoints.length}, progress: ${Math.round(this.flightProgress*100)}%`)}startFlightAnimation(){const t=()=>{if(!this.isFlying||this.hasError){console.log("üõ©Ô∏è Animation stopped - flying:",this.isFlying,"error:",this.hasError);return}try{this.isPaused||(this.updateFlightPosition(),this.updateCamera(),this.updateFlightState()),this.updateFlightPanel(),this.animationFrame=requestAnimationFrame(t)}catch(i){console.error("‚ùå Error in flight animation:",i),this.hasError=!0,this.stopFlight()}};t()}updateFlightPosition(){const t=1e3/this.config.frameRate*this.config.speedMultiplier;if(this.currentWaypointIndex>=this.route.waypoints.length-1){this.completeFlight();return}const i=this.route.waypoints[this.currentWaypointIndex],e=this.route.waypoints[this.currentWaypointIndex+1],o=this.calculateDistance(i.lat,i.lng,e.lat,e.lng),a=this.config.groundSpeed/(60*60*1e3)*t/o;if(this.flightProgress+=a,this.flightProgress>=1)this.currentWaypointIndex++,this.flightProgress=0,this.currentWaypointIndex<this.route.waypoints.length&&console.log(`üìç Reached waypoint: ${this.route.waypoints[this.currentWaypointIndex].name}`);else{const l=this.lerp(i.lat,e.lat,this.flightProgress),h=this.lerp(i.lng,e.lng,this.flightProgress),u=this.lerp(i.altitude,e.altitude,this.flightProgress);this.route.currentPosition={lat:l,lng:h},this.route.currentAltitude=u,this.route.currentHeading=this.calculateBearing(i.lat,i.lng,e.lat,e.lng)}this.state.elapsedTime=(Date.now()-this.state.startTime)/1e3,this.state.simulatedTime=this.state.elapsedTime*this.config.speedMultiplier;const r=this.route.estimatedTime*60;this.state.fuelRemaining=Math.max(0,100-this.state.simulatedTime/r*100)}updateCamera(){if(!(!this.route.currentPosition||!this.map))try{const t=this.altitudeToZoom(this.route.currentAltitude+2e3);if(this.map.easeTo({center:[this.route.currentPosition.lng,this.route.currentPosition.lat],zoom:t,bearing:this.route.currentHeading,pitch:60,duration:100}),window.threeDCloudManager&&window.threeDCloudManager.isActive)try{window.threeDCloudManager.cameraAltitude=this.route.currentAltitude,window.threeDCloudManager.updateCloudOpacity()}catch(i){console.warn("‚ö†Ô∏è 3D cloud update error:",i)}}catch(t){console.error("‚ùå Camera update error:",t)}}updateFlightState(){const t=(this.currentWaypointIndex+this.flightProgress)/(this.route.waypoints.length-1)*100;t<5?this.state.phase="TAKEOFF":t<95?this.state.phase="CRUISE":this.state.phase="APPROACH"}completeFlight(){this.isFlying=!1,this.state.phase="LANDED";const t=this.route.waypoints[this.route.waypoints.length-1];this.map.easeTo({center:[t.lng,t.lat],zoom:14,pitch:30,bearing:0,duration:3e3}),console.log("üõ¨ Flight completed! Welcome to your destination."),this.updateFlightPanel()}createFlightPanel(){console.log("üõ©Ô∏è Flight panel creation handled by React component")}updateFlightPanel(){console.log("üõ©Ô∏è Flight panel update: React component handles display")}calculateDistance(t,i,e,o){const n=(e-t)*Math.PI/180,a=(o-i)*Math.PI/180,r=Math.sin(n/2)*Math.sin(n/2)+Math.cos(t*Math.PI/180)*Math.cos(e*Math.PI/180)*Math.sin(a/2)*Math.sin(a/2);return 3440.065*(2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)))}calculateBearing(t,i,e,o){const s=(o-i)*Math.PI/180,n=Math.sin(s)*Math.cos(e*Math.PI/180),a=Math.cos(t*Math.PI/180)*Math.sin(e*Math.PI/180)-Math.sin(t*Math.PI/180)*Math.cos(e*Math.PI/180)*Math.cos(s);return(Math.atan2(n,a)*180/Math.PI+360)%360}calculateInitialHeading(){return this.route.waypoints.length<2?0:this.calculateBearing(this.route.waypoints[0].lat,this.route.waypoints[0].lng,this.route.waypoints[1].lat,this.route.waypoints[1].lng)}altitudeToZoom(t){return Math.max(8,Math.min(16,18-Math.log2(t/1e3)))}lerp(t,i,e){return t+(i-t)*e}removeFlightPanel(){console.log("üõ©Ô∏è Flight panel removal handled by React component")}debugStatus(){var t,i;console.log("üõ©Ô∏è ===== AUTO FLIGHT DEBUG STATUS ====="),console.log("Map instance:",this.map),console.log("Map style loaded:",(i=(t=this.map)==null?void 0:t.isStyleLoaded)==null?void 0:i.call(t)),console.log("Is flying:",this.isFlying),console.log("Is paused:",this.isPaused),console.log("Has error:",this.hasError),console.log("Route waypoints:",this.route.waypoints.length),console.log("Current waypoint index:",this.currentWaypointIndex),console.log("Flight progress:",this.flightProgress),console.log("Current position:",this.route.currentPosition),console.log("Flight state:",this.state),console.log("Animation frame:",this.animationFrame),console.log("Flight panel exists:",!!document.getElementById("auto-flight-panel")),console.log("üõ©Ô∏è ===== END DEBUG STATUS =====")}destroy(){this.stopFlight(),this.removeFlightPanel()}}typeof window<"u"&&(window.AutoFlightManager=g,console.log("üõ©Ô∏è AutoFlight Manager available at: window.AutoFlightManager"),window.debugAutoFlight=()=>{window.autoFlightManager?window.autoFlightManager.debugStatus():(console.log("üõ©Ô∏è No active auto flight manager found"),console.log("üõ©Ô∏è Available:",{AutoFlightManager:!!window.AutoFlightManager,mapManager:!!window.mapManager,enhanced3DControls:!!window.enhanced3DControls}))});export{g as default};
