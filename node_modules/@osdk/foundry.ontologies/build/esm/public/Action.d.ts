import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
import type * as _Ontologies from "../_components.js";
/**
 * Applies an action using the given parameters.
 *
 * Changes to objects or links stored in Object Storage V1 are eventually consistent and may take some time to be visible.
 * Edits to objects or links in Object Storage V2 will be visible immediately after the action completes.
 *
 * Note that [parameter default values](https://www.palantir.com/docs/foundry/action-types/parameters-default-value/) are not currently supported by
 * this endpoint.
 *
 * Third-party applications using this endpoint via OAuth2 must request the
 * following operation scopes: `api:ontologies-read api:ontologies-write`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read, api:ontologies-write]
 * URL: /v2/ontologies/{ontology}/actions/{action}/apply
 */
export declare function apply($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    action: _Ontologies.ActionTypeApiName,
    $body: _Ontologies.ApplyActionRequestV2,
    $queryParams?: {
        artifactRepository?: _Ontologies.ArtifactRepositoryRid | undefined;
        packageName?: _Ontologies.SdkPackageName | undefined;
    }
]): Promise<_Ontologies.SyncApplyActionResponseV2>;
/**
 * Applies an action using the given parameters.
 *
 * Changes to objects or links stored in Object Storage V1 are eventually consistent and may take some time to be visible.
 * Edits to objects or links in Object Storage V2 will be visible immediately after the action completes.
 *
 * Note that [parameter default values](https://www.palantir.com/docs/foundry/action-types/parameters-default-value/) are not currently supported by
 * this endpoint.
 *
 * Third-party applications using this endpoint via OAuth2 must request the
 * following operation scopes: `api:ontologies-read api:ontologies-write`.
 *
 * @alpha
 *
 * Required Scopes: [api:ontologies-read, api:ontologies-write]
 * URL: /v2/ontologies/{ontology}/actions/{action}/applyAsync
 */
export declare function applyAsync($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    action: _Ontologies.ActionTypeApiName,
    $body: _Ontologies.AsyncApplyActionRequestV2,
    $queryParams?: {
        artifactRepository?: _Ontologies.ArtifactRepositoryRid | undefined;
        packageName?: _Ontologies.SdkPackageName | undefined;
    }
]): Promise<_Ontologies.AsyncApplyActionResponseV2>;
/**
 * Applies multiple actions (of the same Action Type) using the given parameters.
 *
 * Changes to objects or links stored in Object Storage V1 are eventually consistent and may take some time to be visible.
 * Edits to objects or links in Object Storage V2 will be visible immediately after the action completes.
 *
 * Up to 20 actions may be applied in one call. Actions that only modify objects in Object Storage v2 and do not
 * call Functions may receive a higher limit.
 *
 * Note that [notifications](https://www.palantir.com/docs/foundry/action-types/notifications/) are not currently supported by this endpoint.
 *
 * Third-party applications using this endpoint via OAuth2 must request the
 * following operation scopes: `api:ontologies-read api:ontologies-write`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read, api:ontologies-write]
 * URL: /v2/ontologies/{ontology}/actions/{action}/applyBatch
 */
export declare function applyBatch($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    action: _Ontologies.ActionTypeApiName,
    $body: _Ontologies.BatchApplyActionRequestV2,
    $queryParams?: {
        artifactRepository?: _Ontologies.ArtifactRepositoryRid | undefined;
        packageName?: _Ontologies.SdkPackageName | undefined;
    }
]): Promise<_Ontologies.BatchApplyActionResponseV2>;
//# sourceMappingURL=Action.d.ts.map