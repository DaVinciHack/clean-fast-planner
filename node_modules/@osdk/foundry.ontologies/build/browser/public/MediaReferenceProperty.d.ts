import type * as _Core from "@osdk/foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
import type * as _Ontologies from "../_components.js";
/**
 * Gets the content of a media item referenced by this property.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scopes: `api:ontologies-read`.
 *
 * @beta
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/media/{property}/content
 */
export declare function getMediaContent($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    objectType: _Ontologies.ObjectTypeApiName,
    primaryKey: _Ontologies.PropertyValueEscapedString,
    property: _Ontologies.PropertyApiName,
    $queryParams?: {
        sdkPackageRid?: _Ontologies.SdkPackageRid | undefined;
        sdkVersion?: _Ontologies.SdkVersion | undefined;
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<Response>;
/**
 * Gets metadata about the media item referenced by this property.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scopes: `api:ontologies-read`.
 *
 * @alpha
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/media/{property}/metadata
 */
export declare function getMediaMetadata($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    objectType: _Ontologies.ObjectTypeApiName,
    primaryKey: _Ontologies.PropertyValueEscapedString,
    property: _Ontologies.PropertyApiName,
    $queryParams?: {
        sdkPackageRid?: _Ontologies.SdkPackageRid | undefined;
        sdkVersion?: _Ontologies.SdkVersion | undefined;
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Ontologies.MediaMetadata>;
/**
 * Uploads a media item to the media set which backs the specified property.  The property must be backed by a single media set and branch, otherwise an error will be thrown.
 * The body of the request must contain the binary content of the file and the `Content-Type` header must be `application/octet-stream`.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scopes: `api:ontologies-read api:ontologies-write`.
 *
 * @beta
 *
 * Required Scopes: [api:ontologies-read, api:ontologies-write]
 * URL: /v2/ontologies/{ontology}/objectTypes/{objectType}/media/{property}/upload
 */
export declare function upload($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    objectType: _Ontologies.ObjectTypeApiName,
    property: _Ontologies.PropertyApiName,
    $body: Blob,
    $queryParams?: {
        mediaItemPath?: _Core.MediaItemPath | undefined;
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Core.MediaReference>;
/**
 * Uploads a media item for use by the specified action. If the media item isn't persisted by the associated action within 1 hour, the item will be deleted.
 *
 * The body of the request must contain the binary content of the file and the `Content-Type` header must be `application/octet-stream`.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scopes: `api:ontologies-read api:ontologies-write`.
 *
 * @alpha
 *
 * Required Scopes: [api:ontologies-read, api:ontologies-write]
 * URL: /v2/ontologies/{ontology}/actions/{actionType}/media/upload
 */
export declare function uploadMedia($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    actionType: _Ontologies.ActionTypeApiName,
    $body: Blob,
    $queryParams?: {
        mediaItemPath?: _Core.MediaItemPath | undefined;
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Core.MediaReference>;
//# sourceMappingURL=MediaReferenceProperty.d.ts.map