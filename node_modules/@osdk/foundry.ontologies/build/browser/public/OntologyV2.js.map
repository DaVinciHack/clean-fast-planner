{"version":3,"file":"OntologyV2.js","names":["foundryPlatformFetch","$foundryPlatformFetch","_list","list","$ctx","args","_get","get","_getFullMetadata","getFullMetadata","_loadMetadata","loadMetadata"],"sources":["OntologyV2.js"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { foundryPlatformFetch as $foundryPlatformFetch } from \"@osdk/shared.net.platformapi\";\n//\nconst _list = [0, \"/v2/ontologies\"];\n/**\n * Lists the Ontologies visible to the current user.\n *\n * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n *\n * @public\n *\n * Required Scopes: [api:ontologies-read]\n * URL: /v2/ontologies\n */\nexport function list($ctx, ...args) {\n    return $foundryPlatformFetch($ctx, _list, ...args);\n}\nconst _get = [0, \"/v2/ontologies/{0}\"];\n/**\n * Gets a specific ontology with the given Ontology RID.\n *\n * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.\n *\n * @public\n *\n * Required Scopes: [api:ontologies-read]\n * URL: /v2/ontologies/{ontology}\n */\nexport function get($ctx, ...args) {\n    return $foundryPlatformFetch($ctx, _get, ...args);\n}\nconst _getFullMetadata = [0, \"/v2/ontologies/{0}/fullMetadata\", 2];\n/**\n * Get the full Ontology metadata. This includes the objects, links, actions, queries, and interfaces.\n *\n * @beta\n *\n * Required Scopes: [api:ontologies-read]\n * URL: /v2/ontologies/{ontology}/fullMetadata\n */\nexport function getFullMetadata($ctx, ...args) {\n    return $foundryPlatformFetch($ctx, _getFullMetadata, ...args);\n}\nconst _loadMetadata = [1, \"/v2/ontologies/{0}/metadata\", 3];\n/**\n * Load Ontology metadata for the requested object, link, action, query, and interface types.\n *\n * @alpha\n *\n * Required Scopes: [api:ontologies-read]\n * URL: /v2/ontologies/{ontology}/metadata\n */\nexport function loadMetadata($ctx, ...args) {\n    return $foundryPlatformFetch($ctx, _loadMetadata, ...args);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAoB,IAAIC,qBAAqB,QAAQ,8BAA8B;AAC5F;AACA,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,gBAAgB,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,IAAI,EAAE,GAAGC,IAAI,EAAE;EAChC,OAAOJ,qBAAqB,CAACG,IAAI,EAAEF,KAAK,EAAE,GAAGG,IAAI,CAAC;AACtD;AACA,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACH,IAAI,EAAE,GAAGC,IAAI,EAAE;EAC/B,OAAOJ,qBAAqB,CAACG,IAAI,EAAEE,IAAI,EAAE,GAAGD,IAAI,CAAC;AACrD;AACA,MAAMG,gBAAgB,GAAG,CAAC,CAAC,EAAE,iCAAiC,EAAE,CAAC,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACL,IAAI,EAAE,GAAGC,IAAI,EAAE;EAC3C,OAAOJ,qBAAqB,CAACG,IAAI,EAAEI,gBAAgB,EAAE,GAAGH,IAAI,CAAC;AACjE;AACA,MAAMK,aAAa,GAAG,CAAC,CAAC,EAAE,6BAA6B,EAAE,CAAC,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACP,IAAI,EAAE,GAAGC,IAAI,EAAE;EACxC,OAAOJ,qBAAqB,CAACG,IAAI,EAAEM,aAAa,EAAE,GAAGL,IAAI,CAAC;AAC9D","ignoreList":[]}