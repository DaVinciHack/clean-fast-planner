{"version":3,"file":"createRetryingFetch.js","names":["PalantirApiError","fetchRetry","INITIAL_DELAY","JITTER_FACTOR","MAX_RETRIES","createRetryingFetch","fetch","retryDelay","attempt","delay","jitter","Math","random","retryOn","error","response","status","isRetryable","e","statusCode","SERVICE_UNAVAILABLE","TOO_MANY_REQUESTS"],"sources":["createRetryingFetch.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PalantirApiError } from \"@osdk/shared.net.errors\";\nimport type { RequestInitRetryParams } from \"fetch-retry\";\nimport fetchRetry from \"fetch-retry\";\n\nconst INITIAL_DELAY = 1_000;\nconst JITTER_FACTOR = 0.5;\nconst MAX_RETRIES = 3;\n\nexport function createRetryingFetch(\n  fetch: typeof globalThis.fetch,\n): (\n  input: RequestInfo | URL,\n  init?:\n    | (\n      & RequestInit\n      & RequestInitRetryParams<typeof globalThis.fetch>\n    )\n    | undefined,\n) => ReturnType<typeof globalThis.fetch> {\n  return fetchRetry(fetch, {\n    retryDelay(attempt) {\n      const delay = INITIAL_DELAY * 2 ** attempt;\n      const jitter = delay * JITTER_FACTOR * (Math.random() * 2 - 1);\n      return delay + jitter;\n    },\n    retryOn(attempt, error, response) {\n      const status = response?.status ?? 0;\n      return (\n        !(status >= 200 && status < 300)\n        && isRetryable(error)\n        && attempt < MAX_RETRIES\n      );\n    },\n  });\n}\n\nfunction isRetryable(e: any): boolean {\n  if (e instanceof PalantirApiError) {\n    if (\n      e.statusCode !== SERVICE_UNAVAILABLE\n      && e.statusCode !== TOO_MANY_REQUESTS\n    ) {\n      return false;\n    }\n  }\n  return true; // I think this logic is flawed?\n}\n\nconst SERVICE_UNAVAILABLE = 503;\nconst TOO_MANY_REQUESTS = 429;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAgB,QAAQ,yBAAyB;AAE1D,OAAOC,UAAU,MAAM,aAAa;AAEpC,MAAMC,aAAa,GAAG,KAAK;AAC3B,MAAMC,aAAa,GAAG,GAAG;AACzB,MAAMC,WAAW,GAAG,CAAC;AAErB,OAAO,SAASC,mBAAmBA,CACjCC,KAA8B,EASS;EACvC,OAAOL,UAAU,CAACK,KAAK,EAAE;IACvBC,UAAUA,CAACC,OAAO,EAAE;MAClB,MAAMC,KAAK,GAAGP,aAAa,GAAG,CAAC,IAAIM,OAAO;MAC1C,MAAME,MAAM,GAAGD,KAAK,GAAGN,aAAa,IAAIQ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC9D,OAAOH,KAAK,GAAGC,MAAM;IACvB,CAAC;IACDG,OAAOA,CAACL,OAAO,EAAEM,KAAK,EAAEC,QAAQ,EAAE;MAChC,MAAMC,MAAM,GAAGD,QAAQ,EAAEC,MAAM,IAAI,CAAC;MACpC,OACE,EAAEA,MAAM,IAAI,GAAG,IAAIA,MAAM,GAAG,GAAG,CAAC,IAC7BC,WAAW,CAACH,KAAK,CAAC,IAClBN,OAAO,GAAGJ,WAAW;IAE5B;EACF,CAAC,CAAC;AACJ;AAEA,SAASa,WAAWA,CAACC,CAAM,EAAW;EACpC,IAAIA,CAAC,YAAYlB,gBAAgB,EAAE;IACjC,IACEkB,CAAC,CAACC,UAAU,KAAKC,mBAAmB,IACjCF,CAAC,CAACC,UAAU,KAAKE,iBAAiB,EACrC;MACA,OAAO,KAAK;IACd;EACF;EACA,OAAO,IAAI,CAAC,CAAC;AACf;AAEA,MAAMD,mBAAmB,GAAG,GAAG;AAC/B,MAAMC,iBAAiB,GAAG,GAAG","ignoreList":[]}