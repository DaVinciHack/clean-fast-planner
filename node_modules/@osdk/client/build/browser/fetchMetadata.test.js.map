{"version":3,"file":"fetchMetadata.test.js","names":["$Actions","$Interfaces","$Objects","$Queries","LegacyFauxFoundry","startNodeApiServer","beforeAll","describe","expect","expectTypeOf","it","createClient","client","testSetup","apiServer","close","objectMetadata","fetchMetadata","Employee","toEqualTypeOf","toMatchInlineSnapshot","interfaceMetadata","FooInterface","actionMetadata","moveOffice","queryMetadata","queryAcceptsObject"],"sources":["fetchMetadata.test.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ActionMetadata,\n  InterfaceMetadata,\n  ObjectMetadata,\n  QueryMetadata,\n} from \"@osdk/api\";\nimport {\n  $Actions,\n  $Interfaces,\n  $Objects,\n  $Queries,\n} from \"@osdk/client.test.ontology\";\nimport { LegacyFauxFoundry, startNodeApiServer } from \"@osdk/shared.test\";\nimport { beforeAll, describe, expect, expectTypeOf, it } from \"vitest\";\nimport type { Client } from \"./Client.js\";\nimport { createClient } from \"./createClient.js\";\n\ndescribe(\"FetchMetadata\", () => {\n  let client: Client;\n\n  beforeAll(() => {\n    const testSetup = startNodeApiServer(new LegacyFauxFoundry(), createClient);\n    ({ client } = testSetup);\n    return () => {\n      testSetup.apiServer.close();\n    };\n  });\n\n  it(\"fetches object metadata correctly\", async () => {\n    const objectMetadata = await client.fetchMetadata($Objects.Employee);\n\n    expectTypeOf(objectMetadata).toEqualTypeOf<\n      ObjectMetadata\n    >();\n\n    expect(objectMetadata).toMatchInlineSnapshot(`\n      {\n        \"apiName\": \"Employee\",\n        \"description\": \"A full-time or part-time \n\n       employee of our firm\",\n        \"displayName\": \"Employee\",\n        \"icon\": {\n          \"color\": \"blue\",\n          \"name\": \"person\",\n          \"type\": \"blueprint\",\n        },\n        \"implements\": [\n          \"FooInterface\",\n        ],\n        \"interfaceMap\": {\n          \"FooInterface\": {\n            \"fooSpt\": \"fullName\",\n          },\n        },\n        \"inverseInterfaceMap\": {\n          \"FooInterface\": {\n            \"fullName\": \"fooSpt\",\n          },\n        },\n        \"links\": {\n          \"lead\": {\n            \"multiplicity\": false,\n            \"targetType\": \"Employee\",\n          },\n          \"officeLink\": {\n            \"multiplicity\": false,\n            \"targetType\": \"Office\",\n          },\n          \"peeps\": {\n            \"multiplicity\": true,\n            \"targetType\": \"Employee\",\n          },\n        },\n        \"pluralDisplayName\": \"Employees\",\n        \"primaryKeyApiName\": \"employeeId\",\n        \"primaryKeyType\": \"integer\",\n        \"properties\": {\n          \"class\": {\n            \"description\": \"\",\n            \"displayName\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"string\",\n          },\n          \"employeeId\": {\n            \"description\": undefined,\n            \"displayName\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": false,\n            \"type\": \"integer\",\n          },\n          \"employeeLocation\": {\n            \"description\": \"Geotime series reference of the location of the employee\",\n            \"displayName\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"geotimeSeriesReference\",\n          },\n          \"employeeSensor\": {\n            \"description\": \"TimeSeries sensor of the status of the employee\",\n            \"displayName\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"sensorTimeseries\",\n          },\n          \"employeeStatus\": {\n            \"description\": \"TimeSeries of the status of the employee\",\n            \"displayName\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"stringTimeseries\",\n          },\n          \"fullName\": {\n            \"description\": undefined,\n            \"displayName\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"string\",\n          },\n          \"office\": {\n            \"description\": \"The unique \"ID\" of the employee's \\\\\"primary\\\\\" assigned office.\n       This is some more text.\",\n            \"displayName\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"string\",\n          },\n          \"startDate\": {\n            \"description\": \"The date the employee was hired (most recently, if they were re-hired)\",\n            \"displayName\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"datetime\",\n          },\n        },\n        \"rid\": \"ri.ontology.main.object-type.401ac022-89eb-4591-8b7e-0a912b9efb44\",\n        \"status\": \"ACTIVE\",\n        \"titleProperty\": \"fullName\",\n        \"type\": \"object\",\n        \"visibility\": \"NORMAL\",\n      }\n    `);\n  });\n\n  it(\"fetches interface metadata correctly\", async () => {\n    const interfaceMetadata = await client.fetchMetadata(\n      $Interfaces.FooInterface,\n    );\n\n    expectTypeOf(interfaceMetadata).toEqualTypeOf<\n      InterfaceMetadata\n    >();\n\n    expect(interfaceMetadata).toMatchInlineSnapshot(`\n      {\n        \"apiName\": \"FooInterface\",\n        \"description\": \"Interface for Foo\",\n        \"displayName\": \"Foo Interface\",\n        \"implementedBy\": [\n          \"Employee\",\n          \"Person\",\n        ],\n        \"implements\": [],\n        \"links\": {},\n        \"properties\": {\n          \"fooSpt\": {\n            \"description\": \"A foo\",\n            \"displayName\": \"Foo\",\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"string\",\n          },\n        },\n        \"rid\": \"ri.interface.main.interface.1\",\n        \"type\": \"interface\",\n      }\n    `);\n  });\n\n  it(\"fetches action metadata correctly\", async () => {\n    const actionMetadata = await client.fetchMetadata(\n      $Actions.moveOffice,\n    );\n\n    expectTypeOf(actionMetadata).toEqualTypeOf<ActionMetadata>();\n\n    expect(actionMetadata).toMatchInlineSnapshot(`\n      {\n        \"apiName\": \"moveOffice\",\n        \"description\": \"Update an office's physical location\",\n        \"displayName\": \"move-office\",\n        \"modifiedEntities\": {\n          \"Office\": {\n            \"created\": false,\n            \"modified\": true,\n          },\n        },\n        \"parameters\": {\n          \"newAddress\": {\n            \"description\": \"The office's new physical address (not necessarily shipping address)\",\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"string\",\n          },\n          \"newCapacity\": {\n            \"description\": \"The maximum seated-at-desk capacity of the new office (maximum fire-safe capacity may be higher)\",\n            \"multiplicity\": false,\n            \"nullable\": true,\n            \"type\": \"integer\",\n          },\n          \"officeId\": {\n            \"description\": undefined,\n            \"multiplicity\": false,\n            \"nullable\": false,\n            \"type\": \"string\",\n          },\n          \"officeNames\": {\n            \"description\": \"A list of all office names\",\n            \"multiplicity\": true,\n            \"nullable\": true,\n            \"type\": \"integer\",\n          },\n        },\n        \"rid\": \"ri.ontology.main.action-type.9f84017d-cf17-4fa8-84c3-8e01e5d594f2\",\n        \"status\": \"ACTIVE\",\n        \"type\": \"action\",\n      }\n    `);\n  });\n\n  it(\"fetches query metadata correctly\", async () => {\n    const queryMetadata = await client.fetchMetadata(\n      $Queries.queryAcceptsObject,\n    );\n\n    expectTypeOf(queryMetadata).toEqualTypeOf<QueryMetadata>();\n\n    expect(queryMetadata).toMatchInlineSnapshot(`\n      {\n        \"apiName\": \"queryAcceptsObject\",\n        \"description\": \"description of the query that takes object types\",\n        \"displayName\": \"QueryAcceptsObject\",\n        \"output\": {\n          \"nullable\": false,\n          \"object\": \"Employee\",\n          \"type\": \"object\",\n        },\n        \"parameters\": {\n          \"object\": {\n            \"description\": undefined,\n            \"nullable\": false,\n            \"object\": \"Employee\",\n            \"type\": \"object\",\n          },\n        },\n        \"rid\": \"ri.function-registry.main.function.9b55870a-63c7-4d48-8f06-9627c0805968\",\n        \"type\": \"query\",\n        \"version\": \"0.11.0\",\n      }\n    `);\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA,SACEA,QAAQ,EACRC,WAAW,EACXC,QAAQ,EACRC,QAAQ,QACH,4BAA4B;AACnC,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,mBAAmB;AACzE,SAASC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,YAAY,EAAEC,EAAE,QAAQ,QAAQ;AAEtE,SAASC,YAAY,QAAQ,mBAAmB;AAEhDJ,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9B,IAAIK,MAAc;EAElBN,SAAS,CAAC,MAAM;IACd,MAAMO,SAAS,GAAGR,kBAAkB,CAAC,IAAID,iBAAiB,CAAC,CAAC,EAAEO,YAAY,CAAC;IAC3E,CAAC;MAAEC;IAAO,CAAC,GAAGC,SAAS;IACvB,OAAO,MAAM;MACXA,SAAS,CAACC,SAAS,CAACC,KAAK,CAAC,CAAC;IAC7B,CAAC;EACH,CAAC,CAAC;EAEFL,EAAE,CAAC,mCAAmC,EAAE,YAAY;IAClD,MAAMM,cAAc,GAAG,MAAMJ,MAAM,CAACK,aAAa,CAACf,QAAQ,CAACgB,QAAQ,CAAC;IAEpET,YAAY,CAACO,cAAc,CAAC,CAACG,aAAa,CAExC,CAAC;IAEHX,MAAM,CAACQ,cAAc,CAAC,CAACI,qBAAqB,CAAC;AACjsCAAsC,EAAE,YAAY;IACrD,MAAMW,iBAAiB,GAAG,MAAMT,MAAM,CAACK,aAAa,CAClDhB,WAAW,CAACqB,YACd,CAAC;IAEDb,YAAY,CAACY,iBAAiB,CAAC,CAACF,aAAa,CAE3C,CAAC;IAEHX,MAAM,CAACa,iBAAiB,CAAC,CAACD,qBAAqB,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;EAEFV,EAAE,CAAC,mCAAmC,EAAE,YAAY;IAClD,MAAMa,cAAc,GAAG,MAAMX,MAAM,CAACK,aAAa,CAC/CjB,QAAQ,CAACwB,UACX,CAAC;IAEDf,YAAY,CAACc,cAAc,CAAC,CAACJ,aAAa,CAAiB,CAAC;IAE5DX,MAAM,CAACe,cAAc,CAAC,CAACH,qBAAqB,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;EAEFV,EAAE,CAAC,kCAAkC,EAAE,YAAY;IACjD,MAAMe,aAAa,GAAG,MAAMb,MAAM,CAACK,aAAa,CAC9Cd,QAAQ,CAACuB,kBACX,CAAC;IAEDjB,YAAY,CAACgB,aAAa,CAAC,CAACN,aAAa,CAAgB,CAAC;IAE1DX,MAAM,CAACiB,aAAa,CAAC,CAACL,qBAAqB,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}