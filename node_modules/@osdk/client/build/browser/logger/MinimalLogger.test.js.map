{"version":3,"file":"MinimalLogger.test.js","names":["beforeEach","describe","expect","it","vi","MinimalLogger","orderedLevels","consoleMocks","Object","fromEntries","map","name","spyOn","console","consoleMock","values","mockClear","logger","debug","not","toHaveBeenCalled","for","level","idx","findIndex","a","toBeGreaterThan","shouldNotOutput","slice","shouldOutput","x","levelToCheck","shouldLog","calls","mock","length"],"sources":["MinimalLogger.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MockInstance } from \"vitest\";\nimport { beforeEach, describe, expect, it, vi } from \"vitest\";\nimport { MinimalLogger } from \"./MinimalLogger.js\";\n\nconst orderedLevels = [\n  \"trace\",\n  \"debug\",\n  \"info\",\n  \"warn\",\n  \"error\",\n  \"fatal\",\n] as const;\n\ndescribe(MinimalLogger, () => {\n  const consoleTypes = [\"log\", \"error\", \"warn\", \"trace\"] as const;\n  type consoleTypes = typeof consoleTypes[number];\n\n  const consoleMocks = Object.fromEntries(\n    consoleTypes.map(name =>\n      [name, vi.spyOn(console, name)] as [consoleTypes, MockInstance<any>]\n    ),\n  ) as Record<\n    typeof consoleTypes[number],\n    MockInstance<any>\n  >;\n\n  beforeEach(() => {\n    for (const consoleMock of Object.values(consoleMocks)) {\n      consoleMock.mockClear();\n    }\n  });\n\n  it(\"does not debug log by default\", () => {\n    const logger = new MinimalLogger();\n    logger.debug(\"hi\");\n\n    for (const consoleMock of Object.values(consoleMocks)) {\n      expect(consoleMock).not.toHaveBeenCalled();\n    }\n  });\n\n  it(\"can log\", () => {\n    new MinimalLogger({}, {});\n  });\n\n  describe.for(orderedLevels)(\"For level %s\", (level) => {\n    const idx = orderedLevels.findIndex(a => a === level);\n    expect(idx).toBeGreaterThan(-1);\n\n    const shouldNotOutput = orderedLevels.slice(0, idx);\n    const shouldOutput = orderedLevels.slice(idx);\n\n    const x = [\n      ...shouldNotOutput.map(x => [x, false] as const),\n      ...shouldOutput.map(x => [x, true] as const),\n    ];\n\n    it.for(x)(\"It should log for %s? %s\", ([levelToCheck, shouldLog]) => {\n      const logger = new MinimalLogger({}, { level });\n\n      logger[levelToCheck](\"logging\");\n\n      let calls = 0;\n\n      for (const consoleMock of Object.values(consoleMocks)) {\n        calls += consoleMock.mock.calls.length;\n      }\n\n      if (shouldLog) {\n        expect(calls === 1, `Should log one time but got ${calls}`);\n      } else {\n        expect(calls === 0, \"should not call console.thing\");\n      }\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}