{"version":3,"file":"modernToLegacyWhereClause.test.js","names":["BgaoNflPlayer","objectTypeWithAllPropertyTypes","expectType","describe","expect","it","modernToLegacyWhereClause","r","$and","prop","$eq","prop2","innerProp1","type","apiName","__DefinitionMetadata","properties","displayName","links","rid","toMatchInlineSnapshot","foo","geoPoint","$within","$bbox","$distance","$of","coordinates","$polygon","geoShape","$intersects","integer","$ne","string","$containsAllTerms","term","fuzzySearch","$containsAnyTerm","address","state","city","$or","gamesPlayed","$gt","decimal"],"sources":["modernToLegacyWhereClause.test.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ObjectOrInterfaceDefinition, WhereClause } from \"@osdk/api\";\nimport {\n  BgaoNflPlayer,\n  objectTypeWithAllPropertyTypes,\n} from \"@osdk/client.test.ontology\";\nimport type { Point } from \"geojson\";\nimport { expectType } from \"ts-expect\";\nimport { describe, expect, it } from \"vitest\";\nimport { modernToLegacyWhereClause } from \"./modernToLegacyWhereClause.js\";\n\ntype ObjAllProps = objectTypeWithAllPropertyTypes;\ntype structObj = BgaoNflPlayer;\ndescribe(modernToLegacyWhereClause, () => {\n  describe(\"api namespaces\", () => {\n    describe(\"interfaces\", () => {\n      it(\"properly converts shortname to fqApiName\", () => {\n        const T = {\n          type: \"interface\",\n          apiName: \"a.Foo\",\n          __DefinitionMetadata: {\n            type: \"interface\",\n            properties: {\n              \"prop\": { type: \"integer\" },\n              \"prop2\": {\n                type: { \"innerProp1\": \"string\", \"innerProp2\": \"float\" },\n              },\n            },\n            apiName: \"a.Foo\",\n            displayName: \"\",\n            links: {},\n            rid: \"\",\n          },\n        } as const satisfies ObjectOrInterfaceDefinition;\n\n        const r = modernToLegacyWhereClause({\n          $and: [\n            { prop: { $eq: 5 } },\n            { prop2: { innerProp1: { $eq: \"myProp\" } } },\n          ],\n        }, T);\n\n        expect(r).toMatchInlineSnapshot(`\n          {\n            \"type\": \"and\",\n            \"value\": [\n              {\n                \"field\": \"a.prop\",\n                \"type\": \"eq\",\n                \"value\": 5,\n              },\n              {\n                \"field\": undefined,\n                \"propertyIdentifier\": {\n                  \"propertyApiName\": \"a.prop2\",\n                  \"structFieldApiName\": \"innerProp1\",\n                  \"type\": \"structField\",\n                },\n                \"type\": \"eq\",\n                \"value\": \"myProp\",\n              },\n            ],\n          }\n        `);\n      });\n\n      it(\"properly does not convert when interface has no apiNamespace\", () => {\n        const T = {\n          type: \"interface\",\n          apiName: \"Foo\",\n          __DefinitionMetadata: {\n            type: \"interface\",\n            properties: {\n              \"foo\": { type: \"integer\" },\n              \"b.prop\": { type: \"integer\" },\n              \"prop\": { type: \"integer\" },\n              \"c.prop2\": {\n                type: { \"innerProp1\": \"string\", \"innerProp2\": \"float\" },\n              },\n            },\n            apiName: \"Foo\",\n            displayName: \"\",\n            links: {},\n            rid: \"\",\n          },\n        } as const satisfies ObjectOrInterfaceDefinition;\n\n        const r = modernToLegacyWhereClause({\n          \"b.prop\": 5,\n          foo: 6,\n          \"c.prop2\": { innerProp1: { $eq: \"myProp\" } },\n        }, T);\n\n        expect(r).toMatchInlineSnapshot(`\n          {\n            \"type\": \"and\",\n            \"value\": [\n              {\n                \"field\": \"b.prop\",\n                \"type\": \"eq\",\n                \"value\": 5,\n              },\n              {\n                \"field\": \"foo\",\n                \"type\": \"eq\",\n                \"value\": 6,\n              },\n              {\n                \"field\": undefined,\n                \"propertyIdentifier\": {\n                  \"propertyApiName\": \"c.prop2\",\n                  \"structFieldApiName\": \"innerProp1\",\n                  \"type\": \"structField\",\n                },\n                \"type\": \"eq\",\n                \"value\": \"myProp\",\n              },\n            ],\n          }\n        `);\n      });\n\n      it(\"gracefully handles redundant apiNamespace in property\", () => {\n        const T = {\n          type: \"interface\",\n          apiName: \"a.Foo\",\n          __DefinitionMetadata: {\n            type: \"interface\",\n            properties: {\n              \"a.foo\": { type: \"integer\" },\n              \"b.prop\": { type: \"integer\" },\n              \"prop\": { type: \"integer\" },\n              \"c.prop2\": {\n                type: { \"innerProp1\": \"string\", \"innerProp2\": \"float\" },\n              },\n            },\n            apiName: \"a.Foo\",\n            displayName: \"\",\n            links: {},\n            rid: \"\",\n          },\n        } as const satisfies ObjectOrInterfaceDefinition;\n\n        const r = modernToLegacyWhereClause({\n          \"b.prop\": 5,\n          \"a.foo\": 6,\n          \"c.prop2\": { innerProp1: { $eq: \"myProp\" } },\n        }, T);\n\n        expect(r).toMatchInlineSnapshot(`\n          {\n            \"type\": \"and\",\n            \"value\": [\n              {\n                \"field\": \"b.prop\",\n                \"type\": \"eq\",\n                \"value\": 5,\n              },\n              {\n                \"field\": \"a.foo\",\n                \"type\": \"eq\",\n                \"value\": 6,\n              },\n              {\n                \"field\": undefined,\n                \"propertyIdentifier\": {\n                  \"propertyApiName\": \"c.prop2\",\n                  \"structFieldApiName\": \"innerProp1\",\n                  \"type\": \"structField\",\n                },\n                \"type\": \"eq\",\n                \"value\": \"myProp\",\n              },\n            ],\n          }\n        `);\n      });\n\n      it(\"properly does not convert different apiNamespaces\", () => {\n        const T = {\n          type: \"interface\",\n          apiName: \"a.Foo\",\n          __DefinitionMetadata: {\n            type: \"interface\",\n            properties: {\n              \"a.foo\": { type: \"integer\" },\n              \"b.prop\": { type: \"integer\" },\n              \"prop\": { type: \"integer\" },\n            },\n            apiName: \"a.Foo\",\n            displayName: \"\",\n            links: {},\n            rid: \"\",\n          },\n        } as const satisfies ObjectOrInterfaceDefinition;\n\n        expect(modernToLegacyWhereClause({\n          \"b.prop\": 5,\n        }, T)).toMatchInlineSnapshot(`\n          {\n            \"field\": \"b.prop\",\n            \"type\": \"eq\",\n            \"value\": 5,\n          }\n        `);\n      });\n    });\n\n    describe(\"objects\", () => {\n      it(\"does not convert object short property names to fq\", () => {\n        const T = {\n          type: \"interface\",\n          apiName: \"a.Foo\",\n          __DefinitionMetadata: {\n            type: \"interface\",\n            properties: {\n              \"a.foo\": { type: \"integer\" },\n              \"prop\": { type: \"integer\" },\n            },\n            apiName: \"a.Foo\",\n            displayName: \"\",\n            links: {},\n            rid: \"\",\n          },\n        } as const satisfies ObjectOrInterfaceDefinition;\n        const r = modernToLegacyWhereClause({\n          prop: 5,\n        }, T);\n\n        expect(r).toMatchInlineSnapshot(`\n          {\n            \"field\": \"a.prop\",\n            \"type\": \"eq\",\n            \"value\": 5,\n          }\n        `);\n      });\n    });\n  });\n\n  describe(\"single checks\", () => {\n    describe(\"$within\", () => {\n      it(\"properly generates bbox shortcut\", async () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            geoPoint: {\n              $within: [-5, 5, -10, 10],\n            },\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoPoint\",\n            \"type\": \"withinBoundingBox\",\n            \"value\": {\n              \"bottomRight\": {\n                \"coordinates\": [\n                  -10,\n                  5,\n                ],\n                \"type\": \"Point\",\n              },\n              \"topLeft\": {\n                \"coordinates\": [\n                  -5,\n                  10,\n                ],\n                \"type\": \"Point\",\n              },\n            },\n          }\n        `);\n      });\n\n      it(\"properly generates bbox long form\", async () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            geoPoint: {\n              $within: {\n                $bbox: [-5, 5, -10, 10],\n              },\n            },\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoPoint\",\n            \"type\": \"withinBoundingBox\",\n            \"value\": {\n              \"bottomRight\": {\n                \"coordinates\": [\n                  -10,\n                  5,\n                ],\n                \"type\": \"Point\",\n              },\n              \"topLeft\": {\n                \"coordinates\": [\n                  -5,\n                  10,\n                ],\n                \"type\": \"Point\",\n              },\n            },\n          }\n        `);\n      });\n\n      it(\"properly generates within radius\", async () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            geoPoint: {\n              $within: { $distance: [5, \"km\"], $of: [-5, 5] },\n            },\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n        {\n          \"field\": \"geoPoint\",\n          \"type\": \"withinDistanceOf\",\n          \"value\": {\n            \"center\": {\n              \"coordinates\": [\n                -5,\n                5,\n              ],\n              \"type\": \"Point\",\n            },\n            \"distance\": {\n              \"unit\": \"KILOMETERS\",\n              \"value\": 5,\n            },\n          },\n        }\n      `);\n      });\n\n      it(\"properly generates within radius of geopoint\", async () => {\n        // suppose you loaded an object with a geopoint field\n        // and you want to find all objects within 5 km of that point\n        const pointAsGeoJsonPoint: Point = {\n          type: \"Point\",\n          coordinates: [-5, 5],\n        };\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            geoPoint: {\n              $within: { $distance: [5, \"km\"], $of: pointAsGeoJsonPoint },\n            },\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n        {\n          \"field\": \"geoPoint\",\n          \"type\": \"withinDistanceOf\",\n          \"value\": {\n            \"center\": {\n              \"coordinates\": [\n                -5,\n                5,\n              ],\n              \"type\": \"Point\",\n            },\n            \"distance\": {\n              \"unit\": \"KILOMETERS\",\n              \"value\": 5,\n            },\n          },\n        }\n      `);\n      });\n\n      it(\"properly generates within polygon\", async () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            geoPoint: {\n              $within: { $polygon: [[[0, 1], [3, 2], [0, 1]]] },\n            },\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoPoint\",\n            \"type\": \"withinPolygon\",\n            \"value\": {\n              \"coordinates\": [\n                [\n                  [\n                    0,\n                    1,\n                  ],\n                  [\n                    3,\n                    2,\n                  ],\n                  [\n                    0,\n                    1,\n                  ],\n                ],\n              ],\n              \"type\": \"Polygon\",\n            },\n          }\n        `);\n      });\n\n      it(\"properly generates within polygon geojson\", async () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            geoPoint: {\n              $within: {\n                type: \"Polygon\",\n                coordinates: [[[0, 1], [3, 2], [0, 1]]],\n              },\n            },\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoPoint\",\n            \"type\": \"withinPolygon\",\n            \"value\": {\n              \"coordinates\": [\n                [\n                  [\n                    0,\n                    1,\n                  ],\n                  [\n                    3,\n                    2,\n                  ],\n                  [\n                    0,\n                    1,\n                  ],\n                ],\n              ],\n              \"type\": \"Polygon\",\n            },\n          }\n        `);\n      });\n      it(\"check types\", async () => {\n        expectType<WhereClause<ObjAllProps>>({\n          geoPoint: {\n            $within: [-5, 5, -10, 10],\n          },\n        });\n\n        expectType<WhereClause<ObjAllProps>>({\n          geoPoint: {\n            $within: { $distance: [2, \"centimeter\"], $of: [2, 2] },\n          },\n        });\n\n        expectType<WhereClause<ObjAllProps>>({\n          geoPoint: {\n            $within: { $polygon: [[[0, 1], [3, 2], [0, 1]]] },\n          },\n        });\n\n        expectType<WhereClause<ObjAllProps>>({\n          geoPoint: {\n            $within: {\n              type: \"Polygon\",\n              coordinates: [[[0, 1], [3, 2], [0, 1]]],\n            },\n          },\n        });\n\n        expectType<WhereClause<ObjAllProps>>({\n          geoPoint: {\n            $within: { $bbox: [-5, 5, -10, 10] },\n          },\n        });\n\n        expectType<WhereClause<ObjAllProps>>({\n          geoPoint: {\n            $within: {\n              $bbox: [-5, 5, -10, 10],\n              // @ts-expect-error\n              $distance: [2, \"centimeter\"],\n              // @ts-expect-error\n              $of: [2, 2],\n            },\n          },\n        });\n        expectType<WhereClause<ObjAllProps>>({\n          geoPoint: {\n            $within: {\n              $polygon: [[[0, 1], [3, 2], [0, 1]]],\n              // @ts-expect-error\n              $bbox: [2, 2, 2, 2],\n            },\n          },\n        });\n      });\n      describe(\"$intersects\", () => {\n        it(\"properly generates bbox shortcut\", async () => {\n          expect(modernToLegacyWhereClause<ObjAllProps>(\n            {\n              geoShape: {\n                $intersects: [-5, 5, -10, 10],\n              },\n            },\n            objectTypeWithAllPropertyTypes,\n          )).toMatchInlineSnapshot(`\n        {\n          \"field\": \"geoShape\",\n          \"type\": \"intersectsBoundingBox\",\n          \"value\": {\n            \"bottomRight\": {\n              \"coordinates\": [\n                -10,\n                5,\n              ],\n              \"type\": \"Point\",\n            },\n            \"topLeft\": {\n              \"coordinates\": [\n                -5,\n                10,\n              ],\n              \"type\": \"Point\",\n            },\n          },\n        }\n      `);\n        });\n        it(\"properly generates bbox long form\", async () => {\n          expect(modernToLegacyWhereClause<ObjAllProps>(\n            {\n              geoShape: {\n                $intersects: {\n                  $bbox: [-5, 5, -10, 10],\n                },\n              },\n            },\n            objectTypeWithAllPropertyTypes,\n          )).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoShape\",\n            \"type\": \"intersectsBoundingBox\",\n            \"value\": {\n              \"bottomRight\": {\n                \"coordinates\": [\n                  -10,\n                  5,\n                ],\n                \"type\": \"Point\",\n              },\n              \"topLeft\": {\n                \"coordinates\": [\n                  -5,\n                  10,\n                ],\n                \"type\": \"Point\",\n              },\n            },\n          }\n        `);\n        });\n\n        it(\"properly generates intersects polygon\", async () => {\n          expect(modernToLegacyWhereClause<ObjAllProps>(\n            {\n              geoShape: {\n                $intersects: { $polygon: [[[0, 1], [3, 2], [0, 1]]] },\n              },\n            },\n            objectTypeWithAllPropertyTypes,\n          )).toMatchInlineSnapshot(`\n            {\n              \"field\": \"geoShape\",\n              \"type\": \"intersectsPolygon\",\n              \"value\": {\n                \"coordinates\": [\n                  [\n                    [\n                      0,\n                      1,\n                    ],\n                    [\n                      3,\n                      2,\n                    ],\n                    [\n                      0,\n                      1,\n                    ],\n                  ],\n                ],\n                \"type\": \"Polygon\",\n              },\n            }\n          `);\n        });\n\n        it(\"properly generates within polygon geojson\", async () => {\n          expect(modernToLegacyWhereClause<ObjAllProps>(\n            {\n              geoShape: {\n                $intersects: {\n                  type: \"Polygon\",\n                  coordinates: [[[0, 1], [3, 2], [0, 1]]],\n                },\n              },\n            },\n            objectTypeWithAllPropertyTypes,\n          )).toMatchInlineSnapshot(`\n            {\n              \"field\": \"geoShape\",\n              \"type\": \"intersectsPolygon\",\n              \"value\": {\n                \"coordinates\": [\n                  [\n                    [\n                      0,\n                      1,\n                    ],\n                    [\n                      3,\n                      2,\n                    ],\n                    [\n                      0,\n                      1,\n                    ],\n                  ],\n                ],\n                \"type\": \"Polygon\",\n              },\n            }\n          `);\n        });\n      });\n\n      it(\"inverts ne short hand properly\", () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          integer: { $ne: 5 },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"type\": \"not\",\n          \"value\": {\n            \"field\": \"integer\",\n            \"type\": \"eq\",\n            \"value\": 5,\n          },\n        }\n      `);\n      });\n      it(\"converts $containsAllTerms correctly if using new type\", () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          string: { $containsAllTerms: { term: \"test\", fuzzySearch: true } },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"string\",\n          \"fuzzy\": true,\n          \"type\": \"containsAllTerms\",\n          \"value\": \"test\",\n        }\n      `);\n\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          string: { $containsAllTerms: { term: \"test\", fuzzySearch: false } },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"string\",\n          \"fuzzy\": false,\n          \"type\": \"containsAllTerms\",\n          \"value\": \"test\",\n        }\n      `);\n\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          string: { $containsAllTerms: { term: \"test\" } },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"string\",\n          \"fuzzy\": false,\n          \"type\": \"containsAllTerms\",\n          \"value\": \"test\",\n        }\n      `);\n      });\n\n      it(\"converts $containsAllTerms correctly if using old type\", () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          string: { $containsAllTerms: \"test\" },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"string\",\n          \"fuzzy\": false,\n          \"type\": \"containsAllTerms\",\n          \"value\": \"test\",\n        }\n      `);\n      });\n      it(\"converts $containsAnyTerm correctly if using new type\", () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          string: { $containsAnyTerm: { term: \"test\", fuzzySearch: true } },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"string\",\n          \"fuzzy\": true,\n          \"type\": \"containsAnyTerm\",\n          \"value\": \"test\",\n        }\n      `);\n\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          string: { $containsAnyTerm: { term: \"test\", fuzzySearch: false } },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"string\",\n          \"fuzzy\": false,\n          \"type\": \"containsAnyTerm\",\n          \"value\": \"test\",\n        }\n      `);\n\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          string: { $containsAnyTerm: { term: \"test\" } },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"string\",\n          \"fuzzy\": false,\n          \"type\": \"containsAnyTerm\",\n          \"value\": \"test\",\n        }\n      `);\n      });\n\n      it(\"converts $containsAnyTerm correctly if using old type\", () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>({\n          string: { $containsAnyTerm: \"test\" },\n        }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"string\",\n          \"fuzzy\": false,\n          \"type\": \"containsAnyTerm\",\n          \"value\": \"test\",\n        }\n      `);\n      });\n      it(\"converts struct where clauses correctly\", () => {\n        expect(modernToLegacyWhereClause<structObj>({\n          address: { state: { $eq: \"NJ\" } },\n        }, BgaoNflPlayer)).toMatchInlineSnapshot(`\n          {\n            \"field\": undefined,\n            \"propertyIdentifier\": {\n              \"propertyApiName\": \"address\",\n              \"structFieldApiName\": \"state\",\n              \"type\": \"structField\",\n            },\n            \"type\": \"eq\",\n            \"value\": \"NJ\",\n          }\n        `);\n\n        expect(modernToLegacyWhereClause<structObj>({\n          $and: [\n            { address: { state: { $eq: \"NJ\" } } },\n            { address: { city: { $containsAnyTerm: \"N\" } } },\n          ],\n        }, BgaoNflPlayer)).toMatchInlineSnapshot(`\n        {\n          \"type\": \"and\",\n          \"value\": [\n            {\n              \"field\": undefined,\n              \"propertyIdentifier\": {\n                \"propertyApiName\": \"address\",\n                \"structFieldApiName\": \"state\",\n                \"type\": \"structField\",\n              },\n              \"type\": \"eq\",\n              \"value\": \"NJ\",\n            },\n            {\n              \"field\": undefined,\n              \"fuzzy\": false,\n              \"propertyIdentifier\": {\n                \"propertyApiName\": \"address\",\n                \"structFieldApiName\": \"city\",\n                \"type\": \"structField\",\n              },\n              \"type\": \"containsAnyTerm\",\n              \"value\": \"N\",\n            },\n          ],\n        }\n      `);\n\n        expect(modernToLegacyWhereClause<structObj>({\n          $or: [\n            { address: { state: { $eq: \"NJ\" } } },\n            { address: { city: { $containsAnyTerm: \"N\" } } },\n            { gamesPlayed: { $gt: 5 } },\n          ],\n        }, BgaoNflPlayer)).toMatchInlineSnapshot(`\n      {\n        \"type\": \"or\",\n        \"value\": [\n          {\n            \"field\": undefined,\n            \"propertyIdentifier\": {\n              \"propertyApiName\": \"address\",\n              \"structFieldApiName\": \"state\",\n              \"type\": \"structField\",\n            },\n            \"type\": \"eq\",\n            \"value\": \"NJ\",\n          },\n          {\n            \"field\": undefined,\n            \"fuzzy\": false,\n            \"propertyIdentifier\": {\n              \"propertyApiName\": \"address\",\n              \"structFieldApiName\": \"city\",\n              \"type\": \"structField\",\n            },\n            \"type\": \"containsAnyTerm\",\n            \"value\": \"N\",\n          },\n          {\n            \"field\": \"gamesPlayed\",\n            \"type\": \"gt\",\n            \"value\": 5,\n          },\n        ],\n      }\n    `);\n      });\n    });\n\n    describe(\"multiple checks\", () => {\n      it(\"properly handles multiple simple where checks\", () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            decimal: 5,\n            integer: 10,\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n        {\n          \"type\": \"and\",\n          \"value\": [\n            {\n              \"field\": \"decimal\",\n              \"type\": \"eq\",\n              \"value\": 5,\n            },\n            {\n              \"field\": \"integer\",\n              \"type\": \"eq\",\n              \"value\": 10,\n            },\n          ],\n        }\n      `);\n      });\n\n      it(\"properly handles $and\", () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            $and: [{\n              decimal: 5,\n            }, {\n              integer: 10,\n            }],\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n          {\n            \"type\": \"and\",\n            \"value\": [\n              {\n                \"field\": \"decimal\",\n                \"type\": \"eq\",\n                \"value\": 5,\n              },\n              {\n                \"field\": \"integer\",\n                \"type\": \"eq\",\n                \"value\": 10,\n              },\n            ],\n          }\n        `);\n      });\n\n      it(\"properly handles $or\", () => {\n        expect(modernToLegacyWhereClause<ObjAllProps>(\n          {\n            $or: [{\n              decimal: 5,\n            }, {\n              integer: 10,\n            }],\n          },\n          objectTypeWithAllPropertyTypes,\n        )).toMatchInlineSnapshot(`\n            {\n              \"type\": \"or\",\n              \"value\": [\n                {\n                  \"field\": \"decimal\",\n                  \"type\": \"eq\",\n                  \"value\": 5,\n                },\n                {\n                  \"field\": \"integer\",\n                  \"type\": \"eq\",\n                  \"value\": 10,\n                },\n              ],\n            }\n          `);\n      });\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}