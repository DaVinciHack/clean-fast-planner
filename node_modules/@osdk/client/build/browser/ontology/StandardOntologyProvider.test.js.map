{"version":3,"file":"StandardOntologyProvider.test.js","names":["Employee","LegacyFauxFoundry","startNodeApiServer","beforeAll","describe","expect","it","createMinimalClientHelper","fetchPage","createStandardOntologyProviderFactory","client","loads","testSetup","apiServer","events","on","request","push","URL","url","pathname","close","toEqual"],"sources":["StandardOntologyProvider.test.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Employee } from \"@osdk/client.test.ontology\";\nimport { LegacyFauxFoundry, startNodeApiServer } from \"@osdk/shared.test\";\nimport { beforeAll, describe, expect, it } from \"vitest\";\nimport { createMinimalClientHelper } from \"../createMinimalClientHelper.js\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\nimport { fetchPage } from \"../object/fetchPage.js\";\nimport {\n  createStandardOntologyProviderFactory,\n} from \"./StandardOntologyProvider.js\";\n\ndescribe(createStandardOntologyProviderFactory, () => {\n  let client: MinimalClient;\n  let loads: string[] = [];\n\n  beforeAll(() => {\n    const testSetup = startNodeApiServer(\n      new LegacyFauxFoundry(),\n      createMinimalClientHelper,\n    );\n    ({ client } = testSetup);\n\n    testSetup.apiServer.events.on(\"request:start\", ({ request }) => {\n      loads.push(new URL(request.url).pathname);\n    });\n\n    return () => {\n      testSetup.apiServer.close();\n    };\n  });\n\n  it(\"doesn't revalidate if not needed\", async () => {\n    await fetchPage(client, Employee, {});\n\n    // first load should lookup employee and its link types\n    expect(loads).toEqual([\n      \"/api/v2/ontologies/ri.ontology.main.ontology.698267cc-6b48-4d98-beff-29beb24e9361/objectSets/loadObjects\",\n      \"/api/v2/ontologies/ri.ontology.main.ontology.698267cc-6b48-4d98-beff-29beb24e9361/objectTypes/Employee/fullMetadata\",\n      \"/api/v2/ontologies/ri.ontology.main.ontology.698267cc-6b48-4d98-beff-29beb24e9361/interfaceTypes/FooInterface\",\n    ]);\n\n    loads = [];\n\n    await fetchPage(client, Employee, {});\n    // second load should not need to load ontology info\n    expect(loads).toEqual([\n      \"/api/v2/ontologies/ri.ontology.main.ontology.698267cc-6b48-4d98-beff-29beb24e9361/objectSets/loadObjects\",\n    ]);\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,mBAAmB;AACzE,SAASC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,QAAQ;AACxD,SAASC,yBAAyB,QAAQ,iCAAiC;AAE3E,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SACEC,qCAAqC,QAChC,+BAA+B;AAEtCL,QAAQ,CAACK,qCAAqC,EAAE,MAAM;EACpD,IAAIC,MAAqB;EACzB,IAAIC,KAAe,GAAG,EAAE;EAExBR,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAGV,kBAAkB,CAClC,IAAID,iBAAiB,CAAC,CAAC,EACvBM,yBACF,CAAC;IACD,CAAC;MAAEG;IAAO,CAAC,GAAGE,SAAS;IAEvBA,SAAS,CAACC,SAAS,CAACC,MAAM,CAACC,EAAE,CAAC,eAAe,EAAE,CAAC;MAAEC;IAAQ,CAAC,KAAK;MAC9DL,KAAK,CAACM,IAAI,CAAC,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACC,QAAQ,CAAC;IAC3C,CAAC,CAAC;IAEF,OAAO,MAAM;MACXR,SAAS,CAACC,SAAS,CAACQ,KAAK,CAAC,CAAC;IAC7B,CAAC;EACH,CAAC,CAAC;EAEFf,EAAE,CAAC,kCAAkC,EAAE,YAAY;IACjD,MAAME,SAAS,CAACE,MAAM,EAAEV,QAAQ,EAAE,CAAC,CAAC,CAAC;;IAErC;IACAK,MAAM,CAACM,KAAK,CAAC,CAACW,OAAO,CAAC,CACpB,0GAA0G,EAC1G,qHAAqH,EACrH,+GAA+G,CAChH,CAAC;IAEFX,KAAK,GAAG,EAAE;IAEV,MAAMH,SAAS,CAACE,MAAM,EAAEV,QAAQ,EAAE,CAAC,CAAC,CAAC;IACrC;IACAK,MAAM,CAACM,KAAK,CAAC,CAACW,OAAO,CAAC,CACpB,0GAA0G,CAC3G,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}