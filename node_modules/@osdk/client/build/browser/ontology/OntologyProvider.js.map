{"version":3,"file":"OntologyProvider.js","names":["InterfaceDefinitions","Symbol"],"sources":["OntologyProvider.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ActionMetadata,\n  InterfaceMetadata,\n  ObjectMetadata,\n  QueryMetadata,\n} from \"@osdk/api\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\n\nexport const InterfaceDefinitions: unique symbol = Symbol(\n  process.env.MODE !== \"production\" ? \"InterfaceDefinitions\" : undefined,\n);\n\nexport interface FetchedObjectTypeDefinition extends ObjectMetadata {\n  // we keep this here so we can depend on these synchronously\n  [InterfaceDefinitions]: {\n    [key: string]: { def: InterfaceMetadata };\n  };\n}\n\nexport interface OntologyProvider {\n  /**\n   * Returns the current known definition for the object.\n   *\n   * May result in multiple network calls. May cache results. May invalidate results\n   * @param apiName\n   * @returns\n   */\n  getObjectDefinition: (\n    apiName: string,\n  ) => Promise<FetchedObjectTypeDefinition>;\n\n  /**\n   * Returns the current known definition for the interface.\n   *\n   * May result in multiple network calls. May cache results. May invalidate results\n   * @param apiName\n   * @returns\n   */\n  getInterfaceDefinition: (\n    apiName: string,\n  ) => Promise<InterfaceMetadata>;\n\n  getQueryDefinition: (\n    apiName: string,\n    version: string | undefined,\n  ) => Promise<QueryMetadata>;\n\n  getActionDefinition: (apiName: string) => Promise<ActionMetadata>;\n}\n\nexport type OntologyProviderFactory<\n  T extends OntologyProvider = OntologyProvider,\n> = (\n  client: MinimalClient,\n) => T;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA,OAAO,MAAMA,oBAAmC,GAAGC,MAAM,CACnB,sBACtC,CAAC","ignoreList":[]}