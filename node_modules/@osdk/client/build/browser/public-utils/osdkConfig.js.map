{"version":3,"file":"osdkConfig.js","names":["getMetaTagContent","name","element","document","querySelector","val","getAttribute","Error","getViteEnvVar","import","meta","env","isProduction","process","NODE_ENV","getConfigValue","metaTagName","viteEnvVarName","getOntologyRid","ontologyRid","getOsdkConfig","clientId","redirectUrl","foundryUrl"],"sources":["osdkConfig.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function getMetaTagContent(name: string): string {\n  const element = document.querySelector(`meta[name=\"${name}\"]`);\n  const val = element ? element.getAttribute(\"content\") : null;\n  if (val == null) {\n    throw new Error(`Missing meta tag: ${name}`);\n  }\n  return val;\n}\n\nfunction getViteEnvVar(name: string): string {\n  const val = import.meta.env[name];\n  if (val == null) {\n    throw new Error(`Missing environment variable: ${name}`);\n  }\n  return val;\n}\n\nexport interface OsdkConfig {\n  clientId: string;\n  redirectUrl: string;\n  foundryUrl: string;\n  ontologyRid: string;\n}\n\nfunction isProduction(): boolean {\n  return process.env.NODE_ENV === \"production\";\n}\n\nfunction getConfigValue(metaTagName: string, viteEnvVarName: string): string {\n  return isProduction()\n    ? getMetaTagContent(metaTagName)\n    : getViteEnvVar(viteEnvVarName);\n}\n\nfunction getOntologyRid(ontologyRid: string): string {\n  return isProduction() ? getMetaTagContent(\"osdk-ontologyRid\") : ontologyRid;\n}\n\nexport function getOsdkConfig(ontologyRid: string): OsdkConfig {\n  return {\n    clientId: getConfigValue(\"osdk-clientId\", \"VITE_FOUNDRY_CLIENT_ID\"),\n    redirectUrl: getConfigValue(\n      \"osdk-redirectUrl\",\n      \"VITE_FOUNDRY_REDIRECT_URL\",\n    ),\n    foundryUrl: getConfigValue(\"osdk-foundryUrl\", \"VITE_FOUNDRY_API_URL\"),\n    ontologyRid: getOntologyRid(ontologyRid),\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,iBAAiBA,CAACC,IAAY,EAAU;EACtD,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,cAAcH,IAAI,IAAI,CAAC;EAC9D,MAAMI,GAAG,GAAGH,OAAO,GAAGA,OAAO,CAACI,YAAY,CAAC,SAAS,CAAC,GAAG,IAAI;EAC5D,IAAID,GAAG,IAAI,IAAI,EAAE;IACf,MAAM,IAAIE,KAAK,CAAC,qBAAqBN,IAAI,EAAE,CAAC;EAC9C;EACA,OAAOI,GAAG;AACZ;AAEA,SAASG,aAAaA,CAACP,IAAY,EAAU;EAC3C,MAAMI,GAAG,GAAGI,MAAM,CAACC,IAAI,CAACC,GAAG,CAACV,IAAI,CAAC;EACjC,IAAII,GAAG,IAAI,IAAI,EAAE;IACf,MAAM,IAAIE,KAAK,CAAC,iCAAiCN,IAAI,EAAE,CAAC;EAC1D;EACA,OAAOI,GAAG;AACZ;AASA,SAASO,YAAYA,CAAA,EAAY;EAC/B,OAAOC,OAAO,CAACF,GAAG,CAACG,QAAQ,KAAK,YAAY;AAC9C;AAEA,SAASC,cAAcA,CAACC,WAAmB,EAAEC,cAAsB,EAAU;EAC3E,OAAOL,YAAY,CAAC,CAAC,GACjBZ,iBAAiB,CAACgB,WAAW,CAAC,GAC9BR,aAAa,CAACS,cAAc,CAAC;AACnC;AAEA,SAASC,cAAcA,CAACC,WAAmB,EAAU;EACnD,OAAOP,YAAY,CAAC,CAAC,GAAGZ,iBAAiB,CAAC,kBAAkB,CAAC,GAAGmB,WAAW;AAC7E;AAEA,OAAO,SAASC,aAAaA,CAACD,WAAmB,EAAc;EAC7D,OAAO;IACLE,QAAQ,EAAEN,cAAc,CAAC,eAAe,EAAE,wBAAwB,CAAC;IACnEO,WAAW,EAAEP,cAAc,CACzB,kBAAkB,EAClB,2BACF,CAAC;IACDQ,UAAU,EAAER,cAAc,CAAC,iBAAiB,EAAE,sBAAsB,CAAC;IACrEI,WAAW,EAAED,cAAc,CAACC,WAAW;EACzC,CAAC;AACH","ignoreList":[]}