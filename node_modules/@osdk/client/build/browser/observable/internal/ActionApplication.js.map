{"version":3,"file":"ActionApplication.js","names":["delay","createChangedObjects","runOptimisticJob","ACTION_DELAY","process","env","NODE_ENV","ActionApplication","constructor","store","applyAction","action","args","optimisticUpdate","logger","child","methodName","removeOptimisticResult","actionResults","client","$returnEdits","debug","invalidateActionEditResponse","value","typesToInvalidate","Set","changes","type","promisesToWait","obj","modifiedObjects","push","invalidateObject","objectType","primaryKey","addedObjects","add","Promise","all","changeType","cacheKey","getCacheKey","getValue","set","added","modified","apiName","editedObjectTypes","toString","invalidateObjectType"],"sources":["ActionApplication.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ActionDefinition, ActionEditResponse } from \"@osdk/api\";\nimport delay from \"delay\";\nimport type { ActionSignatureFromDef } from \"../../actions/applyAction.js\";\nimport { type Changes, createChangedObjects } from \"./Changes.js\";\nimport type { ObjectCacheKey } from \"./ObjectQuery.js\";\nimport { runOptimisticJob } from \"./OptimisticJob.js\";\nimport type { Store } from \"./Store.js\";\n\nconst ACTION_DELAY = process.env.NODE_ENV === \"production\" ? 0 : 1000;\n\nexport class ActionApplication {\n  constructor(private store: Store) {}\n\n  applyAction: <Q extends ActionDefinition<any>>(\n    action: Q,\n    args: Parameters<ActionSignatureFromDef<Q>[\"applyAction\"]>[0],\n    opts?: Store.ApplyActionOptions,\n  ) => Promise<ActionEditResponse> = async (\n    action,\n    args,\n    { optimisticUpdate } = {},\n  ) => {\n    const logger = process.env.NODE_ENV !== \"production\"\n      ? this.store.logger?.child({ methodName: \"applyAction\" })\n      : this.store.logger;\n    const removeOptimisticResult = runOptimisticJob(\n      this.store,\n      optimisticUpdate,\n    );\n\n    return await (async () => {\n      try {\n        // The types for client get confused when we dynamically applyAction so we\n        // have to deal with the `any` here and force cast it to what it should be.\n        // TODO: Update the types so this doesn't happen!\n\n        const actionResults: ActionEditResponse = await this.store.client(\n          action,\n        ).applyAction(args as any, { $returnEdits: true });\n\n        if (process.env.NODE_ENV !== \"production\") {\n          if (ACTION_DELAY > 0) {\n            logger?.debug(\"action done, pausing\", actionResults);\n            await delay(ACTION_DELAY);\n            logger?.debug(\"action done, pausing done\");\n          }\n        }\n        await this.#invalidateActionEditResponse(actionResults);\n        return actionResults;\n      } finally {\n        if (process.env.NODE_ENV !== \"production\") {\n          logger?.debug(\n            \"optimistic action complete; remove the results\",\n          );\n        }\n        // make sure this happens even if the action fails\n        await removeOptimisticResult();\n      }\n    })();\n  };\n\n  #invalidateActionEditResponse = async (\n    value: ActionEditResponse,\n  ): Promise<ActionEditResponse> => {\n    const typesToInvalidate = new Set<string>();\n\n    let changes: Changes | undefined;\n    if (value.type === \"edits\") {\n      const promisesToWait: Promise<any>[] = [];\n      // TODO we need an backend update for deletes\n      for (const obj of value.modifiedObjects) {\n        promisesToWait.push(\n          this.store.invalidateObject(obj.objectType, obj.primaryKey),\n        );\n      }\n\n      for (const obj of value.addedObjects) {\n        promisesToWait.push(\n          this.store.invalidateObject(obj.objectType, obj.primaryKey),\n        );\n\n        typesToInvalidate.add(obj.objectType);\n      }\n\n      await Promise.all(promisesToWait);\n\n      // the action invocation just gives back object ids,\n      // but the invalidateObject calls above should have put the\n      // actual objects in the cache\n      const changes = createChangedObjects();\n      for (const changeType of [\"addedObjects\", \"modifiedObjects\"] as const) {\n        for (const { objectType, primaryKey } of (value[changeType] ?? [])) {\n          const cacheKey = this.store.getCacheKey<ObjectCacheKey>(\n            \"object\",\n            objectType,\n            primaryKey,\n          );\n          // N.B. this probably isn't right. `getValue`() will give you the \"top\"\n          // value but I think we want the \"truth\" guaranteed.\n          const obj = this.store.getValue(cacheKey);\n          if (obj && obj.value) {\n            changes[changeType].set(objectType, obj.value);\n            (changeType === \"addedObjects\" ? changes.added : changes.modified)\n              .add(cacheKey);\n          }\n        }\n      }\n    } else {\n      for (const apiName of value.editedObjectTypes) {\n        typesToInvalidate.add(apiName.toString());\n        await this.store.invalidateObjectType(apiName as string, changes);\n      }\n    }\n\n    return value;\n  };\n}\n"],"mappings":"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","ignoreList":[]}