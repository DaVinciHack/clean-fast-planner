{"version":3,"file":"Query.js","names":["additionalContext","Query","retainCount","connectable","subscription","subject","constructor","store","observable","opts","cacheKey","logger","options","process","env","NODE_ENV","client","child","msgPrefix","type","otherKeys","map","x","JSON","stringify","join","subscribe","observer","_createConnectable","connect","revalidate","force","methodName","abortController","abort","pendingFetch","info","dedupeInterval","lastFetchStarted","Date","now","debug","Promise","resolve","batch","setStatus","_preFetch","_fetchAndStore","finally","undefined","status","existing","read","write","value","dispose","unsubscribe","_dispose"],"sources":["Query.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  Connectable,\n  Observable,\n  Observer,\n  Subscribable,\n  Subscription,\n} from \"rxjs\";\nimport { additionalContext } from \"../../Client.js\";\nimport type { Logger } from \"../../logger/Logger.js\";\nimport type { CommonObserveOptions, Status } from \"../ObservableClient.js\";\nimport type { CacheKey } from \"./CacheKey.js\";\nimport type { Changes } from \"./Changes.js\";\nimport type { Entry } from \"./Layer.js\";\nimport type { OptimisticId } from \"./OptimisticId.js\";\nimport type { BatchContext, Store, SubjectPayload } from \"./Store.js\";\n\nexport abstract class Query<\n  KEY extends CacheKey,\n  PAYLOAD,\n  O extends CommonObserveOptions,\n> implements Subscribable<PAYLOAD> {\n  lastFetchStarted?: number;\n  pendingFetch?: Promise<unknown>;\n  retainCount: number = 0;\n  options: O;\n  cacheKey: KEY;\n  store: Store;\n  abortController?: AbortController;\n  #connectable?: Connectable<PAYLOAD>;\n  #subscription?: Subscription;\n  #subject: Observable<SubjectPayload<KEY>>;\n\n  /** @internal */\n  protected logger: Logger | undefined;\n\n  constructor(\n    store: Store,\n    observable: Observable<SubjectPayload<KEY>>,\n    opts: O,\n    cacheKey: KEY,\n    logger?: Logger,\n  ) {\n    this.options = opts;\n    this.cacheKey = cacheKey;\n    this.store = store;\n    this.#subject = observable;\n\n    this.logger = logger ?? (\n      process.env.NODE_ENV === \"production\"\n        ? store.client[additionalContext].logger\n        : store.client[additionalContext].logger?.child({}, {\n          msgPrefix: process.env.NODE_ENV !== \"production\"\n            ? (`Query<${cacheKey.type}, ${\n              cacheKey.otherKeys.map(x => JSON.stringify(x)).join(\", \")\n            }>`)\n            : \"Query\",\n        })\n    );\n  }\n\n  protected abstract _createConnectable(\n    subject: Observable<SubjectPayload<KEY>>,\n  ): Connectable<PAYLOAD>;\n\n  public subscribe(\n    observer: Observer<PAYLOAD>,\n  ): Subscription {\n    this.#connectable ??= this._createConnectable(this.#subject);\n    this.#subscription = this.#connectable.connect();\n    return this.#connectable.subscribe(observer);\n  }\n\n  /**\n   * Causes the query to revalidate. This will cause the query to fetch\n   * the latest data from the server and update the store if it is deemed\n   * \"stale\" or if `force` is true.\n   *\n   * @param force\n   * @returns\n   */\n  async revalidate(force?: boolean): Promise<void> {\n    const logger = process.env.NODE_ENV !== \"production\"\n      ? this.logger?.child({ methodName: \"revalidate\" })\n      : this.logger;\n\n    if (force) {\n      this.abortController?.abort();\n    }\n\n    // n.b. I think this isn't quite right since we may require multiple\n    // pages to properly \"revalidate\" for someone. This only really works if you\n    // have a single page/object. It needs to be redone. FIXME\n\n    // if we are pending the first page/object we can just ignore this\n    if (this.pendingFetch) {\n      if (process.env.NODE_ENV !== \"production\") {\n        logger?.info(\"Fetch is already pending, using it\");\n      }\n      await this.pendingFetch;\n      return;\n    }\n\n    if (\n      (this.options.dedupeInterval ?? 0) > 0 && (\n        this.lastFetchStarted != null\n        && Date.now() - this.lastFetchStarted < (this.options.dedupeInterval\n            ?? 0)\n      )\n    ) {\n      if (process.env.NODE_ENV !== \"production\") {\n        logger?.debug(\"Within dupeInterval, aborting revalidate\");\n      }\n\n      return Promise.resolve();\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      logger?.debug(\"Starting actual revalidate\");\n    }\n\n    this.store.batch({}, (batch) => {\n      // make sure the truth layer knows we are loading\n\n      // this will not trigger an update to `changes` so it cannot trigger an\n      // update of a list either. This may not be the behavior we want.\n      this.setStatus(\"loading\", batch);\n    });\n\n    this._preFetch();\n\n    this.lastFetchStarted = Date.now();\n\n    if (process.env.NODE_ENV !== \"production\") {\n      logger?.debug(\"calling _fetchAndStore()\");\n    }\n    this.pendingFetch = this._fetchAndStore()\n      .finally(() => {\n        logger?.info(\"finally _fetchAndStore()\");\n        this.pendingFetch = undefined;\n      });\n\n    await this.pendingFetch;\n    return;\n  }\n\n  protected _preFetch(): void {}\n\n  protected abstract _fetchAndStore(): Promise<unknown>;\n\n  /**\n   * Sets the status of the query in the store (but does not store that in `changes`).\n   *\n   * @param status\n   * @param batch\n   * @returns\n   */\n  setStatus(\n    status: Status,\n    batch: BatchContext,\n  ): void {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({ methodName: \"setStatus\" }).debug(status);\n    }\n    const existing = batch.read(this.cacheKey);\n    if (existing?.status === status) return;\n\n    batch.write(this.cacheKey, existing?.value, status);\n  }\n\n  dispose(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n    this.#subscription?.unsubscribe();\n    this._dispose();\n  }\n\n  /**\n   * Per query type dispose functionality\n   */\n  protected _dispose(): void {}\n\n  /**\n   * The purpose of this method is to provide a way for others to write\n   * directly into the store for this query.\n   *\n   * @param data\n   * @param status\n   * @param batch\n   */\n  abstract writeToStore(\n    data: KEY[\"__cacheKey\"][\"value\"],\n    status: Status,\n    batch: BatchContext,\n  ): Entry<KEY>;\n\n  /**\n   * @param changes\n   * @param optimisticId\n   * @returns If revalidation is needed, a promise that resolves after the\n   *          revalidation is complete. Otherwise, undefined.\n   */\n  maybeUpdateAndRevalidate?: (\n    changes: Changes,\n    optimisticId: OptimisticId | undefined,\n  ) => Promise<void> | undefined;\n}\n"],"mappings":"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","ignoreList":[]}