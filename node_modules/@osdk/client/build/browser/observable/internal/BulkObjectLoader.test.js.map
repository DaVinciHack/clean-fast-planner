{"version":3,"file":"BulkObjectLoader.test.js","names":["beforeEach","describe","expect","it","vi","BulkObjectLoader","createClientMockHelper","client","mockClient","mocked","fetchMetadata","mockReturnValue","Promise","resolve","primaryKeyApiName","employees","$apiName","$objectType","$primaryKey","loader","firstRequest","mockFetchPageOnce","secondRequest","load0","fetch","load1","load2","data","nextPageToken","undefined","totalCount","resolves","toMatchObject","mock","fn","then","not","toHaveBeenCalled","useFakeTimers","advanceTimersByTime","runOnlyPendingTimers","mockThen","useRealTimers"],"sources":["BulkObjectLoader.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ObjectMetadata } from \"@osdk/api\";\nimport type { Mock } from \"vitest\";\nimport { beforeEach, describe, expect, it, vi } from \"vitest\";\nimport type { Client } from \"../../Client.js\";\nimport { BulkObjectLoader } from \"./BulkObjectLoader.js\";\nimport { createClientMockHelper, type MockClientHelper } from \"./testUtils.js\";\n\ndescribe(BulkObjectLoader, () => {\n  let client: Mock<Client> & Client;\n  let mockClient: MockClientHelper;\n\n  beforeEach(async () => {\n    mockClient = createClientMockHelper();\n    client = mockClient.client;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    vi.mocked(client.fetchMetadata).mockReturnValue(\n      Promise.resolve(\n        {\n          primaryKeyApiName: \"id\",\n        } satisfies Pick<ObjectMetadata, \"primaryKeyApiName\"> as ObjectMetadata,\n      ),\n    );\n  });\n\n  const employees = [\n    {\n      $apiName: \"Employee\",\n      $objectType: \"Employee\",\n      $primaryKey: 0,\n    },\n    {\n      $apiName: \"Employee\",\n      $objectType: \"Employee\",\n      $primaryKey: 1,\n    },\n    {\n      $apiName: \"Employee\",\n      $objectType: \"Employee\",\n      $primaryKey: 2,\n    },\n  ];\n\n  it(\"splits up work by count\", async () => {\n    const loader = new BulkObjectLoader(client, 25, /*ms*/ 2 /*entries*/);\n\n    const firstRequest = mockClient.mockFetchPageOnce();\n    const secondRequest = mockClient.mockFetchPageOnce();\n\n    const load0 = loader.fetch(\"Employee\", 0);\n    const load1 = loader.fetch(\"Employee\", 1);\n    const load2 = loader.fetch(\"Employee\", 2);\n\n    firstRequest.resolve({\n      data: [employees[0], employees[1]],\n      nextPageToken: undefined,\n      totalCount: \"2\",\n    });\n\n    await expect(load0).resolves.toMatchObject({\n      $primaryKey: 0,\n    });\n\n    await expect(load1).resolves.toMatchObject({\n      $primaryKey: 1,\n    });\n\n    const mock = vi.fn();\n    void load2.then(mock);\n    expect(mock).not.toHaveBeenCalled();\n\n    secondRequest.resolve({\n      data: [employees[2]],\n      nextPageToken: undefined,\n      totalCount: \"1\",\n    });\n\n    await expect(load2).resolves.toMatchObject({\n      $primaryKey: 2,\n    });\n\n    expect(mock).toHaveBeenCalled();\n  });\n\n  it(\"splits up work by time\", async () => {\n    const loader = new BulkObjectLoader(client, /*ms*/ 25, /*entries*/ 100);\n\n    const firstRequest = mockClient.mockFetchPageOnce();\n    const secondRequest = mockClient.mockFetchPageOnce();\n\n    vi.useFakeTimers();\n\n    const load0 = loader.fetch(\"Employee\", 0);\n\n    vi.advanceTimersByTime(26);\n\n    const load1 = loader.fetch(\"Employee\", 1);\n    const load2 = loader.fetch(\"Employee\", 2);\n\n    firstRequest.resolve({\n      data: [employees[0]],\n      nextPageToken: undefined,\n      totalCount: \"1\",\n    });\n\n    vi.runOnlyPendingTimers();\n\n    await expect(load0).resolves.toMatchObject({\n      $primaryKey: 0,\n    });\n\n    const mockThen = vi.fn();\n    void load2.then(mockThen);\n\n    expect(mockThen).not.toHaveBeenCalled();\n\n    secondRequest.resolve({\n      data: [\n        employees[1],\n        employees[2],\n      ],\n      nextPageToken: undefined,\n      totalCount: \"2\",\n    });\n\n    await expect(load1).resolves.toMatchObject({\n      $primaryKey: 1,\n    });\n\n    await expect(load2).resolves.toMatchObject({\n      $primaryKey: 2,\n    });\n\n    expect(mockThen).toHaveBeenCalled();\n\n    vi.useRealTimers();\n  });\n});\n"],"mappings":"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","ignoreList":[]}