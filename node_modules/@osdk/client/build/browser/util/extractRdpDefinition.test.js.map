{"version":3,"file":"extractRdpDefinition.test.js","names":["describe","expect","it","extractRdpDefinition","mockClientCtx","ontologyProvider","getObjectDefinition","objectType","links","testLink1","targetType","testLink2","properties","testProperty","type","Error","objectSetWithRdps","objectSet","link","derivedProperties","myRdp","operation","selectedPropertyApiName","result","toMatchInlineSnapshot","rdp1","limit","rdp2","objectSets","rejects","toThrowErrorMatchingInlineSnapshot"],"sources":["extractRdpDefinition.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ObjectMetadata } from \"@osdk/api\";\nimport type { ObjectSet } from \"@osdk/foundry.ontologies\";\nimport { describe, expect, it } from \"vitest\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\nimport { extractRdpDefinition } from \"./extractRdpDefinition.js\";\n\ndescribe(\"extractRdpDefinition\", () => {\n  const mockClientCtx = {\n    ontologyProvider: {\n      getObjectDefinition: (objectType: string) => {\n        if (objectType === \"BaseType\") {\n          return {\n            links: {\n              testLink1: {\n                targetType: \"SecondType\",\n                \"multiplicity\": \"many\",\n              } satisfies ObjectMetadata.Link<any, any>,\n            },\n          };\n        } else if (objectType === \"SecondType\") {\n          return {\n            links: {\n              testLink2: {\n                targetType: \"ThirdType\",\n                \"multiplicity\": \"many\",\n              } satisfies ObjectMetadata.Link<any, any>,\n            },\n          };\n        } else if (objectType === \"ThirdType\") {\n          return {\n            properties: {\n              testProperty: {\n                type: \"attachment\",\n              } satisfies ObjectMetadata.Property,\n            },\n          };\n        } else {\n          throw new Error(`Missing definition for '${objectType}'`);\n        }\n      },\n    } as any,\n  } as MinimalClient;\n\n  const objectSetWithRdps: ObjectSet = {\n    type: \"withProperties\",\n    objectSet: {\n      type: \"searchAround\",\n      objectSet: { type: \"base\", objectType: \"BaseType\" },\n      link: \"testLink1\",\n    },\n    derivedProperties: {\n      myRdp: {\n        type: \"selection\",\n        objectSet: {\n          type: \"searchAround\",\n          objectSet: { type: \"methodInput\" },\n          link: \"testLink2\",\n        },\n        operation: { type: \"get\", selectedPropertyApiName: \"testProperty\" },\n      },\n    },\n  };\n\n  it(\"handles 'withProperties' object set type\", async () => {\n    const result = await extractRdpDefinition(\n      mockClientCtx,\n      objectSetWithRdps,\n    );\n\n    expect(result).toMatchInlineSnapshot(\n      `\n      {\n        \"myRdp\": {\n          \"definition\": {\n            \"objectSet\": {\n              \"link\": \"testLink2\",\n              \"objectSet\": {\n                \"type\": \"methodInput\",\n              },\n              \"type\": \"searchAround\",\n            },\n            \"operation\": {\n              \"selectedPropertyApiName\": \"testProperty\",\n              \"type\": \"get\",\n            },\n            \"type\": \"selection\",\n          },\n          \"selectedOrCollectedPropertyType\": {\n            \"type\": \"attachment\",\n          },\n        },\n      }\n    `,\n    );\n  });\n\n  it(\"combines definitions from multiple derived properties\", async () => {\n    const nestedObjectSet: ObjectSet = {\n      type: \"withProperties\",\n      objectSet: objectSetWithRdps,\n      derivedProperties: {\n        rdp1: {\n          type: \"selection\",\n          objectSet: {\n            type: \"searchAround\",\n            objectSet: { type: \"methodInput\" },\n            link: \"testLink2\",\n          },\n          operation: {\n            type: \"collectList\",\n            selectedPropertyApiName: \"testProperty\",\n            limit: 100,\n          },\n        },\n        rdp2: {\n          type: \"selection\",\n          objectSet: {\n            type: \"searchAround\",\n            objectSet: { type: \"methodInput\" },\n            link: \"testLink2\",\n          },\n          operation: {\n            type: \"collectSet\",\n            selectedPropertyApiName: \"testProperty\",\n            limit: 100,\n          },\n        },\n      },\n    };\n\n    const result = await extractRdpDefinition(\n      mockClientCtx,\n      nestedObjectSet,\n    );\n\n    expect(result).toMatchInlineSnapshot(`\n      {\n        \"myRdp\": {\n          \"definition\": {\n            \"objectSet\": {\n              \"link\": \"testLink2\",\n              \"objectSet\": {\n                \"type\": \"methodInput\",\n              },\n              \"type\": \"searchAround\",\n            },\n            \"operation\": {\n              \"selectedPropertyApiName\": \"testProperty\",\n              \"type\": \"get\",\n            },\n            \"type\": \"selection\",\n          },\n          \"selectedOrCollectedPropertyType\": {\n            \"type\": \"attachment\",\n          },\n        },\n        \"rdp1\": {\n          \"definition\": {\n            \"objectSet\": {\n              \"link\": \"testLink2\",\n              \"objectSet\": {\n                \"type\": \"methodInput\",\n              },\n              \"type\": \"searchAround\",\n            },\n            \"operation\": {\n              \"limit\": 100,\n              \"selectedPropertyApiName\": \"testProperty\",\n              \"type\": \"collectList\",\n            },\n            \"type\": \"selection\",\n          },\n          \"selectedOrCollectedPropertyType\": {\n            \"type\": \"attachment\",\n          },\n        },\n        \"rdp2\": {\n          \"definition\": {\n            \"objectSet\": {\n              \"link\": \"testLink2\",\n              \"objectSet\": {\n                \"type\": \"methodInput\",\n              },\n              \"type\": \"searchAround\",\n            },\n            \"operation\": {\n              \"limit\": 100,\n              \"selectedPropertyApiName\": \"testProperty\",\n              \"type\": \"collectSet\",\n            },\n            \"type\": \"selection\",\n          },\n          \"selectedOrCollectedPropertyType\": {\n            \"type\": \"attachment\",\n          },\n        },\n      }\n    `);\n  });\n\n  it(\"handles `intersection` object set type and nested static and reference object sets\", async () => {\n    const intersectionObjectSet: ObjectSet = {\n      type: \"intersect\",\n      objectSets: [\n        {\n          type: \"searchAround\",\n          objectSet: { type: \"base\", objectType: \"BaseType\" },\n          link: \"testLink1\",\n        },\n        { type: \"static\", \"objects\": [\"object1\", \"object2\"] },\n        { type: \"reference\", \"reference\": \"rid.os.1234\" },\n      ],\n    };\n\n    const RdpWithIntersectionBaseObjectSet: ObjectSet = {\n      type: \"withProperties\",\n      objectSet: intersectionObjectSet,\n      derivedProperties: {\n        myRdp: {\n          type: \"selection\",\n          objectSet: {\n            type: \"searchAround\",\n            objectSet: { type: \"methodInput\" },\n            link: \"testLink2\",\n          },\n          operation: {\n            type: \"get\",\n            selectedPropertyApiName: \"testProperty\",\n          },\n        },\n      },\n    };\n\n    const result = await extractRdpDefinition(\n      mockClientCtx,\n      RdpWithIntersectionBaseObjectSet,\n    );\n\n    expect(result).toMatchInlineSnapshot(\n      `\n      {\n        \"myRdp\": {\n          \"definition\": {\n            \"objectSet\": {\n              \"link\": \"testLink2\",\n              \"objectSet\": {\n                \"type\": \"methodInput\",\n              },\n              \"type\": \"searchAround\",\n            },\n            \"operation\": {\n              \"selectedPropertyApiName\": \"testProperty\",\n              \"type\": \"get\",\n            },\n            \"type\": \"selection\",\n          },\n          \"selectedOrCollectedPropertyType\": {\n            \"type\": \"attachment\",\n          },\n        },\n      }\n    `,\n    );\n  });\n\n  it(\"throws with intersect, subtract, or union having nested RDPs\", async () => {\n    const intersectionObjectSetWithNestedRdps: ObjectSet = {\n      type: \"intersect\",\n      objectSets: [objectSetWithRdps, {\n        type: \"base\",\n        objectType: \"ThirdType\",\n      }],\n    };\n\n    await expect(\n      extractRdpDefinition(mockClientCtx, intersectionObjectSetWithNestedRdps),\n    ).rejects.toThrowErrorMatchingInlineSnapshot(\n      `[Error: Invariant failed: Object sets combined using intersect, subtract, or union must not contain any derived property definitions]`,\n    );\n  });\n\n  it(\"throes with intersect, subtract, or union having different child object types\", async () => {\n    const intersectionObjectSet: ObjectSet = {\n      type: \"intersect\",\n      objectSets: [\n        {\n          type: \"searchAround\",\n          objectSet: { type: \"base\", objectType: \"BaseType\" },\n          link: \"testLink1\",\n        },\n        { type: \"base\", objectType: \"BaseType\" },\n      ],\n    };\n\n    const RdpWithIntersectionBaseObjectSet: ObjectSet = {\n      type: \"withProperties\",\n      objectSet: intersectionObjectSet,\n      derivedProperties: {\n        myRdp: {\n          type: \"selection\",\n          objectSet: {\n            type: \"searchAround\",\n            objectSet: { type: \"methodInput\" },\n            link: \"testLink2\",\n          },\n          operation: {\n            type: \"get\",\n            selectedPropertyApiName: \"testProperty\",\n          },\n        },\n      },\n    };\n\n    await expect(\n      extractRdpDefinition(mockClientCtx, RdpWithIntersectionBaseObjectSet),\n    ).rejects.toThrowErrorMatchingInlineSnapshot(\n      `[Error: Invariant failed: All object sets in an intersect, subtract, or union must have the same child object type]`,\n    );\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,QAAQ;AAE7C,SAASC,oBAAoB,QAAQ,2BAA2B;AAEhEH,QAAQ,CAAC,sBAAsB,EAAE,MAAM;EACrC,MAAMI,aAAa,GAAG;IACpBC,gBAAgB,EAAE;MAChBC,mBAAmB,EAAGC,UAAkB,IAAK;QAC3C,IAAIA,UAAU,KAAK,UAAU,EAAE;UAC7B,OAAO;YACLC,KAAK,EAAE;cACLC,SAAS,EAAE;gBACTC,UAAU,EAAE,YAAY;gBACxB,cAAc,EAAE;cAClB;YACF;UACF,CAAC;QACH,CAAC,MAAM,IAAIH,UAAU,KAAK,YAAY,EAAE;UACtC,OAAO;YACLC,KAAK,EAAE;cACLG,SAAS,EAAE;gBACTD,UAAU,EAAE,WAAW;gBACvB,cAAc,EAAE;cAClB;YACF;UACF,CAAC;QACH,CAAC,MAAM,IAAIH,UAAU,KAAK,WAAW,EAAE;UACrC,OAAO;YACLK,UAAU,EAAE;cACVC,YAAY,EAAE;gBACZC,IAAI,EAAE;cACR;YACF;UACF,CAAC;QACH,CAAC,MAAM;UACL,MAAM,IAAIC,KAAK,CAAC,2BAA2BR,UAAU,GAAG,CAAC;QAC3D;MACF;IACF;EACF,CAAkB;EAElB,MAAMS,iBAA4B,GAAG;IACnCF,IAAI,EAAE,gBAAgB;IACtBG,SAAS,EAAE;MACTH,IAAI,EAAE,cAAc;MACpBG,SAAS,EAAE;QAAEH,IAAI,EAAE,MAAM;QAAEP,UAAU,EAAE;MAAW,CAAC;MACnDW,IAAI,EAAE;IACR,CAAC;IACDC,iBAAiB,EAAE;MACjBC,KAAK,EAAE;QACLN,IAAI,EAAE,WAAW;QACjBG,SAAS,EAAE;UACTH,IAAI,EAAE,cAAc;UACpBG,SAAS,EAAE;YAAEH,IAAI,EAAE;UAAc,CAAC;UAClCI,IAAI,EAAE;QACR,CAAC;QACDG,SAAS,EAAE;UAAEP,IAAI,EAAE,KAAK;UAAEQ,uBAAuB,EAAE;QAAe;MACpE;IACF;EACF,CAAC;EAEDpB,EAAE,CAAC,0CAA0C,EAAE,YAAY;IACzD,MAAMqB,MAAM,GAAG,MAAMpB,oBAAoB,CACvCC,aAAa,EACbY,iBACF,CAAC;IAEDf,MAAM,CAACsB,MAAM,CAAC,CAACC,qBAAqB,CAClC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACI,CAAC;EACH,CAAC,CAAC;EAEFtB,EAAE,CAAC,uDAAuD,EAAE,YAAY;IAkCtE,MAAMqB,MAAM,GAAG,MAAMpB,oBAAoB,CACvCC,aAAa,EAlCoB;MACjCU,IAAI,EAAE,gBAAgB;MACtBG,SAAS,EAAED,iBAAiB;MAC5BG,iBAAiB,EAAE;QACjBM,IAAI,EAAE;UACJX,IAAI,EAAE,WAAW;UACjBG,SAAS,EAAE;YACTH,IAAI,EAAE,cAAc;YACpBG,SAAS,EAAE;cAAEH,IAAI,EAAE;YAAc,CAAC;YAClCI,IAAI,EAAE;UACR,CAAC;UACDG,SAAS,EAAE;YACTP,IAAI,EAAE,aAAa;YACnBQ,uBAAuB,EAAE,cAAc;YACvCI,KAAK,EAAE;UACT;QACF,CAAC;QACDC,IAAI,EAAE;UACJb,IAAI,EAAE,WAAW;UACjBG,SAAS,EAAE;YACTH,IAAI,EAAE,cAAc;YACpBG,SAAS,EAAE;cAAEH,IAAI,EAAE;YAAc,CAAC;YAClCI,IAAI,EAAE;UACR,CAAC;UACDG,SAAS,EAAE;YACTP,IAAI,EAAE,YAAY;YAClBQ,uBAAuB,EAAE,cAAc;YACvCI,KAAK,EAAE;UACT;QACF;MACF;IACF,CAKA,CAAC;IAEDzB,MAAM,CAACsB,MAAM,CAAC,CAACC,qBAAqB,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;EAEFtB,EAAE,CAAC,oFAAoF,EAAE,YAAY;IAiCnG,MAAMqB,MAAM,GAAG,MAAMpB,oBAAoB,CACvCC,aAAa,EApBqC;MAClDU,IAAI,EAAE,gBAAgB;MACtBG,SAAS,EAf8B;QACvCH,IAAI,EAAE,WAAW;QACjBc,UAAU,EAAE,CACV;UACEd,IAAI,EAAE,cAAc;UACpBG,SAAS,EAAE;YAAEH,IAAI,EAAE,MAAM;YAAEP,UAAU,EAAE;UAAW,CAAC;UACnDW,IAAI,EAAE;QACR,CAAC,EACD;UAAEJ,IAAI,EAAE,QAAQ;UAAE,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS;QAAE,CAAC,EACrD;UAAEA,IAAI,EAAE,WAAW;UAAE,WAAW,EAAE;QAAc,CAAC;MAErD,CAIkC;MAChCK,iBAAiB,EAAE;QACjBC,KAAK,EAAE;UACLN,IAAI,EAAE,WAAW;UACjBG,SAAS,EAAE;YACTH,IAAI,EAAE,cAAc;YACpBG,SAAS,EAAE;cAAEH,IAAI,EAAE;YAAc,CAAC;YAClCI,IAAI,EAAE;UACR,CAAC;UACDG,SAAS,EAAE;YACTP,IAAI,EAAE,KAAK;YACXQ,uBAAuB,EAAE;UAC3B;QACF;MACF;IACF,CAKA,CAAC;IAEDrB,MAAM,CAACsB,MAAM,CAAC,CAACC,qBAAqB,CAClC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACI,CAAC;EACH,CAAC,CAAC;EAEFtB,EAAE,CAAC,8DAA8D,EAAE,YAAY;IAS7E,MAAMD,MAAM,CACVE,oBAAoB,CAACC,aAAa,EATmB;MACrDU,IAAI,EAAE,WAAW;MACjBc,UAAU,EAAE,CAACZ,iBAAiB,EAAE;QAC9BF,IAAI,EAAE,MAAM;QACZP,UAAU,EAAE;MACd,CAAC;IACH,CAGyE,CACzE,CAAC,CAACsB,OAAO,CAACC,kCAAkC,CAC1C,uIACF,CAAC;EACH,CAAC,CAAC;EAEF5B,EAAE,CAAC,+EAA+E,EAAE,YAAY;IAgC9F,MAAMD,MAAM,CACVE,oBAAoB,CAACC,aAAa,EApBgB;MAClDU,IAAI,EAAE,gBAAgB;MACtBG,SAAS,EAd8B;QACvCH,IAAI,EAAE,WAAW;QACjBc,UAAU,EAAE,CACV;UACEd,IAAI,EAAE,cAAc;UACpBG,SAAS,EAAE;YAAEH,IAAI,EAAE,MAAM;YAAEP,UAAU,EAAE;UAAW,CAAC;UACnDW,IAAI,EAAE;QACR,CAAC,EACD;UAAEJ,IAAI,EAAE,MAAM;UAAEP,UAAU,EAAE;QAAW,CAAC;MAE5C,CAIkC;MAChCY,iBAAiB,EAAE;QACjBC,KAAK,EAAE;UACLN,IAAI,EAAE,WAAW;UACjBG,SAAS,EAAE;YACTH,IAAI,EAAE,cAAc;YACpBG,SAAS,EAAE;cAAEH,IAAI,EAAE;YAAc,CAAC;YAClCI,IAAI,EAAE;UACR,CAAC;UACDG,SAAS,EAAE;YACTP,IAAI,EAAE,KAAK;YACXQ,uBAAuB,EAAE;UAC3B;QACF;MACF;IACF,CAGsE,CACtE,CAAC,CAACO,OAAO,CAACC,kCAAkC,CAC1C,qHACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}