{"version":3,"file":"objectSpecifierUtils.test.js","names":["describe","expect","it","createObjectSpecifierFromPrimaryKey","extractObjectTypeFromObjectSpecifier","extractPrimaryKeyFromObjectSpecifier","mockObjectTypeDefinition","apiName","specifier","toBe","primaryKey","objectType"],"sources":["objectSpecifierUtils.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ObjectSpecifier, ObjectTypeDefinition } from \"@osdk/api\";\nimport { describe, expect, it } from \"vitest\";\nimport {\n  createObjectSpecifierFromPrimaryKey,\n  extractObjectTypeFromObjectSpecifier,\n  extractPrimaryKeyFromObjectSpecifier,\n} from \"./objectSpecifierUtils.js\";\n\ndescribe(\"ObjectSpecifier Utilities\", () => {\n  const mockObjectTypeDefinition = {\n    apiName: \"myApi\",\n  } as ObjectTypeDefinition;\n\n  describe(\"createObjectSpecifierFromPrimaryKey\", () => {\n    it(\"creates a specifier in the format 'apiName:primaryKey'\", () => {\n      const primaryKey = \"12345\";\n      const specifier = createObjectSpecifierFromPrimaryKey(\n        mockObjectTypeDefinition,\n        primaryKey,\n      );\n      expect(specifier).toBe(\"myApi:12345\");\n    });\n  });\n\n  describe(\"extractPrimaryKeyFromObjectSpecifier\", () => {\n    it(\"extracts the primary key portion correctly\", () => {\n      const specifier = \"myApi:12345\" as ObjectSpecifier<any>;\n      const primaryKey = extractPrimaryKeyFromObjectSpecifier(specifier);\n      expect(primaryKey).toBe(\"12345\");\n    });\n  });\n\n  describe(\"extractObjectTypeFromObjectSpecifier\", () => {\n    it(\"extracts the object type portion correctly\", () => {\n      const specifier = \"myApi:12345\" as ObjectSpecifier<any>;\n      const objectType = extractObjectTypeFromObjectSpecifier(specifier);\n      expect(objectType).toBe(\"myApi\");\n    });\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,QAAQ;AAC7C,SACEC,mCAAmC,EACnCC,oCAAoC,EACpCC,oCAAoC,QAC/B,2BAA2B;AAElCL,QAAQ,CAAC,2BAA2B,EAAE,MAAM;EAC1C,MAAMM,wBAAwB,GAAG;IAC/BC,OAAO,EAAE;EACX,CAAyB;EAEzBP,QAAQ,CAAC,qCAAqC,EAAE,MAAM;IACpDE,EAAE,CAAC,wDAAwD,EAAE,MAAM;MAEjE,MAAMM,SAAS,GAAGL,mCAAmC,CACnDG,wBAAwB,EAFP,OAInB,CAAC;MACDL,MAAM,CAACO,SAAS,CAAC,CAACC,IAAI,CAAC,aAAa,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFT,QAAQ,CAAC,sCAAsC,EAAE,MAAM;IACrDE,EAAE,CAAC,4CAA4C,EAAE,MAAM;MAErD,MAAMQ,UAAU,GAAGL,oCAAoC,CADrC,aAC+C,CAAC;MAClEJ,MAAM,CAACS,UAAU,CAAC,CAACD,IAAI,CAAC,OAAO,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFT,QAAQ,CAAC,sCAAsC,EAAE,MAAM;IACrDE,EAAE,CAAC,4CAA4C,EAAE,MAAM;MAErD,MAAMS,UAAU,GAAGP,oCAAoC,CADrC,aAC+C,CAAC;MAClEH,MAAM,CAACU,UAAU,CAAC,CAACF,IAAI,CAAC,OAAO,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}