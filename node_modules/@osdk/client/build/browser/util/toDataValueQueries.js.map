{"version":3,"file":"toDataValueQueries.js","names":["OntologiesV2","isAttachmentFile","isAttachmentUpload","getWireObjectSet","isObjectSet","isObjectSpecifiersObject","extractPrimaryKeyFromObjectSpecifier","isWireObjectSet","toDataValueQueries","value","client","desiredType","Array","isArray","multiplicity","values","from","some","dataValue","converted","push","promiseArray","innerValue","Promise","all","type","attachment","Attachments","upload","data","filename","name","rid","groups","Set","$primaryKey","entrySet","key","mapValue","Object","entries","keyType","valueType","structMap","structValue"],"sources":["toDataValueQueries.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { QueryDataTypeDefinition } from \"@osdk/api\";\nimport { type DataValue } from \"@osdk/foundry.ontologies\";\nimport * as OntologiesV2 from \"@osdk/foundry.ontologies\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\nimport {\n  isAttachmentFile,\n  isAttachmentUpload,\n} from \"../object/AttachmentUpload.js\";\nimport { getWireObjectSet, isObjectSet } from \"../objectSet/createObjectSet.js\";\nimport { isObjectSpecifiersObject } from \"./isObjectSpecifiersObject.js\";\nimport { extractPrimaryKeyFromObjectSpecifier } from \"./objectSpecifierUtils.js\";\nimport { isWireObjectSet } from \"./WireObjectSet.js\";\n\n/**\n * Marshall user-facing data into the wire DataValue type\n *\n * @see DataValue for the expected payloads\n * @internal\n */\nexport async function toDataValueQueries(\n  value: unknown,\n  client: MinimalClient,\n  desiredType: QueryDataTypeDefinition,\n): Promise<DataValue> {\n  if (value == null) {\n    return value;\n  }\n\n  if (Array.isArray(value) && desiredType.multiplicity) {\n    const values = Array.from(value);\n    if (\n      values.some((dataValue) =>\n        isAttachmentUpload(dataValue) || isAttachmentFile(dataValue)\n      )\n    ) {\n      const converted = [];\n      for (const value of values) {\n        converted.push(await toDataValueQueries(value, client, desiredType));\n      }\n      return converted;\n    }\n    const promiseArray = Array.from(\n      value,\n      async (innerValue) =>\n        await toDataValueQueries(innerValue, client, desiredType),\n    );\n    return Promise.all(promiseArray);\n  }\n\n  switch (desiredType.type) {\n    case \"attachment\": {\n      if (isAttachmentUpload(value)) {\n        const attachment = await OntologiesV2.Attachments.upload(\n          client,\n          value.data,\n          {\n            filename: value.name,\n          },\n        );\n        return attachment.rid;\n      }\n\n      if (\n        isAttachmentFile(value)\n      ) {\n        const attachment = await OntologiesV2.Attachments.upload(\n          client,\n          value,\n          {\n            filename: value.name as string,\n          },\n        );\n        return attachment.rid;\n      }\n\n      // If it's not an upload, it's just an attachment rid string which we can pass through\n      return value;\n    }\n    case \"twoDimensionalAggregation\": {\n      return {\n        groups: value,\n      };\n    }\n    case \"threeDimensionalAggregation\": {\n      return {\n        groups: value,\n      };\n    }\n\n    case \"set\": {\n      if (value instanceof Set) {\n        const promiseArray = Array.from(\n          value,\n          async (innerValue) =>\n            await toDataValueQueries(innerValue, client, desiredType[\"set\"]),\n        );\n        return Promise.all(promiseArray);\n      }\n      break;\n    }\n    case \"object\": {\n      if (isObjectSpecifiersObject(value)) {\n        return value.$primaryKey;\n      }\n      break;\n    }\n    case \"objectSet\": {\n      // object set (the rid as a string (passes through the last return), or the ObjectSet definition directly)\n      if (isWireObjectSet(value)) {\n        return value;\n      }\n      if (isObjectSet(value)) {\n        return getWireObjectSet(value);\n      }\n      break;\n    }\n\n    case \"map\": {\n      if (typeof value === \"object\") {\n        const entrySet: Array<{ key: any; value: any }> = [];\n        for (const [key, mapValue] of Object.entries(value)) {\n          entrySet.push({\n            key: desiredType.keyType.type === \"object\"\n              ? extractPrimaryKeyFromObjectSpecifier(key as any)\n              : await toDataValueQueries(\n                key,\n                client,\n                desiredType.keyType,\n              ),\n            value: await toDataValueQueries(\n              mapValue,\n              client,\n              desiredType.valueType,\n            ),\n          });\n        }\n        return entrySet;\n      }\n      break;\n    }\n\n    case \"struct\": {\n      if (typeof value === \"object\") {\n        const structMap: { [key: string]: unknown } = {};\n        for (const [key, structValue] of Object.entries(value)) {\n          structMap[key] = await toDataValueQueries(\n            structValue,\n            client,\n            desiredType[\"struct\"][key],\n          );\n        }\n        return structMap;\n      }\n    }\n\n    case \"boolean\":\n    case \"date\":\n    case \"double\":\n    case \"float\":\n    case \"integer\":\n    case \"long\":\n    case \"string\":\n    case \"timestamp\":\n      return value;\n  }\n  return value;\n}\n"],"mappings":"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","ignoreList":[]}