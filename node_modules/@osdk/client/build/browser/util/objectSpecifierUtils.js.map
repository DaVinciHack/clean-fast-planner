{"version":3,"file":"objectSpecifierUtils.js","names":["createObjectSpecifierFromPrimaryKey","objectDef","primaryKey","apiName","extractPrimaryKeyFromObjectSpecifier","ObjectSpecifier","split","extractObjectTypeFromObjectSpecifier"],"sources":["objectSpecifierUtils.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ObjectSpecifier,\n  ObjectTypeDefinition,\n  PrimaryKeyType,\n} from \"@osdk/api\";\n\n/**\n * Creates an Object Specifier. An ObjectSpecifier is a string that uniquely identifies an object in the system,\n * even when loading an interface object where primary key uniqueness is not guaranteed.\n *\n * @param objectDef - An Object Type Definition\n * @param primaryKey - The value you want to use as the primary key\n * @returns An Object Specifier\n */\nexport function createObjectSpecifierFromPrimaryKey<\n  Q extends ObjectTypeDefinition,\n>(objectDef: Q, primaryKey: PrimaryKeyType<Q>): ObjectSpecifier<Q> {\n  return `${objectDef.apiName}:${primaryKey}` as ObjectSpecifier<Q>;\n}\n\n/**\n * Extracts the primary key from an ObjectSpecifier on an OSDK object.\n *\n * @param ObjectSpecifier\n * @returns A string representing the primary key\n */\nexport function extractPrimaryKeyFromObjectSpecifier(\n  ObjectSpecifier: ObjectSpecifier<any>,\n): string {\n  return ObjectSpecifier.split(\":\")[1];\n}\n\n/**\n * Extracts the object type from an ObjectSpecifier on an OSDK object.\n *\n * @param ObjectSpecifier\n * @returns The object type extracted from the ObjectSpecifier\n */\nexport function extractObjectTypeFromObjectSpecifier(\n  ObjectSpecifier: ObjectSpecifier<any>,\n): string {\n  return ObjectSpecifier.split(\":\")[0];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,mCAAmCA,CAEjDC,SAAY,EAAEC,UAA6B,EAAsB;EACjE,OAAO,GAAGD,SAAS,CAACE,OAAO,IAAID,UAAU,EAAE;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,oCAAoCA,CAClDC,eAAqC,EAC7B;EACR,OAAOA,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oCAAoCA,CAClDF,eAAqC,EAC7B;EACR,OAAOA,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtC","ignoreList":[]}