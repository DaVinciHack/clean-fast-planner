{"version":3,"file":"aggregate.test.js","names":["objectTypeWithAllPropertyTypes","Todo","expectType","beforeAll","describe","expect","expectTypeOf","it","vi","createClient","createMinimalClient","aggregate","metadata","expectsClientVersion","ontologyRid","ontologyApiName","userAgent","mockFetch","clientCtx","client","fn","mockResolvedValue","ok","status","json","Promise","resolve","aggregationResponse","undefined","accuracy","data","group","string","metrics","name","value","toEqualTypeOf","notGrouped","type","objectType","$select","toHaveBeenCalledWith","body","JSON","stringify","method","headers","anything","approximateDistinct","exactDistinct","id","max","avg","$count","grouped","$groupBy","$exactWithLimit","integer","$ranges","short","float","$fixedWidth","dateTime","$duration","date","boolean","double","$defaultValue","$limit","$group","wrongSelectKey","wrongKey","$exact","toBeCallableWith","direction","timestamp"],"sources":["aggregate.test.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  AggregateOpts,\n  AggregateOptsThatErrorsAndDisallowsOrderingWithMultipleGroupBy,\n  GroupByClause,\n  ValidAggregationKeys,\n} from \"@osdk/api\";\nimport type { Employee } from \"@osdk/client.test.ontology\";\nimport {\n  objectTypeWithAllPropertyTypes,\n  Todo,\n} from \"@osdk/client.test.ontology\";\nimport type { AggregateObjectsResponseV2 } from \"@osdk/foundry.ontologies\";\nimport type { TypeOf } from \"ts-expect\";\nimport { expectType } from \"ts-expect\";\nimport {\n  beforeAll,\n  describe,\n  expect,\n  expectTypeOf,\n  it,\n  type Mock,\n  vi,\n} from \"vitest\";\nimport type { Client } from \"../Client.js\";\nimport { createClient } from \"../createClient.js\";\nimport { createMinimalClient } from \"../createMinimalClient.js\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\nimport { aggregate } from \"./aggregate.js\";\n\nconst metadata = {\n  expectsClientVersion: \"0.0.0\",\n  ontologyRid: \"ri.a.b.c.d\",\n  ontologyApiName: \"apiName\",\n  userAgent: \"\",\n};\n\nlet mockFetch: Mock;\nlet clientCtx: MinimalClient;\nlet client: Client;\n\nbeforeAll(() => {\n  mockFetch = vi.fn();\n\n  mockFetch.mockResolvedValue({\n    ok: true,\n    status: 200,\n    json: () => new Promise((resolve) => resolve(aggregationResponse)),\n  });\n\n  clientCtx = createMinimalClient(\n    metadata,\n    \"https://host.com\",\n    async () => \"myAccessToken\",\n    {},\n    mockFetch,\n  );\n\n  client = createClient(\n    \"https://host.com\",\n    metadata.ontologyRid,\n    async () => \"\",\n    undefined,\n    mockFetch,\n  );\n});\n\nconst aggregationResponse: AggregateObjectsResponseV2 = {\n  accuracy: \"APPROXIMATE\",\n  data: [\n    {\n      group: {\n        string: \"hello\",\n      },\n      metrics: [\n        {\n          name: \"string.approximateDistinct\",\n          value: 1,\n        },\n        {\n          name: \"string.exactDistinct\",\n          value: 1,\n        },\n        {\n          name: \"id.max\",\n          value: 1,\n        },\n        {\n          name: \"id.avg\",\n          value: 1,\n        },\n      ],\n    },\n  ],\n};\n\ndescribe(\"aggregate\", () => {\n  it(\"works\", async () => {\n    expectTypeOf<ValidAggregationKeys<Todo>>().toEqualTypeOf<\n      | \"$count\"\n      | \"id:min\"\n      | \"id:max\"\n      | \"id:sum\"\n      | \"id:avg\"\n      | \"id:approximateDistinct\"\n      | \"id:exactDistinct\"\n      | \"text:approximateDistinct\"\n      | \"text:exactDistinct\"\n    >;\n\n    const notGrouped = await aggregate(\n      clientCtx,\n      objectTypeWithAllPropertyTypes,\n      {\n        type: \"base\",\n        objectType: \"ToDo\",\n      },\n      {\n        $select: {\n          \"string:approximateDistinct\": \"unordered\",\n          \"string:exactDistinct\": \"unordered\",\n          \"id:max\": \"unordered\",\n          \"id:avg\": \"unordered\",\n          \"$count\": \"unordered\",\n        },\n      },\n    );\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      \"https://host.com/api/v2/ontologies/ri.a.b.c.d/objectSets/aggregate\",\n      {\n        body: JSON.stringify({\n          \"objectSet\": { \"type\": \"base\", \"objectType\": \"ToDo\" },\n          \"groupBy\": [],\n          \"aggregation\": [\n            {\n              \"type\": \"approximateDistinct\",\n              \"name\": \"string.approximateDistinct\",\n              \"field\": \"string\",\n            },\n            {\n              \"type\": \"exactDistinct\",\n              \"name\": \"string.exactDistinct\",\n              \"field\": \"string\",\n            },\n            { \"type\": \"max\", \"name\": \"id.max\", \"field\": \"id\" },\n            { \"type\": \"avg\", \"name\": \"id.avg\", \"field\": \"id\" },\n            { \"type\": \"count\", \"name\": \"count\" },\n          ],\n        }),\n        method: \"POST\",\n        headers: expect.anything(),\n      },\n    );\n\n    expectType<number>(notGrouped.string.approximateDistinct);\n    expectType<number>(notGrouped.string.exactDistinct);\n    expectType<number | undefined>(notGrouped.id.max);\n    expectType<number | undefined>(notGrouped.id.avg);\n    expectType<number>(notGrouped.$count);\n    expectType<\n      TypeOf<\n        {\n          other: any;\n        },\n        typeof notGrouped\n      >\n    >(false); // subSelect should hide unused keys\n\n    const grouped = await client(objectTypeWithAllPropertyTypes).aggregate(\n      {\n        $select: {\n          \"id:approximateDistinct\": \"unordered\",\n          \"id:exactDistinct\": \"unordered\",\n          \"id:max\": \"unordered\",\n          \"$count\": \"unordered\",\n        },\n        $groupBy: {\n          string: \"exact\",\n          id: { $exactWithLimit: 10 },\n          integer: { $ranges: [[1, 2]] },\n          short: {\n            $ranges: [[2, 3], [4, 5]],\n          },\n          float: { $fixedWidth: 10 },\n          dateTime: { $duration: [10, \"seconds\"] },\n          date: { $ranges: [[\"2024-01-02\", \"2024-01-09\"]] },\n          boolean: \"exact\",\n          double: { \"$exact\": { $defaultValue: \"default\", $limit: 300 } },\n        },\n      },\n    );\n    expectType<Array<any>>(grouped);\n    expectType<string | undefined>(grouped[0].$group.string);\n    expectType<number>(grouped[0].id.approximateDistinct);\n    expectType<number>(grouped[0].id.exactDistinct);\n    expectType<number>(grouped[0].$group.id);\n    expectType<number>(grouped[0].$count);\n    expectType<{ startValue: number; endValue: number }>(\n      grouped[0].$group.integer,\n    );\n    expectType<{ startValue: number; endValue: number }>(\n      grouped[0].$group.short,\n    );\n    expectType<number | undefined>(grouped[0].$group.float);\n    expectType<string | undefined>(grouped[0].$group.dateTime);\n    expectType<{ startValue: string; endValue: string }>(\n      grouped[0].$group.date,\n    );\n    expectType<boolean | undefined>(grouped[0].$group.boolean);\n    expectType<number | undefined>(grouped[0].$group.double);\n\n    expectType<\n      AggregateOptsThatErrorsAndDisallowsOrderingWithMultipleGroupBy<\n        objectTypeWithAllPropertyTypes,\n        {\n          $select: {\n            \"id:approximateDistinct\": \"unordered\";\n            \"$count\": \"unordered\";\n          };\n          $groupBy: {\n            string: \"exact\";\n            id: { $exactWithLimit: 10 };\n            integer: { $ranges: [[1, 2]] };\n            short: {\n              $ranges: [[2, 3], [4, 5]];\n            };\n            float: { $fixedWidth: 10 };\n          };\n        }\n      >\n    >({\n      $select: {\n        \"id:approximateDistinct\": \"unordered\",\n        \"$count\": \"unordered\",\n      },\n      $groupBy: {\n        string: \"exact\",\n        id: { $exactWithLimit: 10 },\n        integer: { $ranges: [[1, 2]] },\n        short: {\n          $ranges: [[2, 3], [4, 5]],\n        },\n        float: { $fixedWidth: 10 },\n      },\n    });\n\n    expectType<\n      AggregateOptsThatErrorsAndDisallowsOrderingWithMultipleGroupBy<\n        objectTypeWithAllPropertyTypes,\n        {\n          $select: {\n            \"id:approximateDistinct\": \"unordered\";\n            \"wrongSelectKey\": \"don't work\";\n            \"$count\": \"unordered\";\n          };\n          $groupBy: {\n            wrongKey: \"don't work\";\n            text: \"exact\";\n            id: { $exact: { $limit: 10; $defaultValue: \"default\" } };\n            integer: { $ranges: [[1, 2]] };\n            short: {\n              $ranges: [[2, 3], [4, 5]];\n            };\n            float: { $fixedWidth: 10 };\n          };\n        }\n      >\n    >({\n      $select: {\n        id: \"approximateDistinct\",\n        // @ts-expect-error\n        wrongSelectKey: \"don't work\",\n        \"$count\": \"unordered\",\n      },\n      $groupBy: {\n        // @ts-expect-error\n        wrongKey: \"don't work\",\n        string: \"exact\",\n        id: { $exact: { $limit: 10, $defaultValue: \"default\" } },\n        integer: { $ranges: [[1, 2]] },\n        short: {\n          $ranges: [[2, 3], [4, 5]],\n        },\n        float: { $fixedWidth: 10 },\n      },\n    });\n\n    expectTypeOf<\n      typeof aggregate<objectTypeWithAllPropertyTypes, {\n        $select: {\n          \"id:approximateDistinct\": \"unordered\";\n          \"wrongSelectKey\": \"wrong key\";\n          \"$count\": \"unordered\";\n        };\n        $groupBy: {\n          string: \"exact\";\n          wrongKey: \"wrongKey\";\n          id: { $exactWithLimit: 10 };\n          integer: { $ranges: [[1, 2]] };\n          short: {\n            $ranges: [[2, 3], [4, 5]];\n          };\n          float: { $fixedWidth: 10 };\n        };\n      }>\n    >().toBeCallableWith(\n      clientCtx,\n      objectTypeWithAllPropertyTypes,\n      {\n        type: \"base\",\n        objectType: \"ToDo\",\n      },\n      {\n        $select: {\n          \"id:approximateDistinct\": \"unordered\",\n          // @ts-expect-error\n          \"wrongSelectKey\": \"don't work\",\n          \"$count\": \"unordered\",\n        },\n        $groupBy: {\n          string: \"exact\",\n          // @ts-expect-error\n          wrongKey: \"wrongKey\",\n          id: { $exactWithLimit: 10 },\n          integer: { $ranges: [[1, 2]] },\n          short: {\n            $ranges: [[2, 3], [4, 5]],\n          },\n          float: { $fixedWidth: 10 },\n        },\n      },\n    );\n\n    expectType<GroupByClause<objectTypeWithAllPropertyTypes>>({\n      dateTime: { $duration: [10, \"seconds\"] },\n      date: { $duration: [1, \"years\"] },\n    });\n\n    // Can't use value greater than 1 for years\n    expectType<GroupByClause<objectTypeWithAllPropertyTypes>>({\n      // @ts-expect-error\n      date: { $duration: [10, \"years\"] },\n    });\n\n    // Can't use arbitrary string for time unit\n    expectType<GroupByClause<objectTypeWithAllPropertyTypes>>({\n      // @ts-expect-error\n      dateTime: { $duration: [1, \"nonexistentTimeUnit\"] },\n    });\n\n    // Can't use time unit smaller than days for date type\n    expectType<GroupByClause<objectTypeWithAllPropertyTypes>>({\n      // @ts-expect-error\n      date: { $duration: [1, \"seconds\"] },\n    });\n  });\n\n  it(\"works with $orderBy (no groups)\", async () => {\n    const notGrouped = await aggregate(\n      clientCtx,\n      objectTypeWithAllPropertyTypes,\n      {\n        type: \"base\",\n        objectType: \"ToDo\",\n      },\n      {\n        $select: {\n          \"string:approximateDistinct\": \"asc\",\n          \"id:exactDistinct\": \"asc\",\n          \"id:avg\": \"desc\",\n          \"id:max\": \"asc\",\n          \"$count\": \"unordered\",\n        },\n      },\n    );\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      \"https://host.com/api/v2/ontologies/ri.a.b.c.d/objectSets/aggregate\",\n      {\n        body: JSON.stringify({\n          \"objectSet\": { \"type\": \"base\", \"objectType\": \"ToDo\" },\n          \"groupBy\": [],\n          \"aggregation\": [\n            {\n              \"type\": \"approximateDistinct\",\n              \"name\": \"string.approximateDistinct\",\n              direction: \"ASC\",\n              \"field\": \"string\",\n            },\n            {\n              \"type\": \"exactDistinct\",\n              \"name\": \"id.exactDistinct\",\n              direction: \"ASC\",\n              \"field\": \"id\",\n            },\n            {\n              \"type\": \"avg\",\n              \"name\": \"id.avg\",\n              direction: \"DESC\",\n              \"field\": \"id\",\n            },\n            {\n              \"type\": \"max\",\n              \"name\": \"id.max\",\n              direction: \"ASC\",\n              \"field\": \"id\",\n            },\n            { \"type\": \"count\", \"name\": \"count\" },\n          ],\n        }),\n        method: \"POST\",\n        headers: expect.anything(),\n      },\n    );\n\n    expectType<number>(notGrouped.string.approximateDistinct);\n    expectType<number>(notGrouped.id.exactDistinct);\n    expectType<number>(notGrouped.id.max);\n    expectType<number>(notGrouped.id.avg);\n    expectType<number>(notGrouped.$count);\n    expectType<\n      TypeOf<\n        {\n          other: any;\n        },\n        typeof notGrouped\n      >\n    >(false); // subselect should hide unused keys\n  });\n\n  it(\"works with $orderBy (1 group)\", async () => {\n    const grouped = await aggregate(\n      clientCtx,\n      objectTypeWithAllPropertyTypes,\n      {\n        type: \"base\",\n        objectType: \"ToDo\",\n      },\n      {\n        $select: {\n          \"id:max\": \"desc\",\n          \"string:approximateDistinct\": \"asc\",\n          \"id:avg\": \"unordered\",\n          \"$count\": \"unordered\",\n          \"string:exactDistinct\": \"desc\",\n        },\n        $groupBy: {\n          id: \"exact\",\n        },\n      },\n    );\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      \"https://host.com/api/v2/ontologies/ri.a.b.c.d/objectSets/aggregate\",\n      {\n        body: JSON.stringify({\n          \"objectSet\": { \"type\": \"base\", \"objectType\": \"ToDo\" },\n          \"groupBy\": [{ \"type\": \"exact\", \"field\": \"id\" }],\n          \"aggregation\": [\n            {\n              \"type\": \"max\",\n              \"name\": \"id.max\",\n              direction: \"DESC\",\n              \"field\": \"id\",\n            },\n            {\n              \"type\": \"approximateDistinct\",\n              \"name\": \"string.approximateDistinct\",\n              direction: \"ASC\",\n              \"field\": \"string\",\n            },\n            { \"type\": \"avg\", \"name\": \"id.avg\", \"field\": \"id\" },\n            { \"type\": \"count\", \"name\": \"count\" },\n            {\n              \"type\": \"exactDistinct\",\n              \"name\": \"string.exactDistinct\",\n              direction: \"DESC\",\n              \"field\": \"string\",\n            },\n          ],\n        }),\n        method: \"POST\",\n        headers: expect.anything(),\n      },\n    );\n\n    expectType<number>(grouped[0].string.approximateDistinct);\n    expectType<number>(grouped[0].id.max);\n    expectType<number>(grouped[0].id.avg);\n    expectType<number>(grouped[0].$count);\n    expectType<number>(grouped[0].string.exactDistinct);\n    expectType<\n      TypeOf<\n        {\n          other: any;\n        },\n        typeof grouped\n      >\n    >(false); // subselect should hide unused keys\n  });\n\n  it(\"prohibits ordered select with multiple groupBy\", async () => {\n    await client(Todo).aggregate(\n      {\n        $select: {\n          // @ts-expect-error\n          \"id:max\": \"desc\",\n          // @ts-expect-error\n          \"text:approximateDistinct\": \"asc\",\n          // @ts-expect-error\n          \"text:exactDistinct\": \"desc\",\n          \"id:avg\": \"unordered\",\n          \"$count\": \"unordered\",\n        },\n        $groupBy: {\n          id: \"exact\",\n          timestamp: \"exact\",\n        },\n      },\n    );\n  });\n\n  it(\"works with where: todo\", async () => {\n    const f: AggregateOpts<\n      Employee\n    > = {\n      $select: {\n        \"office:approximateDistinct\": \"unordered\",\n      },\n    };\n  });\n});\n"],"mappings":"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","ignoreList":[]}