{"version":3,"file":"convertWireToOsdkObjects.js","names":["invariant","createOsdkObject","convertWireToOsdkObjects","client","objects","interfaceApiName","forceRemoveRid","derivedPropertyTypesByName","selectedProps","strictNonNull","fixObjectPropertiesInPlace","ifaceDef","ontologyProvider","getInterfaceDefinition","undefined","ifaceSelected","Object","keys","properties","ret","rawObj","objectDef","getObjectDefinition","$apiName","process","env","NODE_ENV","objProps","conforming","invariantInterfacesAsViews","apiName","isConforming","reframeAsObjectInPlace","convertInterfacePropNamesToObjectPropNames","Error","osdkObject","$as","push","convertWireToOsdkObjects2","derivedPropertyTypeByName","interfaceToObjectTypeMappings","interfaceToObjMapping","filter","val","includes","values","primaryKeyApiName","ifacePropsToMap","map","ifaceProp","interfaceMap","newProps","sptProp","regularProp","entries","value","assign","$primaryKey","def","obj","propsToCheck","propName","nullable","logger","debug","$objectType","warning","warn","console","error","objs","__rid","$rid","__apiName","__primaryKey","$title","__title"],"sources":["convertWireToOsdkObjects.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  InterfaceMetadata,\n  NullabilityAdherence,\n  ObjectMetadata,\n} from \"@osdk/api\";\nimport type {\n  InterfaceToObjectTypeMappings,\n  InterfaceTypeApiName,\n  OntologyObjectV2,\n} from \"@osdk/foundry.ontologies\";\nimport invariant from \"tiny-invariant\";\nimport type { DerivedPropertyRuntimeMetadata } from \"../derivedProperties/derivedPropertyRuntimeMetadata.js\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\nimport {\n  type FetchedObjectTypeDefinition,\n} from \"../ontology/OntologyProvider.js\";\nimport { createOsdkObject } from \"./convertWireToOsdkObjects/createOsdkObject.js\";\nimport type { InterfaceHolder } from \"./convertWireToOsdkObjects/InterfaceHolder.js\";\nimport type { ObjectHolder } from \"./convertWireToOsdkObjects/ObjectHolder.js\";\nimport type { SimpleOsdkProperties } from \"./SimpleOsdkProperties.js\";\n\n/**\n * If interfaceApiName is not undefined, converts the instances of the\n * interface into their respective\n * underlying concrete types and then returns the $as() representation\n * for the consumers.\n *\n * Otherwise just does the conversion\n *\n * May mutate in place for performance reasons. If you need a clean copy,\n * keep it first.\n *\n * However, you must use the returned value, which will be whatever is correct.\n *\n * @internal\n * @param interfaceApiName - if undefined\n */\nexport async function convertWireToOsdkObjects(\n  client: MinimalClient,\n  objects: OntologyObjectV2[],\n  interfaceApiName: string | undefined,\n  forceRemoveRid: boolean = false,\n  derivedPropertyTypesByName: DerivedPropertyRuntimeMetadata,\n  selectedProps?: ReadonlyArray<string>,\n  strictNonNull: NullabilityAdherence = false,\n): Promise<Array<ObjectHolder | InterfaceHolder>> {\n  // remove the __ prefixed properties and convert them to $ prefixed.\n  // updates in place\n  fixObjectPropertiesInPlace(objects, forceRemoveRid);\n\n  const ifaceDef = interfaceApiName\n    ? await client.ontologyProvider.getInterfaceDefinition(interfaceApiName)\n    : undefined;\n  const ifaceSelected = ifaceDef\n    ? (selectedProps ?? Object.keys(ifaceDef.properties))\n    : undefined;\n\n  const ret = [];\n  for (const rawObj of objects) {\n    const objectDef = await client.ontologyProvider.getObjectDefinition(\n      rawObj.$apiName,\n    );\n    invariant(objectDef, `Missing definition for '${rawObj.$apiName}'`);\n\n    // default value for when we are checking an object\n    let objProps;\n\n    let conforming = true;\n    if (ifaceDef && ifaceSelected) {\n      // API returns interface spt names but we cache by real values\n      invariantInterfacesAsViews(objectDef, ifaceDef.apiName, client);\n\n      conforming &&= isConforming(client, ifaceDef, rawObj, ifaceSelected);\n\n      reframeAsObjectInPlace(objectDef, ifaceDef.apiName, rawObj);\n\n      objProps = convertInterfacePropNamesToObjectPropNames(\n        objectDef,\n        ifaceDef.apiName,\n        ifaceSelected,\n      );\n    } else {\n      objProps = selectedProps ?? Object.keys(objectDef.properties);\n    }\n\n    conforming &&= isConforming(client, objectDef, rawObj, objProps);\n\n    if (strictNonNull === \"throw\" && !conforming) {\n      throw new Error(\n        \"Unable to safely convert objects as some non nullable properties are null\",\n      );\n    } else if (strictNonNull === \"drop\" && !conforming) {\n      continue;\n    }\n\n    let osdkObject: ObjectHolder | InterfaceHolder = createOsdkObject(\n      client,\n      objectDef,\n      rawObj,\n      derivedPropertyTypesByName,\n    );\n    if (interfaceApiName) osdkObject = osdkObject.$as(interfaceApiName);\n\n    ret.push(osdkObject);\n  }\n\n  return ret;\n}\n\nexport async function convertWireToOsdkObjects2(\n  client: MinimalClient,\n  objects: OntologyObjectV2[],\n  interfaceApiName: string,\n  derivedPropertyTypeByName: DerivedPropertyRuntimeMetadata,\n  forceRemoveRid?: boolean,\n  selectedProps?: ReadonlyArray<string>,\n  strictNonNull?: NullabilityAdherence,\n  interfaceToObjectTypeMappings?: Record<\n    InterfaceTypeApiName,\n    InterfaceToObjectTypeMappings\n  >,\n): Promise<Array<InterfaceHolder>>;\nexport async function convertWireToOsdkObjects2(\n  client: MinimalClient,\n  objects: OntologyObjectV2[],\n  interfaceApiName: undefined,\n  derivedPropertyTypeByName: DerivedPropertyRuntimeMetadata,\n  forceRemoveRid?: boolean,\n  selectedProps?: ReadonlyArray<string>,\n  strictNonNull?: NullabilityAdherence,\n  interfaceToObjectTypeMappings?: Record<\n    InterfaceTypeApiName,\n    InterfaceToObjectTypeMappings\n  >,\n): Promise<Array<ObjectHolder>>;\nexport async function convertWireToOsdkObjects2(\n  client: MinimalClient,\n  objects: OntologyObjectV2[],\n  interfaceApiName: string | undefined,\n  derivedPropertyTypeByName: DerivedPropertyRuntimeMetadata,\n  forceRemoveRid?: boolean,\n  selectedProps?: ReadonlyArray<string>,\n  strictNonNull?: NullabilityAdherence,\n  interfaceToObjectTypeMappings?: Record<\n    InterfaceTypeApiName,\n    InterfaceToObjectTypeMappings\n  >,\n): Promise<Array<ObjectHolder | InterfaceHolder>>;\n/**\n * @internal\n */\nexport async function convertWireToOsdkObjects2(\n  client: MinimalClient,\n  objects: OntologyObjectV2[],\n  interfaceApiName: string | undefined,\n  derivedPropertyTypeByName: DerivedPropertyRuntimeMetadata,\n  forceRemoveRid: boolean = false,\n  selectedProps?: ReadonlyArray<string>,\n  strictNonNull: NullabilityAdherence = false,\n  interfaceToObjectTypeMappings: Record<\n    InterfaceTypeApiName,\n    InterfaceToObjectTypeMappings\n  > = {},\n): Promise<Array<ObjectHolder | InterfaceHolder>> {\n  fixObjectPropertiesInPlace(objects, forceRemoveRid);\n\n  const ret = [];\n  for (const rawObj of objects) {\n    const objectDef = await client.ontologyProvider.getObjectDefinition(\n      rawObj.$apiName,\n    );\n    invariant(objectDef, `Missing definition for '${rawObj.$apiName}'`);\n\n    const interfaceToObjMapping = interfaceApiName\n      ? interfaceToObjectTypeMappings[interfaceApiName as InterfaceTypeApiName][\n        rawObj.$apiName\n      ]\n      : undefined;\n\n    const ifaceSelected = interfaceApiName && interfaceToObjMapping\n      ? (selectedProps\n        ? Object.keys(interfaceToObjMapping).filter(\n          val => {\n            selectedProps?.includes(interfaceToObjMapping[val]);\n          },\n        )\n        : [\n          ...Object.values(interfaceToObjMapping),\n          objectDef.primaryKeyApiName,\n        ])\n      : undefined;\n\n    // default value for when we are checking an object\n    let objProps;\n\n    let conforming = true;\n    if (interfaceApiName && ifaceSelected) {\n      invariantInterfacesAsViews(objectDef, interfaceApiName, client);\n\n      objProps = ifaceSelected;\n    } else {\n      objProps = selectedProps ?? Object.keys(objectDef.properties);\n    }\n\n    conforming &&= isConforming(client, objectDef, rawObj, objProps);\n\n    if (strictNonNull === \"throw\" && !conforming) {\n      throw new Error(\n        \"Unable to safely convert objects as some non nullable properties are null\",\n      );\n    } else if (strictNonNull === \"drop\" && !conforming) {\n      continue;\n    }\n\n    let osdkObject: ObjectHolder | InterfaceHolder = createOsdkObject(\n      client,\n      objectDef,\n      rawObj,\n      derivedPropertyTypeByName,\n    );\n    if (interfaceApiName) osdkObject = osdkObject.$as(interfaceApiName);\n\n    ret.push(osdkObject);\n  }\n\n  return ret;\n}\n\n/**\n * @internal\n *\n * Utility function that lets us take down selected property names from an interface\n * and convert them to an array of property names on an object.\n */\nexport function convertInterfacePropNamesToObjectPropNames(\n  objectDef: FetchedObjectTypeDefinition,\n  interfaceApiName: string,\n  ifacePropsToMap: readonly string[],\n): string[] {\n  return ifacePropsToMap.map((ifaceProp) =>\n    objectDef.interfaceMap[interfaceApiName][ifaceProp]\n  );\n}\n\n/**\n * Takes a raw object from the wire (contextually as an interface) and\n * updates the fields to reflect the underlying objectDef instead\n * @param objectDef\n * @param interfaceApiName\n * @param client\n * @param rawObj\n */\nfunction reframeAsObjectInPlace(\n  objectDef: FetchedObjectTypeDefinition,\n  interfaceApiName: string,\n  rawObj: OntologyObjectV2,\n) {\n  const newProps: Record<string, any> = {};\n  for (\n    const [sptProp, regularProp] of Object.entries(\n      objectDef.interfaceMap[interfaceApiName],\n    )\n  ) {\n    if (sptProp in rawObj) {\n      const value = rawObj[sptProp];\n      delete rawObj[sptProp];\n      if (value !== undefined) {\n        newProps[regularProp] = value;\n      }\n    }\n  }\n  Object.assign(rawObj, newProps);\n\n  if (!(objectDef.primaryKeyApiName in rawObj)) {\n    rawObj[objectDef.primaryKeyApiName] = rawObj.$primaryKey;\n  }\n}\n\nfunction isConforming(\n  client: MinimalClient,\n  def:\n    | InterfaceMetadata\n    | ObjectMetadata,\n  obj: OntologyObjectV2,\n  propsToCheck: readonly string[],\n) {\n  for (const propName of propsToCheck) {\n    if (\n      propName in def.properties && def.properties[propName].nullable === false\n      && obj[propName] == null\n    ) {\n      if (process.env.NODE_ENV !== \"production\") {\n        client.logger?.debug(\n          {\n            obj: {\n              $apiName: obj[\"$apiName\"],\n              $objectType: obj[\"$objectType\"],\n              $primaryKey: obj[\"$primaryKey\"],\n            },\n          },\n          `Found object that does not conform to its definition. Expected ${def.apiName}'s ${propName} to not be null.`,\n        );\n      }\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction invariantInterfacesAsViews(\n  objectDef: FetchedObjectTypeDefinition,\n  interfaceApiName: string,\n  client: MinimalClient,\n): asserts objectDef is typeof objectDef & { interfaceMap: {} } {\n  if (objectDef.interfaceMap?.[interfaceApiName] == null) {\n    const warning =\n      \"Interfaces are only supported 'as views' but your metadata object is missing the correct information. This suggests your interfaces have not been migrated to the newer version yet and you cannot use this version of the SDK.\";\n    if (client.logger) {\n      client.logger.warn(warning);\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(`WARNING! ${warning}`);\n    }\n    throw new Error(warning);\n  }\n}\n\nfunction fixObjectPropertiesInPlace(\n  objs: OntologyObjectV2[],\n  forceRemoveRid: boolean,\n): asserts objs is SimpleOsdkProperties[] {\n  for (const obj of objs) {\n    if (forceRemoveRid) {\n      delete obj.__rid;\n    }\n\n    if (obj.__rid) {\n      obj.$rid = obj.__rid;\n      delete obj.__rid;\n    }\n\n    // Backend returns as __apiName but we want to stick to $ structure\n    obj.$apiName ??= obj.__apiName;\n\n    // for now these are the same but when we start doing interface projections the $objectType will always be underlying and\n    // the $apiName will be for the current view (in current designs)\n    obj.$objectType = obj.$apiName;\n\n    // copying over for now as its always returned. In the future, this should just be inferred from underlying\n    obj.$primaryKey ??= obj.__primaryKey;\n    obj.$title ??= obj.__title;\n\n    // we don't want people to use these\n    delete obj.__apiName;\n    delete obj.__primaryKey;\n    delete obj.__title;\n  }\n}\n"],"mappings":"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","ignoreList":[]}