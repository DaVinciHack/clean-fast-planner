{"version":3,"file":"LinkDefinitions.test.js","names":["describe","expectTypeOf","it","toEqualTypeOf","branded"],"sources":["LinkDefinitions.test.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ObjectSet,\n  ObjectTypeDefinition,\n  Osdk,\n  OsdkObjectLinksObject,\n  SelectArg,\n  SingleLinkAccessor,\n} from \"@osdk/api\";\nimport type {\n  Employee,\n  equipment,\n  Office,\n  Person,\n} from \"@osdk/client.test.ontology\";\nimport { describe, expectTypeOf, it } from \"vitest\";\n\ndescribe(\"LinkDefinitions\", () => {\n  describe(\"OsdkObjectLinkObject\", () => {\n    it(\"is correctly absent on types with no links\", () => {\n      expectTypeOf<OsdkObjectLinksObject<equipment>>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"populates on types with links\", () => {\n      expectTypeOf<OsdkObjectLinksObject<Employee>>()\n        .toEqualTypeOf<\n          {\n            readonly lead: SingleLinkAccessor<Employee>;\n            readonly officeLink: SingleLinkAccessor<Office>;\n            readonly peeps: ObjectSet<Employee>;\n          }\n        >();\n    });\n\n    describe(\"SingletonLinkAccessor\", () => {\n      it(\"infers select properly\", () => {\n        // this helper lets us get return types of functions that are generic\n        class Helper<\n          T extends ObjectTypeDefinition,\n          const A extends SelectArg<T>,\n        > {\n          constructor(private accessor: SingleLinkAccessor<T>) {}\n\n          public fetchOne() {\n            return this.accessor.fetchOne<A>();\n          }\n        }\n\n        type PersonDef = Person;\n\n        //   // e.g. .lead.fetchOne({});\n        expectTypeOf<Awaited<ReturnType<Helper<PersonDef, {}>[\"fetchOne\"]>>>()\n          .branded.toEqualTypeOf<Osdk<PersonDef>>();\n\n        // e.g. .lead.fetchOne();\n        expectTypeOf<\n          Awaited<\n            ReturnType<Helper<PersonDef, SelectArg<PersonDef>>[\"fetchOne\"]>\n          >\n        >().branded\n          .toEqualTypeOf<Osdk<PersonDef>>();\n\n        // e.g. .lead.fetchOne({ select: [] });\n        expectTypeOf<\n          Awaited<\n            ReturnType<Helper<PersonDef, { $select: [] }>[\"fetchOne\"]>\n          >\n        >().branded\n          .toEqualTypeOf<Osdk<PersonDef>>();\n\n        // e.g. .lead.fetchOne({ select: [\"name\"] });\n        expectTypeOf<\n          Awaited<\n            ReturnType<Helper<PersonDef, { $select: [\"name\"] }>[\"fetchOne\"]>\n          >\n        >()\n          .toEqualTypeOf<Osdk<PersonDef, \"name\">>();\n      });\n    });\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,EAAE,QAAQ,QAAQ;AAEnDF,QAAQ,CAAC,iBAAiB,EAAE,MAAM;EAChCA,QAAQ,CAAC,sBAAsB,EAAE,MAAM;IACrCE,EAAE,CAAC,4CAA4C,EAAE,MAAM;MACrDD,YAAY,CAAmC,CAAC,CAC7CE,aAAa,CAAQ,CAAC;IAC3B,CAAC,CAAC;IAEFD,EAAE,CAAC,+BAA+B,EAAE,MAAM;MACxCD,YAAY,CAAkC,CAAC,CAC5CE,aAAa,CAMZ,CAAC;IACP,CAAC,CAAC;IAEFH,QAAQ,CAAC,uBAAuB,EAAE,MAAM;MACtCE,EAAE,CAAC,wBAAwB,EAAE,MAAM;QACjC;;QAcA;QACAD,YAAY,CAAyD,CAAC,CACnEG,OAAO,CAACD,aAAa,CAAkB,CAAC;;QAE3C;QACAF,YAAY,CAIV,CAAC,CAACG,OAAO,CACRD,aAAa,CAAkB,CAAC;;QAEnC;QACAF,YAAY,CAIV,CAAC,CAACG,OAAO,CACRD,aAAa,CAAkB,CAAC;;QAEnC;QACAF,YAAY,CAIV,CAAC,CACAE,aAAa,CAA0B,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}