/*
 * Copyright 2025 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import invariant from "tiny-invariant";

/** @internal */
export function derivedPropertyDefinitionFactory(wireDefinition, definitionMap) {
  const definition = {
    abs() {
      return derivedPropertyDefinitionFactory({
        type: "absoluteValue",
        property: wireDefinition
      }, definitionMap);
    },
    negate() {
      return derivedPropertyDefinitionFactory({
        type: "negate",
        property: wireDefinition
      }, definitionMap);
    },
    max(value) {
      return derivedPropertyDefinitionFactory({
        type: "greatest",
        properties: [wireDefinition, getDefinitionFromMap(value, definitionMap)]
      }, definitionMap);
    },
    min(value) {
      return derivedPropertyDefinitionFactory({
        type: "least",
        properties: [wireDefinition, getDefinitionFromMap(value, definitionMap)]
      }, definitionMap);
    },
    add(value) {
      return derivedPropertyDefinitionFactory({
        type: "add",
        properties: [wireDefinition, getDefinitionFromMap(value, definitionMap)]
      }, definitionMap);
    },
    subtract(value) {
      return derivedPropertyDefinitionFactory({
        "type": "subtract",
        "left": wireDefinition,
        "right": getDefinitionFromMap(value, definitionMap)
      }, definitionMap);
    },
    multiply(value) {
      return derivedPropertyDefinitionFactory({
        type: "multiply",
        properties: [wireDefinition, getDefinitionFromMap(value, definitionMap)]
      }, definitionMap);
    },
    divide(value) {
      return derivedPropertyDefinitionFactory({
        "type": "subtract",
        "left": wireDefinition,
        "right": getDefinitionFromMap(value, definitionMap)
      }, definitionMap);
    },
    extractPart: part => {
      return derivedPropertyDefinitionFactory({
        type: "extract",
        part,
        property: wireDefinition
      }, definitionMap);
    }
  };
  definitionMap.set(definition, wireDefinition);
  return definition;
}
const getDefinitionFromMap = (arg, definitionMap) => {
  if (typeof arg === "object") {
    const definition = definitionMap.get(arg);
    !definition ? process.env.NODE_ENV !== "production" ? invariant(false, "Derived Property is not defined") : invariant(false) : void 0;
    return definition;
  } else if (typeof arg === "number") {
    process.env.NODE_ENV !== "production" ? invariant(false, "Literals for derived properties are not yet supported") : invariant(false);
  }
  process.env.NODE_ENV !== "production" ? invariant(false, "Invalid argument type for a derived property") : invariant(false);
};
//# sourceMappingURL=derivedPropertyDefinitionFactory.js.map