{"version":3,"file":"InterfaceObjectSet.test.js","names":["Employee","FooInterface","beforeAll","describe","expect","expectTypeOf","it","LegacyFauxFoundry","startNodeApiServer","createClient","client","testSetup","apiServer","close","employeeObjectSet","fooInterfaceSet","union","subtract","intersect","objectSet","data","interfacers","fetchPage","santa","find","obj","$primaryKey","toBeDefined","fooSpt","toEqual","foo","$objectType","$as","fullName","whereClausedInterface","where","$includeAllBaseObjectProperties","interfaceObj","asEmployee","toEqualTypeOf","office","whereClausedInterface2","interfaceObj2","asEmployee2","toBeUndefined"],"sources":["InterfaceObjectSet.test.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Employee, FooInterface } from \"@osdk/client.test.ontology\";\nimport { beforeAll, describe, expect, expectTypeOf, it } from \"vitest\";\n\nimport type { Osdk, PropertyKeys } from \"@osdk/api\";\nimport { LegacyFauxFoundry, startNodeApiServer } from \"@osdk/shared.test\";\nimport type { Client } from \"../Client.js\";\nimport { createClient } from \"../createClient.js\";\n\ndescribe(\"ObjectSet\", () => {\n  let client: Client;\n\n  beforeAll(() => {\n    const testSetup = startNodeApiServer(new LegacyFauxFoundry(), createClient);\n    ({ client } = testSetup);\n    return () => {\n      testSetup.apiServer.close();\n    };\n  });\n\n  it(\"does not allow intersect/union/subtract with implementing interface types, for now\", () => {\n    const employeeObjectSet = client(Employee);\n    const fooInterfaceSet = client(FooInterface);\n\n    // @ts-expect-error\n    employeeObjectSet.union(fooInterfaceSet);\n\n    // @ts-expect-error\n    employeeObjectSet.subtract(fooInterfaceSet);\n\n    // @ts-expect-error\n    employeeObjectSet.intersect(fooInterfaceSet);\n  });\n\n  it(\"interface objects set loading\", async () => {\n    const objectSet = client(FooInterface);\n    const { data: interfacers } = await objectSet.fetchPage();\n    const santa = interfacers.find(obj => obj.$primaryKey === 50050);\n    expect(santa).toBeDefined();\n    expect(santa?.fooSpt).toEqual(\"Santa Claus\");\n\n    for (const foo of interfacers) {\n      if (foo.$objectType === \"Employee\") {\n        expect(foo.fooSpt).toEqual(foo.$as(Employee).fullName);\n      }\n    }\n  });\n\n  it(\"allows fetching by field from a interface object set - where clause\", async () => {\n    const whereClausedInterface = await client(FooInterface).where({\n      fooSpt: \"Santa Claus\",\n    }).fetchPage({ $includeAllBaseObjectProperties: true });\n\n    const interfaceObj = whereClausedInterface.data[0];\n    expect(interfaceObj.fooSpt).toEqual(\"Santa Claus\");\n\n    const asEmployee = interfaceObj.$as(Employee);\n    expectTypeOf<typeof asEmployee>().toEqualTypeOf<\n      Osdk.Instance<Employee, \"$allBaseProperties\", PropertyKeys<Employee>, {}>\n    >;\n\n    expect(asEmployee.fullName).toEqual(\"Santa Claus\");\n    expect(asEmployee.office).toEqual(\"NYC\");\n\n    const whereClausedInterface2 = await client(FooInterface).where({\n      fooSpt: \"Santa Claus\",\n    }).fetchPage({\n      $includeAllBaseObjectProperties: false,\n    });\n\n    const interfaceObj2 = whereClausedInterface2.data[0];\n    expect(interfaceObj2.fooSpt).toEqual(\"Santa Claus\");\n    const asEmployee2 = interfaceObj2.$as(Employee);\n\n    expectTypeOf<typeof asEmployee2>().toEqualTypeOf<\n      Osdk.Instance<Employee, never, \"fullName\", {}>\n    >;\n\n    expect(asEmployee2.fullName).toEqual(\"Santa Claus\");\n    // @ts-expect-error\n    expect(asEmployee2.office).toBeUndefined();\n  });\n});\n"],"mappings":"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","ignoreList":[]}