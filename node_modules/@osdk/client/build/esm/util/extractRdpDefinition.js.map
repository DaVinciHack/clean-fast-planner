{"version":3,"file":"extractRdpDefinition.js","names":["invariant","extractRdpDefinition","clientCtx","objectSet","extractRdpDefinitionInternal","undefined","definitions","methodInputObjectType","type","childObjectType","objDef","ontologyProvider","getObjectDefinition","linkDef","links","link","process","env","NODE_ENV","targetType","name","definition","Object","entries","derivedProperties","selectedOrCollectedPropertyType","operation","operationLevelObjectType","properties","selectedPropertyApiName","objectType","interfaceType","objectSets","objectSetTypes","Promise","all","map","os","reduce","acc","keys","length","firstValidChildObjectType","find","every"],"sources":["extractRdpDefinition.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ObjectSet } from \"@osdk/foundry.ontologies\";\nimport invariant from \"tiny-invariant\";\nimport type { DerivedPropertyRuntimeMetadata } from \"../derivedProperties/derivedPropertyRuntimeMetadata.js\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\n\nexport async function extractRdpDefinition(\n  clientCtx: MinimalClient,\n  objectSet: ObjectSet,\n): Promise<\n  DerivedPropertyRuntimeMetadata\n> {\n  return (await extractRdpDefinitionInternal(\n    clientCtx,\n    objectSet,\n    undefined,\n  )).definitions;\n}\n\n/* @internal\n* Returns a tuple of the derived property definitions and the object type that the derived property is defined on.\n*/\nasync function extractRdpDefinitionInternal(\n  clientCtx: MinimalClient,\n  objectSet: ObjectSet,\n  methodInputObjectType: string | undefined,\n): Promise<\n  {\n    definitions: DerivedPropertyRuntimeMetadata;\n    childObjectType?: string;\n  }\n> {\n  switch (objectSet.type) {\n    case \"searchAround\": {\n      const { definitions, childObjectType } =\n        await extractRdpDefinitionInternal(\n          clientCtx,\n          objectSet.objectSet,\n          methodInputObjectType,\n        );\n\n      if (childObjectType === undefined || childObjectType === \"\") {\n        return { definitions: {} };\n      }\n      const objDef = await clientCtx.ontologyProvider.getObjectDefinition(\n        childObjectType,\n      );\n      const linkDef = objDef.links[objectSet.link];\n      invariant(linkDef, `Missing link definition for '${objectSet.link}'`);\n      return {\n        definitions,\n        childObjectType: objDef.links[objectSet.link].targetType,\n      };\n    }\n    case \"withProperties\": {\n      // These are the definitions and current object type for all object set operations prior to the definition (e.g. filter, pivotTo, etc.)\n      const { definitions, childObjectType } =\n        await extractRdpDefinitionInternal(\n          clientCtx,\n          objectSet.objectSet,\n          methodInputObjectType,\n        );\n      if (childObjectType === undefined || childObjectType === \"\") {\n        return { definitions: {} };\n      }\n\n      for (\n        const [name, definition] of Object.entries(objectSet.derivedProperties)\n      ) {\n        if (definition.type !== \"selection\") {\n          definitions[name] = {\n            selectedOrCollectedPropertyType: undefined,\n            definition,\n          };\n          continue;\n        }\n\n        switch (definition.operation.type) {\n          case \"collectList\":\n          case \"collectSet\":\n          case \"get\":\n            // This is the object set construction for the derived property definition construction. We pass in childObjectType so that when we reach MethodInputObjectSet, we know where to start looking.\n            const { childObjectType: operationLevelObjectType } =\n              await extractRdpDefinitionInternal(\n                clientCtx,\n                definition.objectSet,\n                childObjectType,\n              );\n            if (\n              operationLevelObjectType === undefined\n              || operationLevelObjectType === \"\"\n            ) {\n              return { definitions: {} };\n            }\n            const objDef = await clientCtx.ontologyProvider.getObjectDefinition(\n              operationLevelObjectType,\n            );\n\n            definitions[name] = {\n              selectedOrCollectedPropertyType:\n                objDef.properties[definition.operation.selectedPropertyApiName],\n              definition,\n            };\n            break;\n\n          default:\n            definitions[name] = {\n              selectedOrCollectedPropertyType: undefined,\n              definition,\n            };\n        }\n      }\n      return { definitions, childObjectType };\n    }\n    case \"methodInput\":\n      return { definitions: {}, childObjectType: methodInputObjectType };\n    case \"base\":\n      return { definitions: {}, childObjectType: objectSet.objectType };\n    case \"interfaceBase\":\n      return { definitions: {}, childObjectType: objectSet.interfaceType };\n    case \"filter\":\n    case \"asBaseObjectTypes\":\n    case \"asType\":\n    case \"nearestNeighbors\":\n      return extractRdpDefinitionInternal(\n        clientCtx,\n        objectSet.objectSet,\n        methodInputObjectType,\n      );\n    // These will throw in OSS so we should throw here so no request is made\n    case \"intersect\":\n    case \"subtract\":\n    case \"union\":\n      const objectSets = objectSet.objectSets;\n      const objectSetTypes = await Promise.all(\n        objectSets.map((os) =>\n          extractRdpDefinitionInternal(\n            clientCtx,\n            os,\n            methodInputObjectType,\n          )\n        ),\n      );\n\n      const definitions = objectSetTypes.reduce(\n        (acc, { definitions }) => ({ ...acc, ...definitions }),\n        {},\n      );\n      invariant(\n        Object.keys(definitions).length === 0,\n        \"Object sets combined using intersect, subtract, or union must not contain any derived property definitions\",\n      );\n\n      const firstValidChildObjectType = objectSetTypes.find(\n        ({ childObjectType }) => childObjectType != null,\n      )?.childObjectType;\n      invariant(\n        objectSetTypes.every(\n          ({ childObjectType }) =>\n            childObjectType === firstValidChildObjectType\n            || childObjectType == null,\n        ),\n        \"All object sets in an intersect, subtract, or union must have the same child object type\",\n      );\n\n      return {\n        definitions: {},\n        childObjectType: firstValidChildObjectType,\n      };\n    case \"static\":\n    case \"reference\":\n      // Static and reference object sets are always intersected with a base object set, so we can just return no child object type.\n      return { definitions: {} };\n    // We don't have to worry about new object sets being added and doing a runtime break and breaking people since the OSDK is always constructing these.\n    case \"interfaceLinkSearchAround\":\n      invariant(\n        false,\n        `Unsupported object set type for Runtime Derived Properties`,\n      );\n    default:\n      const _: never = objectSet;\n      invariant(\n        false,\n        `Unsupported object set type for Runtime Derived Properties`,\n      );\n  }\n}\n"],"mappings":"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","ignoreList":[]}