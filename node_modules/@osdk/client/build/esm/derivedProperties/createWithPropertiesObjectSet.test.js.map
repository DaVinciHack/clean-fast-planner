{"version":3,"file":"createWithPropertiesObjectSet.test.js","names":["Employee","describe","expect","it","createWithPropertiesObjectSet","map","Map","deriveObjectSet","type","result","base","pivotTo","selectProperty","definition","get","toMatchInlineSnapshot","clause","aggregate","percentile","limit","secondResult","secondDefinition"],"sources":["createWithPropertiesObjectSet.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DerivedProperty } from \"@osdk/api\";\nimport { Employee } from \"@osdk/client.test.ontology\";\nimport type { DerivedPropertyDefinition } from \"@osdk/foundry.ontologies\";\nimport { describe, expect, it } from \"vitest\";\nimport { createWithPropertiesObjectSet } from \"./createWithPropertiesObjectSet.js\";\n\ndescribe(createWithPropertiesObjectSet, () => {\n  it(\"correctly creates basic object set with derived properties\", () => {\n    const map = new Map<any, DerivedPropertyDefinition>();\n    const deriveObjectSet = createWithPropertiesObjectSet(Employee, {\n      type: \"methodInput\",\n    }, map);\n\n    const clause = {\n      \"derivedPropertyName\": (base) =>\n        base.pivotTo(\"lead\").selectProperty(\"employeeId\"),\n    } satisfies DerivedProperty.Clause<Employee>;\n\n    const result = clause[\"derivedPropertyName\"](deriveObjectSet);\n    const definition = map.get(result);\n    expect(definition).toMatchInlineSnapshot(`\n        {\n          \"objectSet\": {\n            \"link\": \"lead\",\n            \"objectSet\": {\n              \"type\": \"methodInput\",\n            },\n            \"type\": \"searchAround\",\n          },\n          \"operation\": {\n            \"selectedPropertyApiName\": \"employeeId\",\n            \"type\": \"get\",\n          },\n          \"type\": \"selection\",\n        }\n      `);\n  });\n\n  it(\"correctly handles multiple definitions in one clause\", () => {\n    const map = new Map<any, DerivedPropertyDefinition>();\n    const deriveObjectSet = createWithPropertiesObjectSet(Employee, {\n      type: \"methodInput\",\n    }, map);\n\n    const clause: DerivedProperty.Clause<Employee> = {\n      \"derivedPropertyName\": (base) =>\n        base.pivotTo(\"lead\").aggregate(\"employeeId:approximatePercentile\", {\n          percentile: 0.5,\n        }),\n\n      \"secondaryDerivedPropertyName\": (base) =>\n        base.pivotTo(\"lead\").aggregate(\"fullName:collectSet\", {\n          limit: 10,\n        }),\n    };\n\n    const result = clause[\"derivedPropertyName\"](deriveObjectSet);\n    const definition = map.get(result);\n\n    const secondResult = clause[\"secondaryDerivedPropertyName\"](\n      deriveObjectSet,\n    );\n    const secondDefinition = map.get(secondResult);\n\n    expect(definition).toMatchInlineSnapshot(`\n        {\n          \"objectSet\": {\n            \"link\": \"lead\",\n            \"objectSet\": {\n              \"type\": \"methodInput\",\n            },\n            \"type\": \"searchAround\",\n          },\n          \"operation\": {\n            \"approximatePercentile\": 0.5,\n            \"selectedPropertyApiName\": \"employeeId\",\n            \"type\": \"approximatePercentile\",\n          },\n          \"type\": \"selection\",\n        }\n      `);\n\n    expect(secondDefinition).toMatchInlineSnapshot(`\n        {\n          \"objectSet\": {\n            \"link\": \"lead\",\n            \"objectSet\": {\n              \"type\": \"methodInput\",\n            },\n            \"type\": \"searchAround\",\n          },\n          \"operation\": {\n            \"limit\": 10,\n            \"selectedPropertyApiName\": \"fullName\",\n            \"type\": \"collectSet\",\n          },\n          \"type\": \"selection\",\n        }\n      `);\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,QAAQ,QAAQ,4BAA4B;AAErD,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,QAAQ;AAC7C,SAASC,6BAA6B,QAAQ,oCAAoC;AAElFH,QAAQ,CAACG,6BAA6B,EAAE,MAAM;EAC5CD,EAAE,CAAC,4DAA4D,EAAE,MAAM;IACrE,MAAME,GAAG,GAAG,IAAIC,GAAG,CAAiC,CAAC;IACrD,MAAMC,eAAe,GAAGH,6BAA6B,CAACJ,QAAQ,EAAE;MAC9DQ,IAAI,EAAE;IACR,CAAC,EAAEH,GAAG,CAAC;IAOP,MAAMI,MAAM,GALG;MACb,qBAAqB,EAAGC,IAAI,IAC1BA,IAAI,CAACC,OAAO,CAAC,MAAM,CAAC,CAACC,cAAc,CAAC,YAAY;IACpD,CAAC,CAEqB,qBAAqB,CAAC,CAACL,eAAe,CAAC;IAC7D,MAAMM,UAAU,GAAGR,GAAG,CAACS,GAAG,CAACL,MAAM,CAAC;IAClCP,MAAM,CAACW,UAAU,CAAC,CAACE,qBAAqB,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;EACN,CAAC,CAAC;EAEFZ,EAAE,CAAC,sDAAsD,EAAE,MAAM;IAC/D,MAAME,GAAG,GAAG,IAAIC,GAAG,CAAiC,CAAC;IACrD,MAAMC,eAAe,GAAGH,6BAA6B,CAACJ,QAAQ,EAAE;MAC9DQ,IAAI,EAAE;IACR,CAAC,EAAEH,GAAG,CAAC;IAEP,MAAMW,MAAwC,GAAG;MAC/C,qBAAqB,EAAGN,IAAI,IAC1BA,IAAI,CAACC,OAAO,CAAC,MAAM,CAAC,CAACM,SAAS,CAAC,kCAAkC,EAAE;QACjEC,UAAU,EAAE;MACd,CAAC,CAAC;MAEJ,8BAA8B,EAAGR,IAAI,IACnCA,IAAI,CAACC,OAAO,CAAC,MAAM,CAAC,CAACM,SAAS,CAAC,qBAAqB,EAAE;QACpDE,KAAK,EAAE;MACT,CAAC;IACL,CAAC;IAED,MAAMV,MAAM,GAAGO,MAAM,CAAC,qBAAqB,CAAC,CAACT,eAAe,CAAC;IAC7D,MAAMM,UAAU,GAAGR,GAAG,CAACS,GAAG,CAACL,MAAM,CAAC;IAElC,MAAMW,YAAY,GAAGJ,MAAM,CAAC,8BAA8B,CAAC,CACzDT,eACF,CAAC;IACD,MAAMc,gBAAgB,GAAGhB,GAAG,CAACS,GAAG,CAACM,YAAY,CAAC;IAE9ClB,MAAM,CAACW,UAAU,CAAC,CAACE,qBAAqB,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;IAEJb,MAAM,CAACmB,gBAAgB,CAAC,CAACN,qBAAqB,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;EACN,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}