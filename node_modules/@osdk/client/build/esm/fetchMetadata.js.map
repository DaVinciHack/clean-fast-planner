{"version":3,"file":"fetchMetadata.js","names":["InterfaceDefinitions","fetchMetadataInternal","client","definition","type","interfaceDefs","objectTypeDef","ontologyProvider","getObjectDefinition","apiName","getInterfaceDefinition","getActionDefinition","getQueryDefinition","isFixedVersion","version","undefined","Error"],"sources":["fetchMetadata.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ActionDefinition,\n  ActionMetadata,\n  InterfaceDefinition,\n  InterfaceMetadata,\n  ObjectMetadata,\n  ObjectTypeDefinition,\n  QueryDefinition,\n  QueryMetadata,\n} from \"@osdk/api\";\nimport type { MinimalClient } from \"./MinimalClientContext.js\";\nimport { InterfaceDefinitions } from \"./ontology/OntologyProvider.js\";\n\n/** @internal */\nexport const fetchMetadataInternal = async <\n  Q extends (\n    | ObjectTypeDefinition\n    | InterfaceDefinition\n    | ActionDefinition<any>\n    | QueryDefinition<any>\n  ),\n>(\n  client: MinimalClient,\n  definition: Q,\n): Promise<\n  Q extends ObjectTypeDefinition ? ObjectMetadata\n    : Q extends InterfaceDefinition ? InterfaceMetadata\n    : Q extends ActionDefinition<any> ? ActionMetadata\n    : Q extends QueryDefinition<any> ? QueryMetadata\n    : never\n> => {\n  if (definition.type === \"object\") {\n    const { [InterfaceDefinitions]: interfaceDefs, ...objectTypeDef } =\n      await client.ontologyProvider\n        .getObjectDefinition(definition.apiName);\n    return objectTypeDef as any;\n  } else if (definition.type === \"interface\") {\n    return client.ontologyProvider.getInterfaceDefinition(\n      definition.apiName,\n    ) as any;\n  } else if (definition.type === \"action\") {\n    return client.ontologyProvider.getActionDefinition(\n      definition.apiName,\n    ) as any;\n  } else if (definition.type === \"query\") {\n    return client.ontologyProvider.getQueryDefinition(\n      definition.apiName,\n      definition.isFixedVersion ? definition.version : undefined,\n    ) as any;\n  } else {\n    throw new Error(\"Not implemented for given definition\");\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaA,SAASA,oBAAoB,QAAQ,gCAAgC;;AAErE;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAQnCC,MAAqB,EACrBC,UAAa,KAOV;EACH,IAAIA,UAAU,CAACC,IAAI,KAAK,QAAQ,EAAE;IAChC,MAAM;MAAE,CAACJ,oBAAoB,GAAGK,aAAa;MAAE,GAAGC;IAAc,CAAC,GAC/D,MAAMJ,MAAM,CAACK,gBAAgB,CAC1BC,mBAAmB,CAACL,UAAU,CAACM,OAAO,CAAC;IAC5C,OAAOH,aAAa;EACtB,CAAC,MAAM,IAAIH,UAAU,CAACC,IAAI,KAAK,WAAW,EAAE;IAC1C,OAAOF,MAAM,CAACK,gBAAgB,CAACG,sBAAsB,CACnDP,UAAU,CAACM,OACb,CAAC;EACH,CAAC,MAAM,IAAIN,UAAU,CAACC,IAAI,KAAK,QAAQ,EAAE;IACvC,OAAOF,MAAM,CAACK,gBAAgB,CAACI,mBAAmB,CAChDR,UAAU,CAACM,OACb,CAAC;EACH,CAAC,MAAM,IAAIN,UAAU,CAACC,IAAI,KAAK,OAAO,EAAE;IACtC,OAAOF,MAAM,CAACK,gBAAgB,CAACK,kBAAkB,CAC/CT,UAAU,CAACM,OAAO,EAClBN,UAAU,CAACU,cAAc,GAAGV,UAAU,CAACW,OAAO,GAAGC,SACnD,CAAC;EACH,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzD;AACF,CAAC","ignoreList":[]}