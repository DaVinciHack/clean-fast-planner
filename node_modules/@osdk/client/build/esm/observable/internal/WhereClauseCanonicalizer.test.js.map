{"version":3,"file":"WhereClauseCanonicalizer.test.js","names":["describe","expect","it","WhereClauseCanonicalizer","c","r1","canonicalize","$and","employeeId","r2","class","not","toBe","w1","w2","toEqual","$eq"],"sources":["WhereClauseCanonicalizer.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { WhereClause } from \"@osdk/api\";\nimport type { Employee } from \"@osdk/client.test.ontology\";\nimport { describe, expect, it } from \"vitest\";\nimport { WhereClauseCanonicalizer } from \"./WhereClauseCanonicalizer.js\";\n\ndescribe(WhereClauseCanonicalizer, () => {\n  it(\"does not merge unrelated queries\", () => {\n    const c = new WhereClauseCanonicalizer();\n    const w1: WhereClause<Employee> = {\n      $and: [\n        {\n          employeeId: 5,\n        },\n      ],\n    };\n\n    const w2: WhereClause<Employee> = {\n      $and: [\n        {\n          class: \"hi\",\n        },\n      ],\n    };\n\n    const r1 = c.canonicalize(w1);\n    const r2 = c.canonicalize(w2);\n\n    // ref equals\n    expect(r1).not.toBe(r2);\n  });\n\n  it(\"canonizes two equal (but not ref equal) where clauses\", () => {\n    const c = new WhereClauseCanonicalizer();\n    const w1: WhereClause<Employee> = {\n      $and: [\n        {\n          employeeId: 5,\n        },\n      ],\n    };\n\n    const w2: WhereClause<Employee> = {\n      $and: [\n        {\n          employeeId: 5,\n        },\n      ],\n    };\n\n    // objects are deep equal\n    expect(w1).toEqual(w2);\n\n    const r1 = c.canonicalize(w1);\n    const r2 = c.canonicalize(w2);\n\n    // ref equals (since they are the same)\n    expect(r1).toBe(r2);\n  });\n\n  it(\"flattens $eq\", () => {\n    const c = new WhereClauseCanonicalizer();\n    const w1: WhereClause<Employee> = {\n      employeeId: { $eq: 5 },\n    };\n\n    const w2: WhereClause<Employee> = {\n      employeeId: 5,\n    };\n\n    const r1 = c.canonicalize(w1);\n    const r2 = c.canonicalize(w2);\n\n    // ref equals (since they are the same)\n    expect(r1).toBe(r2);\n\n    // deep equals\n    expect(r1).toEqual({ employeeId: 5 });\n  });\n\n  it(\"flattens an $and with one entry\", () => {\n    const c = new WhereClauseCanonicalizer();\n    const w1: WhereClause<Employee> = {\n      $and: [\n        {\n          employeeId: 5,\n        },\n      ],\n    };\n\n    const w2: WhereClause<Employee> = {\n      employeeId: 5,\n    };\n\n    const r1 = c.canonicalize(w1);\n    const r2 = c.canonicalize(w2);\n\n    // ref equals (since they are the same)\n    expect(r1).toBe(r2);\n\n    // deep equals\n    expect(r1).toEqual({ employeeId: 5 });\n  });\n\n  it(\"flattens an $and with one entry\", () => {\n    const c = new WhereClauseCanonicalizer();\n    const w1: WhereClause<Employee> = {\n      $and: [\n        {\n          employeeId: 5,\n          class: \"what\",\n        },\n      ],\n    };\n\n    const w2: WhereClause<Employee> = {\n      employeeId: 5,\n      class: \"what\",\n    };\n\n    const r1 = c.canonicalize(w1);\n    const r2 = c.canonicalize(w2);\n\n    // ref equals (since they are the same)\n    expect(r1).toBe(r2);\n\n    // deep equals\n    expect(r1).toEqual({ employeeId: 5, class: \"what\" });\n  });\n\n  it(\"flattens an $and with zero entries\", () => {\n    const c = new WhereClauseCanonicalizer();\n    const w1: WhereClause<Employee> = {\n      $and: [],\n    };\n\n    const w2: WhereClause<Employee> = {};\n\n    const r1 = c.canonicalize(w1);\n    const r2 = c.canonicalize(w2);\n\n    // ref equals (since they are the same)\n    expect(r1).toBe(r2);\n\n    // deep equals\n    expect(r1).toEqual({});\n  });\n});\n"],"mappings":"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","ignoreList":[]}