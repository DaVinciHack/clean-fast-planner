{"version":3,"file":"actions.test.js","names":["$Actions","actionTakesAttachment","actionTakesMedia","createFooInterface","createOffice","createStructPerson","deleteBarInterface","deleteFooInterface","Employee","moveOffice","LegacyFauxFoundry","MockOntologiesV2","startNodeApiServer","stubData","beforeAll","describe","expect","expectTypeOf","it","vi","createClient","createAttachmentUpload","ActionValidationError","remapActionResponse","each","baseUrl","client","apiServer","testSetup","close","result","applyAction","officeId","address","capacity","$returnEdits","toEqualTypeOf","toMatchObject","undefinedResult","toBeUndefined","batchApplyAction","clientCreateOfficeMock","fn","newAddress","newCapacity","$validateOnly","fail","e","toBeInstanceOf","validation","toMatchTypeOf","name","city","state","zipcode","boundary","use","Actions","apply","submissionCriteria","parameters","attachment","blob","Blob","JSON","stringify","fileAttachment","Object","assign","result2","media_reference","actionRequestMediaUpload","deletedInterface","$objectType","$primaryKey","createdInterface","apiName","actionResponse","edits","type","deletedLinksCount","deletedObjectsCount","addedObjectCount","modifiedObjectsCount","addedLinksCount","batchActionResponse","remappedActionResponse","remappedBatchActionResponse","toMatchInlineSnapshot","actions","keys","toStrictEqual","wrapper","example","Promise","resolve"],"sources":["actions.test.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ActionEditResponse,\n  ActionValidationResponse,\n  AttachmentUpload,\n  MediaReference,\n} from \"@osdk/api\";\nimport {\n  $Actions,\n  actionTakesAttachment,\n  actionTakesMedia,\n  createFooInterface,\n  createOffice,\n  createStructPerson,\n  deleteBarInterface,\n  deleteFooInterface,\n  Employee,\n  moveOffice,\n} from \"@osdk/client.test.ontology\";\nimport type {\n  BatchApplyActionResponseV2,\n  SyncApplyActionResponseV2,\n} from \"@osdk/foundry.ontologies\";\nimport type { SetupServer } from \"@osdk/shared.test\";\nimport {\n  LegacyFauxFoundry,\n  MockOntologiesV2,\n  startNodeApiServer,\n  stubData,\n} from \"@osdk/shared.test\";\nimport { beforeAll, describe, expect, expectTypeOf, it, vi } from \"vitest\";\nimport type { Client } from \"../Client.js\";\nimport { createClient } from \"../createClient.js\";\nimport { createAttachmentUpload } from \"../object/AttachmentUpload.js\";\nimport { ActionValidationError } from \"./ActionValidationError.js\";\nimport { remapActionResponse } from \"./applyAction.js\";\n\ndescribe.each([\n  \"https://stack.palantir.com\",\n  \"https://stack.palantirCustom.com/foo/first/someStuff\",\n])(\"actions for %s\", (baseUrl) => {\n  let client: Client;\n  let apiServer: SetupServer;\n\n  beforeAll(() => {\n    const testSetup = startNodeApiServer(\n      new LegacyFauxFoundry(baseUrl),\n      createClient,\n    );\n    ({ client, apiServer } = testSetup);\n\n    return () => {\n      apiServer.close();\n    };\n  });\n\n  it(\"conditionally returns the edits\", async () => {\n    const result = await client(createOffice).applyAction({\n      officeId: \"NYC\",\n      address: \"123 Main Street\",\n      capacity: 100,\n    }, { $returnEdits: true });\n\n    expectTypeOf<typeof result>().toEqualTypeOf<ActionEditResponse>();\n    expect(result).toMatchObject(\n      {\n        \"addedLinks\": [],\n        \"addedObjects\": [\n          {\n            \"objectType\": \"Office\",\n            \"primaryKey\": \"NYC\",\n          },\n        ],\n        \"deletedLinks\": [],\n        \"deletedLinksCount\": 0,\n        \"deletedObjects\": [],\n        \"deletedObjectsCount\": 0,\n        \"editedObjectTypes\": [\n          \"Office\",\n        ],\n        \"modifiedObjects\": [],\n        \"type\": \"edits\",\n      },\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n    const undefinedResult = await client(createOffice).applyAction({\n      officeId: \"NYC\",\n      address: \"123 Main Street\",\n      capacity: 100,\n    });\n\n    expectTypeOf<typeof undefinedResult>().toEqualTypeOf<undefined>();\n    expect(undefinedResult).toBeUndefined();\n\n    const clientCreateOffice = client(createOffice).batchApplyAction;\n    const clientCreateOfficeMock: typeof clientCreateOffice = vi.fn();\n    void clientCreateOfficeMock([{\n      officeId: \"NYC\",\n      address: \"123 Main Street\",\n      capacity: 100,\n    }], { $returnEdits: true });\n  });\n\n  it(\"returns validation directly on validateOnly mode\", async () => {\n    const result = await client(moveOffice).applyAction({\n      officeId: \"SEA\",\n      newAddress: \"456 Pike Place\",\n      // intentionally using a string to trigger validation errors\n      newCapacity: \"40\" as unknown as number,\n    }, {\n      $validateOnly: true,\n    });\n    expectTypeOf<typeof result>().toEqualTypeOf<ActionValidationResponse>();\n\n    expect(result).toMatchObject(\n      {\n        \"parameters\": {\n          \"newCapacity\": {\n            \"evaluatedConstraints\": [],\n            \"required\": false,\n            \"result\": \"INVALID\",\n          },\n        },\n        \"result\": \"INVALID\",\n        \"submissionCriteria\": [],\n      },\n    );\n  });\n\n  it(\"returns validation directly on validateOnly mode, with custom entry point in URL\", async () => {\n    const result = await client(moveOffice).applyAction({\n      officeId: \"SEA\",\n      newAddress: \"456 Pike Place\",\n      // intentionally using a string to trigger validation failure\n      newCapacity: \"40\" as unknown as number,\n    }, {\n      $validateOnly: true,\n    });\n    expectTypeOf<typeof result>().toEqualTypeOf<ActionValidationResponse>();\n\n    expect(result).toMatchObject(\n      {\n        \"parameters\": {\n          \"newCapacity\": {\n            \"evaluatedConstraints\": [],\n            \"required\": false,\n            \"result\": \"INVALID\",\n          },\n        },\n        \"result\": \"INVALID\",\n        \"submissionCriteria\": [],\n      },\n    );\n  });\n\n  it(\"throws on validation errors\", async () => {\n    try {\n      const result = await client(moveOffice).applyAction({\n        officeId: \"SEA\",\n        newAddress: \"456 Pike Place\",\n        // intentionally using a string to trigger validation failure\n        newCapacity: \"40\" as unknown as number,\n      }, {\n        $returnEdits: true,\n      });\n      expect.fail(\"Should not reach here\");\n    } catch (e) {\n      expect(e).toBeInstanceOf(ActionValidationError);\n      expect((e as ActionValidationError).validation).toMatchObject(\n        {\n          \"parameters\": {\n            \"newCapacity\": {\n              \"evaluatedConstraints\": [],\n              \"required\": false,\n              \"result\": \"INVALID\",\n            },\n          },\n          \"result\": \"INVALID\",\n          \"submissionCriteria\": [],\n        },\n      );\n    }\n  });\n\n  it(\"Accepts structs\", async () => {\n    const clientBoundActionTakesStruct = client(createStructPerson).applyAction;\n    type InferredParamType = Parameters<\n      typeof clientBoundActionTakesStruct\n    >[0];\n    expectTypeOf<\n      {\n        name: string;\n        address: { city: string; state: string; zipcode: number };\n      }\n    >()\n      .toMatchTypeOf<\n        InferredParamType\n      >();\n\n    const result = await client(createStructPerson).applyAction({\n      name: \"testMan\",\n      address: { city: \"NYC\", state: \"NY\", zipcode: 12345 },\n    });\n    expectTypeOf<typeof result>().toEqualTypeOf<undefined>();\n    expect(result).toBeUndefined();\n  });\n\n  it(\"Accepts attachments\", async () => {\n    const clientBoundActionTakesAttachment = client(\n      actionTakesAttachment,\n    ).applyAction;\n\n    type InferredParamType = Parameters<\n      typeof clientBoundActionTakesAttachment\n    >[0];\n\n    expectTypeOf<{ attachment: string | AttachmentUpload }>().toMatchTypeOf<\n      InferredParamType\n    >();\n\n    const clientBoundBatchActionTakesAttachment = client(\n      actionTakesAttachment,\n    ).batchApplyAction;\n    type InferredBatchParamType = Parameters<\n      typeof clientBoundBatchActionTakesAttachment\n    >[0];\n\n    expectTypeOf<{\n      attachment: string | AttachmentUpload;\n    }[]>().toMatchTypeOf<InferredBatchParamType>();\n\n    await apiServer.boundary(async () => {\n      apiServer.use(MockOntologiesV2.Actions.apply(baseUrl, (info) => {\n        return {\n          validation: {\n            result: \"VALID\",\n            submissionCriteria: [],\n            parameters: {},\n          },\n        };\n      }));\n\n      // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n      const result = await client(actionTakesAttachment).applyAction({\n        attachment: \"ri.some.rid\",\n      });\n\n      expectTypeOf<typeof result>().toEqualTypeOf<undefined>();\n      expect(result).toBeUndefined();\n    })();\n  });\n\n  it(\"Accepts attachment uploads\", async () => {\n    const clientBoundActionTakesAttachment = client(\n      actionTakesAttachment,\n    ).applyAction;\n    type InferredParamType = Parameters<\n      typeof clientBoundActionTakesAttachment\n    >[0];\n    const clientBoundBatchActionTakesAttachment = client(\n      actionTakesAttachment,\n    ).batchApplyAction;\n    type InferredBatchParamType = Parameters<\n      typeof clientBoundBatchActionTakesAttachment\n    >[0];\n\n    expectTypeOf<\n      {\n        attachment:\n          | string\n          | AttachmentUpload\n          | Blob & { readonly name: string };\n      }\n    >().toMatchTypeOf<\n      InferredParamType\n    >();\n    expectTypeOf<\n      {\n        attachment:\n          | string\n          | AttachmentUpload\n          | Blob & { readonly name: string };\n      }[]\n    >().toMatchTypeOf<\n      InferredBatchParamType\n    >();\n\n    const blob = new Blob([JSON.stringify({ name: \"Hello World\" }, null, 2)]);\n\n    const attachment = createAttachmentUpload(blob, \"file1.txt\");\n\n    // Mimics the Web file API (https://developer.mozilla.org/en-US/docs/Web/API/File). The File constructor is only available in Node 19.2.0 and above\n    const fileAttachment = Object.assign(blob, { name: \"file1.txt\" });\n\n    // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n    const result = await client(actionTakesAttachment).applyAction({\n      attachment,\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n    const result2 = await client(actionTakesAttachment).applyAction({\n      attachment: fileAttachment,\n    });\n\n    expectTypeOf<typeof result>().toEqualTypeOf<undefined>();\n    expect(result).toBeUndefined();\n\n    expectTypeOf<typeof result2>().toEqualTypeOf<undefined>();\n    expect(result2).toBeUndefined();\n  });\n\n  it(\"Accepts media reference\", async () => {\n    const clientBoundActionTakesMedia = client(\n      actionTakesMedia,\n    ).applyAction;\n    type InferredParamType = Parameters<\n      typeof clientBoundActionTakesMedia\n    >[0];\n\n    expectTypeOf<\n      {\n        media_reference: MediaReference;\n      }\n    >().toMatchTypeOf<\n      InferredParamType\n    >();\n\n    const result = await client(actionTakesMedia).applyAction({\n      media_reference:\n        stubData.actionRequestMediaUpload.parameters.media_reference,\n    });\n\n    expectTypeOf<typeof result>().toEqualTypeOf<undefined>();\n    expect(result).toBeUndefined();\n  });\n\n  it(\"Accepts interfaces\", async () => {\n    const clientBoundTakesInterface = client(\n      deleteFooInterface,\n    ).applyAction;\n\n    type InferredParamType = Parameters<\n      typeof clientBoundTakesInterface\n    >[0];\n\n    expectTypeOf<\n      {\n        deletedInterface: {\n          $objectType: \"Employee\" | \"Person\";\n          $primaryKey: string | number;\n        };\n      }\n    >().toMatchTypeOf<\n      InferredParamType\n    >();\n\n    const clientBoundBatchActionTakesInterface = client(\n      deleteFooInterface,\n    ).batchApplyAction;\n    type InferredBatchParamType = Parameters<\n      typeof clientBoundBatchActionTakesInterface\n    >[0];\n\n    expectTypeOf<{\n      deletedInterface: {\n        $objectType: \"Employee\" | \"Person\";\n        $primaryKey: string | number;\n      };\n    }[]>().toMatchTypeOf<InferredBatchParamType>();\n\n    const result = await client(deleteFooInterface).applyAction({\n      deletedInterface: {\n        $objectType: \"Employee\",\n        $primaryKey: 50030,\n      },\n    });\n\n    expectTypeOf<typeof result>().toEqualTypeOf<undefined>();\n    expect(result).toBeUndefined();\n  });\n  it(\"Accepts interfaces if implementing object types unknown\", async () => {\n    const clientBoundTakesInterface = client(\n      deleteBarInterface,\n    ).applyAction;\n\n    type InferredParamType = Parameters<\n      typeof clientBoundTakesInterface\n    >[0];\n\n    expectTypeOf<\n      {\n        deletedInterface: {\n          $objectType: string;\n          $primaryKey: string | number;\n        };\n      }\n    >().toMatchTypeOf<\n      InferredParamType\n    >();\n\n    const clientBoundBatchActionTakesInterface = client(\n      deleteBarInterface,\n    ).batchApplyAction;\n    type InferredBatchParamType = Parameters<\n      typeof clientBoundBatchActionTakesInterface\n    >[0];\n\n    expectTypeOf<{\n      deletedInterface: {\n        $objectType: string;\n        $primaryKey: string | number;\n      };\n    }[]>().toMatchTypeOf<InferredBatchParamType>();\n  });\n  it(\"Accepts object type refs\", async () => {\n    const clientBoundTakesObjectType = client(\n      createFooInterface,\n    ).applyAction;\n\n    type InferredParamType = Parameters<\n      typeof clientBoundTakesObjectType\n    >[0];\n\n    expectTypeOf<\n      {\n        createdInterface: string;\n      }\n    >().toMatchTypeOf<\n      InferredParamType\n    >();\n\n    const clientBoundBatchActionTakesObjectType = client(\n      createFooInterface,\n    ).batchApplyAction;\n    type InferredBatchParamType = Parameters<\n      typeof clientBoundBatchActionTakesObjectType\n    >[0];\n\n    expectTypeOf<{\n      createdInterface: string;\n    }[]>().toMatchTypeOf<InferredBatchParamType>();\n\n    const result = await client(createFooInterface).applyAction({\n      createdInterface: Employee.apiName,\n    });\n\n    expectTypeOf<typeof result>().toEqualTypeOf<undefined>();\n    expect(result).toBeUndefined();\n  });\n  it(\"conditionally returns edits in batch mode\", async () => {\n    const result = await client(moveOffice).batchApplyAction([\n      {\n        officeId: \"SEA\",\n        newAddress: \"456 Good Place\",\n        newCapacity: 40,\n      },\n      {\n        officeId: \"NYC\",\n        newAddress: \"123 Main Street\",\n        newCapacity: 80,\n      },\n    ], { $returnEdits: true });\n\n    expect(result).toMatchObject(\n      {\n        \"addedLinks\": [],\n        \"addedObjects\": [],\n        \"deletedLinks\": [],\n        \"deletedLinksCount\": 0,\n        \"deletedObjects\": [],\n        \"deletedObjectsCount\": 0,\n        \"editedObjectTypes\": [\n          \"Office\",\n        ],\n        \"modifiedObjects\": [\n          {\n            \"objectType\": \"Office\",\n            \"primaryKey\": \"SEA\",\n          },\n          {\n            \"objectType\": \"Office\",\n            \"primaryKey\": \"NYC\",\n          },\n        ],\n        \"type\": \"edits\",\n      },\n    );\n  });\n});\n\ndescribe(\"ActionResponse remapping\", () => {\n  const actionResponse: SyncApplyActionResponseV2 = {\n    edits: {\n      type: \"edits\",\n      edits: [{\n        \"objectType\": \"Developer\",\n        \"primaryKey\": \"PalantirDev\",\n        \"type\": \"addObject\",\n      }, {\n        \"objectType\": \"Contractor\",\n        \"primaryKey\": \"Contractor1\",\n        \"type\": \"modifyObject\",\n      }, {\n        \"aSideObject\": { \"primaryKey\": \"key1\", \"objectType\": \"Office\" },\n        \"linkTypeApiNameAtoB\": \"test\",\n        \"linkTypeApiNameBtoA\": \"test\",\n        \"bSideObject\": { \"primaryKey\": \"key2\", \"objectType\": \"Employee\" },\n        \"type\": \"addLink\",\n      }, {\n        \"objectType\": \"Developer\",\n        \"primaryKey\": \"PalantirDev\",\n        \"type\": \"deleteObject\",\n      }, {\n        \"aSideObject\": { \"primaryKey\": \"key1\", \"objectType\": \"Office\" },\n        \"linkTypeApiNameAtoB\": \"test\",\n        \"linkTypeApiNameBtoA\": \"test\",\n        \"bSideObject\": { \"primaryKey\": \"key2\", \"objectType\": \"Employee\" },\n        \"type\": \"deleteLink\",\n      }],\n      deletedLinksCount: 0,\n      deletedObjectsCount: 1,\n      addedObjectCount: 1,\n      modifiedObjectsCount: 1,\n      addedLinksCount: 1,\n    },\n  };\n\n  const batchActionResponse: BatchApplyActionResponseV2 = {\n    edits: {\n      type: \"edits\",\n      edits: [{\n        \"objectType\": \"Developer\",\n        \"primaryKey\": \"PalantirDev\",\n        \"type\": \"addObject\",\n      }, {\n        \"objectType\": \"Contractor\",\n        \"primaryKey\": \"Contractor1\",\n        \"type\": \"modifyObject\",\n      }, {\n        \"aSideObject\": { \"primaryKey\": \"key1\", \"objectType\": \"Office\" },\n        \"linkTypeApiNameAtoB\": \"test\",\n        \"linkTypeApiNameBtoA\": \"test\",\n        \"bSideObject\": { \"primaryKey\": \"key2\", \"objectType\": \"Employee\" },\n        \"type\": \"addLink\",\n      }],\n      deletedLinksCount: 0,\n      deletedObjectsCount: 0,\n      addedObjectCount: 1,\n      modifiedObjectsCount: 1,\n      addedLinksCount: 1,\n    },\n  };\n\n  it(\"Correctly unpacks edits and editedObjectTypes\", () => {\n    const remappedActionResponse = remapActionResponse(actionResponse);\n    const remappedBatchActionResponse = remapActionResponse(\n      batchActionResponse,\n    );\n    expect(remappedActionResponse).toMatchInlineSnapshot(`\n      {\n        \"addedLinks\": [\n          {\n            \"aSideObject\": {\n              \"objectType\": \"Office\",\n              \"primaryKey\": \"key1\",\n            },\n            \"bSideObject\": {\n              \"objectType\": \"Employee\",\n              \"primaryKey\": \"key2\",\n            },\n            \"linkTypeApiNameAtoB\": \"test\",\n            \"linkTypeApiNameBtoA\": \"test\",\n          },\n        ],\n        \"addedObjects\": [\n          {\n            \"objectType\": \"Developer\",\n            \"primaryKey\": \"PalantirDev\",\n          },\n        ],\n        \"deletedLinks\": [\n          {\n            \"aSideObject\": {\n              \"objectType\": \"Office\",\n              \"primaryKey\": \"key1\",\n            },\n            \"bSideObject\": {\n              \"objectType\": \"Employee\",\n              \"primaryKey\": \"key2\",\n            },\n            \"linkTypeApiNameAtoB\": \"test\",\n            \"linkTypeApiNameBtoA\": \"test\",\n          },\n        ],\n        \"deletedLinksCount\": 0,\n        \"deletedObjects\": [\n          {\n            \"objectType\": \"Developer\",\n            \"primaryKey\": \"PalantirDev\",\n          },\n        ],\n        \"deletedObjectsCount\": 1,\n        \"editedObjectTypes\": [\n          \"Developer\",\n          \"Contractor\",\n          \"Office\",\n          \"Employee\",\n        ],\n        \"modifiedObjects\": [\n          {\n            \"objectType\": \"Contractor\",\n            \"primaryKey\": \"Contractor1\",\n          },\n        ],\n        \"type\": \"edits\",\n      }\n    `);\n    expect(remappedBatchActionResponse).toMatchInlineSnapshot(`\n      {\n        \"addedLinks\": [\n          {\n            \"aSideObject\": {\n              \"objectType\": \"Office\",\n              \"primaryKey\": \"key1\",\n            },\n            \"bSideObject\": {\n              \"objectType\": \"Employee\",\n              \"primaryKey\": \"key2\",\n            },\n            \"linkTypeApiNameAtoB\": \"test\",\n            \"linkTypeApiNameBtoA\": \"test\",\n          },\n        ],\n        \"addedObjects\": [\n          {\n            \"objectType\": \"Developer\",\n            \"primaryKey\": \"PalantirDev\",\n          },\n        ],\n        \"deletedLinks\": [],\n        \"deletedLinksCount\": 0,\n        \"deletedObjects\": [],\n        \"deletedObjectsCount\": 0,\n        \"editedObjectTypes\": [\n          \"Developer\",\n          \"Contractor\",\n          \"Office\",\n          \"Employee\",\n        ],\n        \"modifiedObjects\": [\n          {\n            \"objectType\": \"Contractor\",\n            \"primaryKey\": \"Contractor1\",\n          },\n        ],\n        \"type\": \"edits\",\n      }\n    `);\n  });\n  it(\"actions are enumerable\", async () => {\n    const actions = Object.keys($Actions);\n    expect(actions).toStrictEqual([\n      \"actionTakesAttachment\",\n      \"actionTakesMedia\",\n      \"actionTakesObjectSet\",\n      \"createFooInterface\",\n      \"createOffice\",\n      \"createOfficeAndEmployee\",\n      \"createStructPerson\",\n      \"deleteBarInterface\",\n      \"deleteFooInterface\",\n      \"editTodo\",\n      \"moveOffice\",\n      \"promoteEmployee\",\n      \"promoteEmployeeObject\",\n    ]);\n  });\n});\n\nfunction wrapper<R>(fn: () => R): typeof fn {\n  return () => fn();\n}\n\nasync function example() {\n  await wrapper(async () => Promise.resolve(\"hi\"))();\n}\n"],"mappings":"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","ignoreList":[]}