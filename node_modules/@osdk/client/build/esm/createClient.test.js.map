{"version":3,"file":"createClient.test.js","names":["Task","SharedClientContext","beforeEach","describe","expect","it","vi","metadataCacheClient","createClient","MakeConjureContext","USER_AGENT","mockFetchResponse","fetch","response","mockResolvedValueOnce","json","Promise","resolve","blob","status","ok","fetchFunction","client","ontologyRid","fn","undefined","data","getUserAgentPartsFromMockedFetch","userAgent","mock","calls","headers","get","parts","split","fetchPage","toHaveBeenCalledTimes","toEqual","osdkMetadata","extraUserAgent","spy","spyOn","toBe","conjureContextSpy","baseUrl","ontologyProvider","getObjectDefinition","results","value"],"sources":["createClient.test.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Task } from \"@osdk/client.test.ontology\";\nimport * as SharedClientContext from \"@osdk/shared.client.impl\";\nimport type { MockedFunction } from \"vitest\";\nimport { beforeEach, describe, expect, it, vi } from \"vitest\";\nimport { metadataCacheClient } from \"./__unstable/ConjureSupport.js\";\nimport type { Client } from \"./Client.js\";\nimport { createClient } from \"./createClient.js\";\nimport * as MakeConjureContext from \"./ontology/makeConjureContext.js\";\nimport { USER_AGENT } from \"./util/UserAgent.js\";\n\nexport function mockFetchResponse(\n  fetch: MockedFunction<typeof globalThis.fetch>,\n  response: any,\n): void {\n  fetch.mockResolvedValueOnce({\n    json: () => Promise.resolve(response),\n    blob: () => Promise.resolve(response),\n    status: 200,\n    ok: true,\n  } as any);\n}\n\ndescribe(createClient, () => {\n  const validOlderVersion = \"0.13.0\" as const;\n  const validCurrentVersion = \"0.14.0\" as const;\n  const invalidFutureVersion = \"100.100.100\" as const;\n\n  let fetchFunction: MockedFunction<typeof globalThis.fetch>;\n  let client: Client;\n\n  const ontologyRid = \"ri.not.important\";\n\n  beforeEach(() => {\n    fetchFunction = vi.fn();\n\n    client = createClient(\n      \"https://mock.com\",\n      ontologyRid,\n      async () => \"Token\",\n      undefined,\n      fetchFunction,\n    );\n\n    mockFetchResponse(fetchFunction, { data: [] });\n  });\n\n  describe(\"user agent passing\", () => {\n    function getUserAgentPartsFromMockedFetch() {\n      const userAgent = (fetchFunction.mock.calls[0][1]?.headers as Headers)\n        .get(\n          \"Fetch-User-Agent\",\n        );\n      const parts = userAgent?.split(\" \") ?? [];\n      return parts;\n    }\n\n    it(\"works for objects\", async () => {\n      await client(Task).fetchPage();\n      expect(fetchFunction).toHaveBeenCalledTimes(1);\n\n      const parts = getUserAgentPartsFromMockedFetch();\n      expect(parts).toEqual([\n        ...Task.osdkMetadata!\n          .extraUserAgent\n          .split(\" \"),\n        USER_AGENT,\n      ]);\n    });\n  });\n\n  describe(\"check url formatting\", () => {\n    it(\"urls are correctly formatted\", async () => {\n      const spy = vi.spyOn(SharedClientContext, \"createSharedClientContext\");\n      const client = createClient(\n        \"https://mock.com\",\n        ontologyRid,\n        async () => \"Token\",\n        undefined,\n        fetchFunction,\n      );\n      expect(spy.mock.calls[0][0]).toBe(\"https://mock.com/\");\n\n      createClient(\n        \"https://mock1.com/\",\n        ontologyRid,\n        async () => \"Token\",\n        undefined,\n        fetchFunction,\n      );\n      expect(spy.mock.calls[1][0]).toBe(\"https://mock1.com/\");\n\n      createClient(\n        \"https://mock2.com/stuff/first/foo\",\n        ontologyRid,\n        async () => \"Token\",\n        undefined,\n        fetchFunction,\n      );\n      expect(spy.mock.calls[2][0]).toBe(\"https://mock2.com/stuff/first/foo/\");\n\n      createClient(\n        \"https://mock3.com/stuff/first/foo/\",\n        ontologyRid,\n        async () => \"Token\",\n        undefined,\n        fetchFunction,\n      );\n      expect(spy.mock.calls[3][0]).toBe(\"https://mock3.com/stuff/first/foo/\");\n\n      const conjureContextSpy = vi.spyOn(\n        MakeConjureContext,\n        \"makeConjureContext\",\n      );\n\n      void metadataCacheClient(\n        {\n          baseUrl: \"https://mock4.com/\",\n          ontologyProvider: { getObjectDefinition: async () => ({}) },\n        } as any,\n      );\n\n      expect(\n        conjureContextSpy.mock.results[0].value[\"baseUrl\"]\n          + conjureContextSpy.mock.results[0].value[\"servicePath\"],\n      ).toBe(\"https://mock4.com/ontology-metadata/api\");\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}