{"version":3,"file":"geotimeseriesreference.test.js","names":["$ontologyRid","Employee","LegacyFauxFoundry","startNodeApiServer","formatISO","sub","beforeAll","describe","expect","it","vi","createClient","client","locationGeotimeData","time","value","type","coordinates","Date","now","testSetup","pk","data","Object","entries","fauxFoundry","getDataStore","registerTimeSeriesData","useFakeTimers","setSystemTime","apiServer","close","useRealTimers","employee","fetchOne","employee2","$primaryKey","toEqual","location","employeeLocation","toBeDefined","initialLastPoint","lastFetchedValue","toBeUndefined","fetchedPoint","getLatestValue","nextLastPoint","initialPointEmployee2","fetchedPoint2","nextLastPoint2","points","getAllValues","$before","$unit","$after","$startTime","$endTime","pointsIter","asyncIterValues","point","push"],"sources":["geotimeseriesreference.test.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { TimeSeriesPoint } from \"@osdk/api\";\nimport { $ontologyRid, Employee } from \"@osdk/client.test.ontology\";\nimport { LegacyFauxFoundry, startNodeApiServer } from \"@osdk/shared.test\";\nimport { formatISO, sub } from \"date-fns\";\nimport { beforeAll, describe, expect, it, vi } from \"vitest\";\nimport type { Client } from \"../Client.js\";\nimport { createClient } from \"../createClient.js\";\n\ndescribe(\"Timeseries\", () => {\n  let client: Client;\n  const locationGeotimeData = {\n    50030: [\n      {\n        time: \"2012-02-12\",\n        value: { type: \"Point\", coordinates: [1.1, 1.1] },\n      },\n      {\n        time: \"2013-03-13\",\n        value: { type: \"Point\", coordinates: [2.2, 2.2] },\n      },\n      {\n        time: \"2014-04-14\",\n        value: { type: \"Point\", coordinates: [3.3, 3.3] },\n      },\n    ],\n    50031: [\n      {\n        time: formatISO(sub(Date.now(), { \"days\": 2 })),\n        value: {\n          type: \"Point\",\n          coordinates: [2.2, 2.2],\n        },\n      },\n    ],\n  };\n\n  beforeAll(async () => {\n    const testSetup = startNodeApiServer(\n      new LegacyFauxFoundry(),\n      createClient,\n    );\n    ({ client } = testSetup);\n\n    for (const [pk, data] of Object.entries(locationGeotimeData)) {\n      testSetup.fauxFoundry.getDataStore($ontologyRid)\n        .registerTimeSeriesData(\n          \"Employee\",\n          pk,\n          \"employeeLocation\",\n          data,\n        );\n    }\n\n    vi.useFakeTimers();\n    vi.setSystemTime(new Date(\"2013-03-13\"));\n\n    return () => {\n      testSetup.apiServer.close();\n      vi.useRealTimers();\n    };\n  });\n\n  it(\"get latest value works\", async () => {\n    const employee = await client(Employee).fetchOne(50030);\n    const employee2 = await client(Employee).fetchOne(50031);\n    expect(employee.$primaryKey).toEqual(50030);\n    expect(employee2.$primaryKey).toEqual(50031);\n    const location = employee.employeeLocation;\n\n    expect(location).toBeDefined();\n\n    const initialLastPoint = employee.employeeLocation?.lastFetchedValue;\n    expect(initialLastPoint).toBeUndefined();\n\n    const fetchedPoint = await employee.employeeLocation?.getLatestValue();\n    const nextLastPoint = employee.employeeLocation?.lastFetchedValue;\n    expect(employee.employeeLocation?.lastFetchedValue).toBeDefined();\n\n    expect(nextLastPoint).toEqual(fetchedPoint);\n    expect(nextLastPoint).toEqual(locationGeotimeData[50030][2]);\n\n    expect(fetchedPoint).toEqual(locationGeotimeData[50030][2]);\n\n    // Making sure caching working as expected\n    const initialPointEmployee2 = employee2.employeeLocation?.lastFetchedValue;\n    expect(initialPointEmployee2).toBeUndefined();\n\n    const fetchedPoint2 = await employee2.employeeLocation?.getLatestValue();\n    const nextLastPoint2 = employee2.employeeLocation?.lastFetchedValue;\n    expect(employee2.employeeLocation?.lastFetchedValue).toBeDefined();\n\n    expect(nextLastPoint2).toEqual(fetchedPoint2);\n    expect(nextLastPoint2).toEqual(locationGeotimeData[50031][0]);\n\n    expect(fetchedPoint2).toEqual(locationGeotimeData[50031][0]);\n  });\n\n  it(\"getAll values with before works\", async () => {\n    const employee = await client(Employee).fetchOne(50030);\n    expect(employee.$primaryKey).toEqual(50030);\n    const points = await employee.employeeLocation?.getAllValues({\n      $before: 1,\n      $unit: \"month\",\n    });\n    expect(points).toBeDefined();\n    expect(points!).toEqual([\n      locationGeotimeData[50030][1],\n      locationGeotimeData[50030][2],\n    ]);\n  });\n\n  it(\"getAll values with after works\", async () => {\n    const employee = await client(Employee).fetchOne(50030);\n    expect(employee.$primaryKey).toEqual(50030);\n    const points = await employee.employeeLocation?.getAllValues({\n      $after: 1,\n      $unit: \"month\",\n    });\n    expect(points).toBeDefined();\n    expect(points!).toEqual([\n      locationGeotimeData[50030][0],\n      locationGeotimeData[50030][1],\n    ]);\n\n    vi.useRealTimers();\n  });\n\n  it(\"getAll points with absolute range works\", async () => {\n    const employee = await client(Employee).fetchOne(50030);\n    expect(employee.$primaryKey).toEqual(50030);\n    const points = await employee.employeeLocation?.getAllValues({\n      $startTime: \"2013-03-12T12:00:00.000Z\",\n      $endTime: \"2014-04-14T12:00:00.000Z\",\n    });\n    expect(points).toBeDefined();\n    expect(points!).toEqual([{\n      time: \"2013-03-13\",\n      value: { type: \"Point\", coordinates: [2.2, 2.2] },\n    }, {\n      time: \"2014-04-14\",\n      value: { type: \"Point\", coordinates: [3.3, 3.3] },\n    }]);\n  });\n\n  it(\"getAll points with no query works\", async () => {\n    const employee = await client(Employee).fetchOne(50030);\n    expect(employee.$primaryKey).toEqual(50030);\n    const points = await employee.employeeLocation?.getAllValues();\n    expect(points).toBeDefined();\n    expect(points!).toEqual(\n      locationGeotimeData[50030],\n    );\n  });\n\n  it(\"getAll points with no data works\", async () => {\n    const employee = await client(Employee).fetchOne(50030);\n    expect(employee.$primaryKey).toEqual(50030);\n    const points = await employee.employeeLocation?.getAllValues({\n      $startTime: \"2021-03-12T12:00:00.000Z\",\n      $endTime: \"2022-04-14T12:00:00.000Z\",\n    });\n    expect(points).toBeDefined();\n    expect(points!).toEqual([]);\n  });\n\n  it(\"async iter points with absolute range works\", async () => {\n    const employee = await client(Employee).fetchOne(50030);\n    expect(employee.$primaryKey).toEqual(50030);\n    const pointsIter = employee.employeeLocation?.asyncIterValues({\n      $startTime: \"2013-03-12T12:00:00.000Z\",\n      $endTime: \"2014-04-14T12:00:00.000Z\",\n    });\n\n    const points: TimeSeriesPoint<GeoJSON.Point>[] = [];\n    for await (const point of pointsIter!) {\n      points.push(point);\n    }\n    expect(points).toBeDefined();\n    expect(points!).toEqual([\n      locationGeotimeData[50030][1],\n      locationGeotimeData[50030][2],\n    ]);\n  });\n\n  it(\"async iter points with no query\", async () => {\n    const employee = await client(Employee).fetchOne(50030);\n    expect(employee.$primaryKey).toEqual(50030);\n    const pointsIter = employee.employeeLocation?.asyncIterValues();\n\n    const points: TimeSeriesPoint<GeoJSON.Point>[] = [];\n    for await (const point of pointsIter!) {\n      points.push(point);\n    }\n    expect(points).toBeDefined();\n    expect(points!).toEqual(\n      locationGeotimeData[50030],\n    );\n  });\n});\n"],"mappings":"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","ignoreList":[]}