{"version":3,"file":"Cache.test.js","names":["pDefer","promiseStateAsync","pStateAsync","beforeAll","beforeEach","describe","expect","it","vi","createAsyncClientCache","createClientCache","createSpys","cache","get","spyOn","remove","set","fauxClient","clientCacheKey","fauxClient2","client","key","Promise","resolve","toEqual","mock","fn","setTimeout","all","toHaveBeenCalledTimes","factoryFn","inProgress","asyncCache","asyncCacheSpies","asyncSetSpy","factoryDefers","getPromises","expectedAsyncSets","expectedFactoryCalls","successfulFetches","pendingFetches","expectedPending","mockImplementation","defer","push","promise","Set","createSyncCacheMock","mockReturnValueOnce","getOrUndefined","expectSaneCalls","initiateAsyncCacheGetFor","has","add","before","getStats","toStrictEqual","asyncCacheGetCalls","resolveFactoryCall","num","value","toBe","calls","toContain","not","delete","fulfilledFactoryCalls","rejectFactoryCall","error","reject","Error","i","length","results","type","rejects","toThrowError","map","d","filter","a","rejectedFactoryCalls","stats","size","itRejectsAllRequestsOf","settledResults","toMatchObject","itDoesNotRejectLastRequestRightAway","at","describeRejectsFactoryCall","describeResolvesFactoryCall","describeAsyncCacheGetFor","itFulfillsAsyncCacheGets","indexes","join","itLeavesAsyncGetPromisesInStates","states","p","itHasOnlyInvokedFactoryNTimes","n","itReturnsForAsyncGet","toHaveBeenCalled","undefined"],"sources":["Cache.test.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DeferredPromise } from \"p-defer\";\nimport pDefer from \"p-defer\";\nimport type { PromiseState } from \"p-state\";\nimport { promiseStateAsync as pStateAsync } from \"p-state\";\nimport type { Mock, MockInstance } from \"vitest\";\nimport { beforeAll, beforeEach, describe, expect, it, vi } from \"vitest\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\nimport type { AsyncClientCache, AsyncFactory } from \"./Cache.js\";\nimport { createAsyncClientCache, createClientCache } from \"./Cache.js\";\n\nfunction createSpys(cache: ReturnType<typeof createClientCache>) {\n  return {\n    get: vi.spyOn(cache, \"get\"),\n    remove: vi.spyOn(cache, \"remove\"),\n    set: vi.spyOn(cache, \"set\"),\n  };\n}\n\ndescribe(\"AsyncCache\", () => {\n  beforeAll(() => {\n  });\n  const fauxClient = { clientCacheKey: {} } as MinimalClient;\n  const fauxClient2 = { clientCacheKey: {} } as MinimalClient;\n\n  it(\"keeps clients separate\", async () => {\n    const cache = createAsyncClientCache((client: MinimalClient, key: string) =>\n      Promise.resolve(key)\n    );\n    await cache.set(fauxClient, \"k\", \"v\");\n    expect(await cache.get(fauxClient2, \"k\")).toEqual(\"k\");\n  });\n\n  it(\"has a client and its copy access the same cache\", async () => {\n    const cache = createAsyncClientCache((client: MinimalClient, key: string) =>\n      Promise.resolve(key)\n    );\n    await cache.set(fauxClient, \"k\", \"v\");\n    expect(await cache.get({ ...fauxClient }, \"k\")).toEqual(\"v\");\n  });\n\n  it(\"does not double factory\", async () => {\n    const resolveToKey = (client: MinimalClient, key: string) =>\n      new Promise<string>((resolve, reject) => {\n        setTimeout(() => resolve(key), 100);\n      });\n\n    const mock = vi.fn(resolveToKey);\n    const cache = createAsyncClientCache(mock);\n\n    await Promise.all([\n      cache.get(fauxClient, \"a\"),\n      cache.get(fauxClient, \"a\"),\n      cache.get(fauxClient, \"a\"),\n      cache.get(fauxClient, \"b\"),\n      cache.get(fauxClient, \"b\"),\n      cache.get(fauxClient, \"b\"),\n      cache.get(fauxClient, \"b\"),\n    ]);\n\n    expect(mock).toHaveBeenCalledTimes(2);\n  });\n\n  describe(\"race checks\", () => {\n    let factoryFn: Mock<AsyncFactory<any, any>>;\n    let cache: ReturnType<typeof createSpys>;\n    let inProgress: ReturnType<typeof createSpys>;\n    let asyncCache: AsyncClientCache<string, string>;\n    let asyncCacheSpies: {\n      [K in keyof typeof asyncCache]: MockInstance<typeof asyncCache[K]>;\n    };\n    let asyncSetSpy: MockInstance<typeof asyncCache.set>;\n    let factoryDefers: DeferredPromise<string>[];\n    let getPromises: Promise<string>[];\n\n    let expectedAsyncSets: number;\n    let expectedFactoryCalls: number;\n\n    let successfulFetches: Set<string>;\n    let pendingFetches: Set<string>;\n    let expectedPending: Record<string, number> = {};\n\n    beforeEach(async () => {\n      factoryFn = vi.fn();\n      factoryFn.mockImplementation(() => {\n        const defer = pDefer<string>();\n        factoryDefers.push(defer);\n        return defer.promise;\n      });\n\n      getPromises = [];\n      factoryDefers = [];\n\n      expectedAsyncSets = 0;\n      expectedFactoryCalls = 0;\n\n      successfulFetches = new Set();\n      pendingFetches = new Set();\n      expectedPending = {};\n\n      const createSyncCacheMock = vi.fn();\n\n      cache = createSpys(createClientCache() as any);\n      inProgress = createSpys(createClientCache() as any);\n      createSyncCacheMock.mockReturnValueOnce(cache);\n      createSyncCacheMock.mockReturnValueOnce(inProgress);\n\n      asyncCache = createAsyncClientCache<string, string>(\n        factoryFn,\n        createSyncCacheMock as any,\n      );\n\n      asyncSetSpy = vi.spyOn(asyncCache, \"set\");\n      asyncCacheSpies = {\n        get: vi.spyOn(asyncCache, \"get\"),\n        set: vi.spyOn(asyncCache, \"set\"),\n        getOrUndefined: vi.spyOn(asyncCache, \"getOrUndefined\"),\n      };\n\n      await expectSaneCalls();\n    });\n\n    function initiateAsyncCacheGetFor(key: string) {\n      return async () => {\n        if (!successfulFetches.has(key)) {\n          expectedPending[key] = (expectedPending[key] ?? 0) + 1;\n          if (!pendingFetches.has(key)) {\n            pendingFetches.add(key);\n            expectedFactoryCalls++;\n            expectedAsyncSets++;\n          }\n        }\n\n        // check before and after make sense so that `expectSaneCalls` can work\n        const before = await getStats();\n        getPromises.push(asyncCache.get(fauxClient, key));\n        expect(await getStats()).toStrictEqual({\n          ...before,\n          asyncCacheGetCalls: before.asyncCacheGetCalls + 1,\n          // may or may not bump the unique keys\n        });\n\n        await expectSaneCalls();\n      };\n    }\n\n    function resolveFactoryCall(\n      num: number,\n      key: string,\n      value = `${key}Result`,\n    ) {\n      return async () => {\n        // <preconditions>\n        expect(await pStateAsync(factoryDefers[num].promise)).toBe(\n          \"pending\",\n        );\n        expect(factoryFn.mock.calls[num][1]).toBe(key);\n        expect(pendingFetches).toContain(key);\n        expect(successfulFetches).not.toContain(key);\n        // </preconditions>\n\n        // Update expectations\n        pendingFetches.delete(value);\n        successfulFetches.add(value);\n\n        // check before and after make sense so that `expectSaneCalls` can work\n        const before = await getStats();\n        factoryDefers[num].resolve(value);\n        expect(await getStats()).toStrictEqual({\n          ...before,\n          fulfilledFactoryCalls: before.fulfilledFactoryCalls + 1,\n        });\n\n        await expectSaneCalls();\n      };\n    }\n\n    function rejectFactoryCall(\n      num: number,\n      key: string,\n      error = `${key}Error`,\n    ) {\n      return async () => {\n        expect(factoryFn.mock.calls[num][1]).toBe(key);\n        expect(pendingFetches).toContain(key);\n\n        pendingFetches.delete(key);\n        factoryDefers[num].reject(new Error(error));\n\n        // we need to ensure the outstanding get promises are rejected\n        for (let i = 0; i < asyncCacheSpies.get.mock.calls.length; i++) {\n          if (asyncCacheSpies.get.mock.calls[i][1] === key) {\n            if (asyncCacheSpies.get.mock.results[i].type === \"return\") {\n              await expect(getPromises[i]).rejects.toThrowError();\n            }\n          }\n        }\n\n        await expectSaneCalls();\n      };\n    }\n\n    async function getStats() {\n      return {\n        fulfilledFactoryCalls: (await Promise.all(\n          factoryDefers.map(d => pStateAsync(d.promise)),\n        )).filter(a => a === \"fulfilled\").length,\n        rejectedFactoryCalls: (await Promise.all(\n          factoryDefers.map(d => pStateAsync(d.promise)),\n        )).filter(a => a === \"rejected\").length,\n        asyncCacheGetCalls: asyncCacheSpies.get.mock.calls.length,\n      };\n    }\n\n    async function expectSaneCalls() {\n      const stats = await getStats();\n\n      // both of these should be connected\n      expect(factoryFn).toHaveBeenCalledTimes(expectedFactoryCalls);\n      expect(inProgress.set).toHaveBeenCalledTimes(expectedFactoryCalls);\n\n      expect(asyncSetSpy).toHaveBeenCalledTimes(expectedAsyncSets);\n\n      // inProgress should be removed after a success or failure\n      expect(inProgress.remove).toHaveBeenCalledTimes(\n        stats.fulfilledFactoryCalls + stats.rejectedFactoryCalls,\n      );\n\n      // the inner cache gets checked once per async get\n      expect(cache.get).toHaveBeenCalledTimes(stats.asyncCacheGetCalls);\n\n      // the inner cache only gets set after a successful factory call\n      expect(cache.set).toHaveBeenCalledTimes(successfulFetches.size);\n    }\n\n    function itRejectsAllRequestsOf(key: string) {\n      it(`rejects all ${key} requests`, () => {\n        for (\n          let i = 0;\n          i < asyncCacheSpies.get.mock.calls.length;\n          i++\n        ) {\n          if (asyncCacheSpies.get.mock.calls[i][1] === key) {\n            expect(asyncCacheSpies.get.mock.settledResults[i].type).toBe(\n              \"rejected\",\n            );\n            expect(asyncCacheSpies.get.mock.settledResults[i].value)\n              .toMatchObject(new Error(\"aError\"));\n          }\n        }\n      });\n    }\n\n    function itDoesNotRejectLastRequestRightAway() {\n      it(\"does not reject right away\", () => {\n        expect(asyncCacheSpies.get.mock.results.at(-1)?.type).toBe(\n          \"return\",\n        );\n      });\n    }\n\n    function describeRejectsFactoryCall(\n      num: number,\n      key: string,\n      fn: () => void,\n    ) {\n      return describe(`rejects factory request ${num} for ${key}`, () => {\n        beforeEach(rejectFactoryCall(num, key));\n        itRejectsAllRequestsOf(\"a\");\n\n        fn();\n      });\n    }\n\n    function describeResolvesFactoryCall(\n      num: number,\n      key: string,\n      fn: () => void,\n    ) {\n      return describe(`resolves factory request ${num} for ${key}`, () => {\n        beforeEach(resolveFactoryCall(num, key));\n        fn();\n      });\n    }\n\n    function describeAsyncCacheGetFor(key: string, fn: () => void) {\n      return describe(`gets a request for '${key}'`, () => {\n        beforeEach(initiateAsyncCacheGetFor(key));\n        itDoesNotRejectLastRequestRightAway();\n\n        fn();\n      });\n    }\n\n    function itFulfillsAsyncCacheGets(indexes: number[], value: string) {\n      it(`fulfills the AsyncCache.get()'s ${indexes.join(\", \")} with '${value}'`, async () => {\n        for (const i of indexes) {\n          expect(await pStateAsync(getPromises[i])).toBe(\"fulfilled\");\n          expect(await getPromises[i]).toBe(value);\n        }\n      });\n    }\n\n    function itLeavesAsyncGetPromisesInStates(states: PromiseState[]) {\n      it(`leaves the AsyncCache.get()'s in states [${states.join(\", \")}]`, async () => {\n        expect(await Promise.all(getPromises.map(p => pStateAsync(p))))\n          .toStrictEqual(states);\n        for (let i = 0; i < states.length; i++) {\n          expect(await pStateAsync(getPromises[i])).toBe(states[i]);\n        }\n      });\n    }\n\n    function itHasOnlyInvokedFactoryNTimes(n: number) {\n      it(`has only invoked the factory ${n} times`, () => {\n        expect(factoryFn).toHaveBeenCalledTimes(n);\n      });\n    }\n\n    function itReturnsForAsyncGet(results: any[]) {\n      it(\"returns for async get\", () => {\n        expect(asyncCacheSpies.get.mock.settledResults.map(a => a.value))\n          .toEqual(results);\n      });\n    }\n\n    it(\"has a minimal base state\", () => {\n      expect(cache.get).not.toHaveBeenCalled();\n      expect(inProgress.get).not.toHaveBeenCalled();\n      expect(factoryFn).not.toHaveBeenCalled();\n      expect(inProgress.set).not.toHaveBeenCalled();\n    });\n\n    describeAsyncCacheGetFor(\"a\", () => {\n      itLeavesAsyncGetPromisesInStates([\"pending\"]);\n      itHasOnlyInvokedFactoryNTimes(1);\n\n      describeAsyncCacheGetFor(\"a\", () => {\n        itLeavesAsyncGetPromisesInStates([\"pending\", \"pending\"]);\n        itHasOnlyInvokedFactoryNTimes(1);\n\n        describe(\"before the first resolves\", () => {\n          itLeavesAsyncGetPromisesInStates([\"pending\", \"pending\"]);\n          itHasOnlyInvokedFactoryNTimes(1);\n\n          describeRejectsFactoryCall(0, \"a\", () => {\n            itLeavesAsyncGetPromisesInStates([\"rejected\", \"rejected\"]);\n            describeAsyncCacheGetFor(\"a\", () => {\n              itDoesNotRejectLastRequestRightAway();\n              itHasOnlyInvokedFactoryNTimes(2);\n            });\n          });\n\n          describeAsyncCacheGetFor(\"b\", () => {\n            itLeavesAsyncGetPromisesInStates([\"pending\", \"pending\", \"pending\"]);\n            itHasOnlyInvokedFactoryNTimes(2);\n\n            describeResolvesFactoryCall(1, \"b\", () => {\n              itLeavesAsyncGetPromisesInStates([\n                \"pending\",\n                \"pending\",\n                \"fulfilled\",\n              ]);\n\n              itReturnsForAsyncGet([\n                undefined,\n                undefined,\n                \"bResult\",\n              ]);\n            });\n          });\n\n          describeResolvesFactoryCall(0, \"a\", () => {\n            itFulfillsAsyncCacheGets([0, 1], \"aResult\");\n            itLeavesAsyncGetPromisesInStates([\n              \"fulfilled\",\n              \"fulfilled\",\n            ]);\n\n            describeAsyncCacheGetFor(\"a\", () => {\n              itHasOnlyInvokedFactoryNTimes(1);\n              itLeavesAsyncGetPromisesInStates([\n                \"fulfilled\",\n                \"fulfilled\",\n                \"fulfilled\",\n              ]);\n              itReturnsForAsyncGet([\n                \"aResult\",\n                \"aResult\",\n                \"aResult\",\n              ]);\n            });\n          });\n        });\n      });\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}