{"version":3,"file":"ObjectSetListenerWebsocket.test.js","names":["$ontologyRid","Employee","LegacyFauxFoundry","msw","startNodeApiServer","ImportedWebSocket","pDefer","afterEach","beforeAll","beforeEach","describe","expect","it","vi","z","createClient","createMinimalClient","constructWebsocketUrl","ObjectSetListenerWebsocket","rootLogger","hoisted","pino","pinoPretty","EventEmitter","Promise","resolve","level","build","sync","timestampKey","undefined","errorLikeObjectKeys","errorProps","ignore","destination","write","a","at","slice","console","log","MockedWebSocket","STACK","mock","importOriginal","original","WebSocket","createMockWebSocketConstructor","default","currentSubscriptionId","apiServer","testSetup","addLoggerToApiServer","close","minimalClient","MINIMUM_RECONNECT_DELAY","client","listener","oslwInst","updateReceived","listenerPromise","ontologyRid","logger","child","minimumReconnectDelayMs","onChange","fn","o","object","state","onError","onOutOfDate","onSuccessfulSubscription","objectSetRidCounter","use","http","post","HttpResponse","json","objectSetRid","useFakeTimers","restoreAllMocks","resetHandlers","not","toHaveBeenCalled","ws","unsubscribe","subReq1","subscribeAndExpectWebSocket","expectSubscribeMessages","setWebSocketState","runAllTicks","expectEqualRemoveAndAddListeners","respondSuccessToSubscribe","send","toHaveBeenCalledTimes","requests","propertySet","toEqual","referenceSet","all","expectWebSocketConstructed","advanceTimersByTimeAsync","subReq2","mockImplementationOnce","Error","mockReset","calls","subscriptionClosed","toBe","idNum2","sendObjectUpdateResponse","promise","toMatchInlineSnapshot","sendReferenceUpdatesResponse","unsubscribe2","subscribe","type","apiName","objectType","toString","sendToClient","id","responses","subId","updates","__apiName","employeeId","removeEventListener","addEventListener","length","times","waitFor","toBeCalledTimes","result","JSON","parse","lastCall","mockClear","results","value","OriginalWebSocket","i","ret","_args","webSocketInst","debug","eventEmitter","EventTarget","bind","message","_eventEmitter","readyState","CONNECTING","Object","assign","OPEN","CLOSED","CLOSING","newState","dispatchEvent","Event","name","requestId","request","trace","url","eventNames","c","events","on","SubscribeMessage","string","array","objectSet","MessageEvent","constructor","data","stringify","t"],"sources":["ObjectSetListenerWebsocket.test.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  Logger,\n  ObjectSetSubscription,\n  Osdk,\n  PropertyKeys,\n} from \"@osdk/api\";\nimport { $ontologyRid, Employee } from \"@osdk/client.test.ontology\";\nimport type {\n  ObjectSetStreamSubscribeRequests,\n  StreamMessage,\n} from \"@osdk/foundry.ontologies\";\nimport {\n  LegacyFauxFoundry,\n  msw,\n  type SetupServer,\n  startNodeApiServer,\n} from \"@osdk/shared.test\";\nimport ImportedWebSocket from \"isomorphic-ws\";\nimport type { DeferredPromise } from \"p-defer\";\nimport pDefer from \"p-defer\";\nimport type { MockedClass, MockedFunction, MockedObject } from \"vitest\";\nimport {\n  afterEach,\n  beforeAll,\n  beforeEach,\n  describe,\n  expect,\n  it,\n  vi,\n} from \"vitest\";\nimport { z } from \"zod\";\nimport { createClient } from \"../createClient.js\";\nimport { createMinimalClient } from \"../createMinimalClient.js\";\nimport type { MinimalClient } from \"../MinimalClientContext.js\";\nimport {\n  constructWebsocketUrl,\n  ObjectSetListenerWebsocket,\n} from \"./ObjectSetListenerWebsocket.js\";\n\n// it needs to be hoisted because its referenced from our mocked WebSocket\n// which must be hoisted to work\nconst rootLogger = await vi.hoisted(async (): Promise<Logger> => {\n  const pino = (await import(\"pino\")).pino;\n  const pinoPretty = await import(\"pino-pretty\");\n  const { EventEmitter } = await import(\"node:events\");\n  class PinoConsoleLogDestination extends EventEmitter {\n    write(a: string) {\n      // remove trailing newline since console.log adds one\n      if (a.at(-1) === \"\\n\") a = a.slice(0, -1);\n\n      // This lets the test framework aggregate the logs per test, whereas direct to stdout does not\n      console.log(a);\n    }\n  }\n  return Promise.resolve(pino(\n    { level: \"info\" },\n    (pinoPretty.build)({\n      sync: true,\n      timestampKey: undefined,\n      errorLikeObjectKeys: [\"error\", \"err\", \"exception\"],\n      errorProps: \"stack,cause,properties\",\n      ignore: \"time,hostname,pid\",\n      destination: new PinoConsoleLogDestination(),\n    }),\n  ));\n});\n\n// make local uses of WebSocket typed right\nconst MockedWebSocket = ImportedWebSocket as unknown as MockedWebSocket;\n\nconst STACK = \"https://stack.palantirCustom.com/foo/first/someStuff/\";\n\nvi.mock(\"isomorphic-ws\", async (importOriginal) => {\n  const original = await importOriginal<\n    { default: WebSocket }\n  >();\n\n  const WebSocket = createMockWebSocketConstructor(\n    original.default,\n    rootLogger,\n  );\n  return { default: WebSocket, WebSocket };\n});\n\nlet currentSubscriptionId = 0;\n\ndescribe(\"ObjectSetListenerWebsocket\", async () => {\n  let apiServer: SetupServer;\n  beforeAll(() => {\n    const testSetup = startNodeApiServer(\n      new LegacyFauxFoundry(STACK),\n      createClient,\n    );\n    ({ apiServer } = testSetup);\n    addLoggerToApiServer(testSetup.apiServer, rootLogger);\n    return () => {\n      testSetup.apiServer.close();\n    };\n  });\n\n  describe(\"basic setup\", () => {\n    let minimalClient: MinimalClient;\n\n    const MINIMUM_RECONNECT_DELAY = 2_000;\n    const OBJECT_SET_EXPIRY_MS = 60_000;\n\n    let client: ObjectSetListenerWebsocket;\n    let listener: MockedObject<\n      Required<\n        ObjectSetSubscription.Listener<Employee, any>\n      >\n    >;\n    let oslwInst = 0;\n\n    let updateReceived: {\n      object: Osdk.Instance<Employee>;\n      state: \"ADDED_OR_UPDATED\" | \"REMOVED\";\n    } | undefined = undefined;\n\n    let listenerPromise: DeferredPromise<void>;\n\n    beforeEach(() => {\n      minimalClient = createMinimalClient(\n        { ontologyRid: $ontologyRid },\n        STACK,\n        async () => \"myAccessToken\",\n        { logger: rootLogger },\n      );\n      client = new ObjectSetListenerWebsocket({\n        ...minimalClient,\n        logger: rootLogger.child({ oslwInst: oslwInst++ }),\n      }, {\n        minimumReconnectDelayMs: MINIMUM_RECONNECT_DELAY,\n      });\n\n      listenerPromise = pDefer();\n\n      listener = {\n        onChange: vi.fn((o) => {\n          updateReceived = { object: o.object, state: o.state };\n          listenerPromise.resolve();\n        }),\n        onError: vi.fn(),\n        onOutOfDate: vi.fn(),\n        onSuccessfulSubscription: vi.fn(),\n      };\n\n      let objectSetRidCounter = 0;\n      apiServer.use(\n        msw.http.post(\n          `${STACK}api/v2/ontologySubscriptions/ontologies/${$ontologyRid}/streamSubscriptions`,\n          () =>\n            msw.HttpResponse.json({\n              objectSetRid: `rid.hi.${objectSetRidCounter++}`,\n            }),\n        ),\n      );\n\n      vi.useFakeTimers();\n    });\n\n    afterEach(() => {\n      vi.restoreAllMocks();\n      apiServer.resetHandlers();\n    });\n\n    it(\"should not send onOutOfDate since it has not subscribed yet\", () => {\n      expect(MockedWebSocket).not.toHaveBeenCalled();\n      expect(listener.onOutOfDate).not.toHaveBeenCalled();\n      expect(listener.onChange).not.toHaveBeenCalled();\n      expect(listener.onError).not.toHaveBeenCalled();\n    });\n\n    describe(\"requests subscription\", () => {\n      let ws: MockedWebSocket;\n      let unsubscribe: () => void;\n      let subReq1: ObjectSetStreamSubscribeRequests;\n\n      beforeEach(async () => {\n        [ws, unsubscribe] = await subscribeAndExpectWebSocket(\n          client,\n          listener,\n        );\n\n        subReq1 = await expectSubscribeMessages(ws, 2);\n      });\n\n      afterEach(() => {\n        // just ensure we ended in good states, as we clear these as we consume them\n        expect(MockedWebSocket).not.toHaveBeenCalled();\n\n        // make sure we are unsubscribed so closing the socket doesn't trigger reconnects\n        unsubscribe();\n\n        // disconnect the socket\n        setWebSocketState(ws, \"close\");\n\n        vi.runAllTicks();\n\n        // Make sure we cleaned up\n        expectEqualRemoveAndAddListeners(ws);\n      });\n\n      it(\"only sends a single request\", async () => {\n        respondSuccessToSubscribe(ws, subReq1);\n        // actually this is broken FIXME\n        unsubscribe();\n        expect(ws.send).toHaveBeenCalledTimes(1);\n      });\n\n      it(\"correctly requests regular object properties\", () => {\n        expect(subReq1.requests[0].propertySet).toEqual([\n          \"employeeId\",\n          \"fullName\",\n          \"office\",\n          \"class\",\n          \"startDate\",\n          \"employeeStatus\",\n          \"employeeSensor\",\n        ]);\n      });\n\n      it(\"correctly requests reference backed properties\", () => {\n        expect(subReq1.requests[0].referenceSet).toEqual([\"employeeLocation\"]);\n      });\n\n      describe(\"socket closed before subscription confirmed\", () => {\n        beforeEach(() => {\n          setWebSocketState(ws, \"close\");\n          expectEqualRemoveAndAddListeners(ws);\n        });\n\n        describe(\"reconnect\", async () => {\n          beforeEach(async () => {\n            [ws] = await Promise.all([\n              expectWebSocketConstructed(),\n              // delay for connection reconnect\n              vi.advanceTimersByTimeAsync(MINIMUM_RECONNECT_DELAY),\n            ]);\n            setWebSocketState(ws, \"open\");\n          });\n\n          describe(\"subscribe and respond\", () => {\n            beforeEach(async () => {\n              const subReq2 = await expectSubscribeMessages(ws);\n              respondSuccessToSubscribe(ws, subReq2);\n            });\n\n            it(\"should not send out of date\", () => {\n              expect(listener.onOutOfDate).not.toHaveBeenCalled();\n            });\n          });\n        });\n      });\n\n      describe(\"correctly try catches errors in handlers\", () => {\n        beforeEach(() => {\n          listener.onSuccessfulSubscription.mockImplementationOnce(() => {\n            throw new Error(\"I am an error\");\n          });\n          respondSuccessToSubscribe(ws, subReq1);\n        });\n        afterEach(() => {\n          listener.onSuccessfulSubscription.mockReset();\n        });\n\n        it(\"should call onError\", async () => {\n          expect(listener.onError).toHaveBeenCalled();\n          expect(listener.onError.mock.calls[0][0].subscriptionClosed).toBe(\n            false,\n          );\n        });\n      });\n\n      describe(\"successfully subscribed\", () => {\n        beforeEach(() => {\n          respondSuccessToSubscribe(ws, subReq1);\n        });\n\n        it(\"should call onSuccessfulSubscription\", () => {\n          expect(listener.onSuccessfulSubscription).toHaveBeenCalled();\n        });\n\n        it(\"should correctly return regular updates\", async () => {\n          const idNum2 = currentSubscriptionId;\n\n          sendObjectUpdateResponse(ws, `${idNum2}`);\n          await listenerPromise.promise;\n          expect(listener.onChange).toHaveBeenCalled();\n          expect(updateReceived).toMatchInlineSnapshot(`\n            {\n              \"object\": {\n                \"$apiName\": \"Employee\",\n                \"$objectSpecifier\": \"Employee:undefined\",\n                \"$objectType\": \"Employee\",\n                \"$primaryKey\": undefined,\n                \"$title\": undefined,\n                \"employeeId\": 1,\n              },\n              \"state\": \"ADDED_OR_UPDATED\",\n            }\n          `);\n        });\n\n        it(\"should correctly return reference update\", async () => {\n          const idNum2 = currentSubscriptionId;\n\n          sendReferenceUpdatesResponse(ws, `${idNum2}`);\n          await listenerPromise.promise;\n          expect(listener.onChange).toHaveBeenCalled();\n          expect(updateReceived).toMatchInlineSnapshot(`\n            {\n              \"object\": {\n                \"$apiName\": \"Employee\",\n                \"$objectSpecifier\": \"Employee:12345\",\n                \"$objectType\": \"Employee\",\n                \"$primaryKey\": \"12345\",\n                \"$title\": undefined,\n                \"employeeId\": \"12345\",\n                \"employeeLocation\": GeotimeSeriesPropertyImpl {\n                  \"lastFetchedValue\": {\n                    \"time\": \"111\",\n                    \"value\": {\n                      \"coordinates\": [\n                        100,\n                        200,\n                      ],\n                      \"type\": \"Point\",\n                    },\n                  },\n                },\n              },\n              \"state\": \"ADDED_OR_UPDATED\",\n            }\n          `);\n        });\n\n        describe(\"additional subscription\", async () => {\n          let unsubscribe2: () => void;\n          let subReq2: ObjectSetStreamSubscribeRequests;\n          beforeEach(async () => {\n            unsubscribe2 = await client.subscribe(\n              {\n                type: \"object\",\n                apiName: \"Employee\",\n              },\n              {\n                type: \"base\",\n                objectType: Employee.apiName,\n              },\n              listener,\n              [\"employeeId\"],\n            );\n\n            subReq2 = await expectSubscribeMessages(ws);\n\n            respondSuccessToSubscribe(ws, subReq2);\n          });\n\n          afterEach(() => {\n            unsubscribe2();\n          });\n\n          it(\"only requests requested properties\", () => {\n            expect(subReq2.requests[1].propertySet).toEqual([\"employeeId\"]);\n            expect(subReq2.requests[1].referenceSet).toEqual([]);\n          });\n\n          it(\"does not trigger an out of date \", () => {\n            expect(listener.onOutOfDate).not.toHaveBeenCalled();\n          });\n        });\n\n        describe(\"socket closed abruptly\", () => {\n          beforeEach(() => {\n            setWebSocketState(ws, \"close\");\n            expectEqualRemoveAndAddListeners(ws);\n          });\n\n          describe(\"reconnect, resubscribe successfully\", async () => {\n            beforeEach(async () => {\n              [ws] = await Promise.all([\n                expectWebSocketConstructed(),\n                // delay for connection reconnect\n                vi.advanceTimersByTimeAsync(MINIMUM_RECONNECT_DELAY),\n              ]);\n              setWebSocketState(ws, \"open\");\n\n              const subReq2 = await expectSubscribeMessages(ws);\n              respondSuccessToSubscribe(ws, subReq2);\n            });\n\n            it(\"should send out of date\", () => {\n              expect(listener.onOutOfDate).toHaveBeenCalledTimes(1);\n            });\n          });\n        });\n\n        it(\"should not send onOutOfDate for first call\", () => {\n          expect(MockedWebSocket).not.toHaveBeenCalled();\n          expect(listener.onOutOfDate).not.toHaveBeenCalled();\n          expect(listener.onChange).not.toHaveBeenCalled();\n          expect(listener.onError).not.toHaveBeenCalled();\n        });\n\n        it(\"should create url correctly\", () => {\n          expect(constructWebsocketUrl(STACK, \"ontologyRid1\").toString())\n            .toEqual(\n              \"wss://stack.palantircustom.com/foo/first/someStuff/api/v2/ontologySubscriptions/ontologies/ontologyRid1/streamSubscriptions\",\n            );\n        });\n      });\n    });\n  });\n});\n\ninterface RawWebSocketPlus\n  extends Pick<ImportedWebSocket, \"addEventListener\" | \"removeEventListener\">\n{\n  _eventEmitter: EventTarget;\n  readyState: 0 | 1 | 2 | 3;\n  send: MockedFunction<ImportedWebSocket[\"send\"]>;\n  close: MockedFunction<ImportedWebSocket[\"close\"]>;\n}\n\ninterface MockedWebSocket\n  extends MockedClass<typeof ImportedWebSocket>, MockedObject<RawWebSocketPlus>\n{\n}\n\ntype MockedListener = MockedObject<\n  Required<\n    ObjectSetSubscription.Listener<Employee, PropertyKeys<Employee>>\n  >\n>;\n\nfunction respondSuccessToSubscribe(\n  ws: MockedWebSocket,\n  subReq2: ObjectSetStreamSubscribeRequests,\n) {\n  sendToClient<StreamMessage>(\n    ws,\n    {\n      id: subReq2.id,\n      type: \"subscribeResponses\",\n      responses: [{\n        type: \"success\",\n        id: `${++currentSubscriptionId}`,\n      }],\n    },\n  );\n}\n\nfunction sendObjectUpdateResponse(\n  ws: MockedWebSocket,\n  subId: string,\n) {\n  const updateMessage: StreamMessage = {\n    type: \"objectSetChanged\",\n    id: subId,\n    updates: [{\n      type: \"object\",\n      state: \"ADDED_OR_UPDATED\",\n      object: {\n        __apiName: \"Employee\",\n        employeeId: 1,\n      },\n    }],\n  };\n\n  sendToClient<StreamMessage>(\n    ws,\n    updateMessage,\n  );\n}\n\nfunction sendReferenceUpdatesResponse(\n  ws: MockedWebSocket,\n  subId: string,\n) {\n  const referenceUpdateMessage: StreamMessage = {\n    type: \"objectSetChanged\",\n    id: subId,\n    updates: [{\n      \"type\": \"reference\",\n      \"objectType\": \"Employee\",\n      \"primaryKey\": { \"employeeId\": \"12345\" },\n      \"property\": \"employeeLocation\",\n      \"value\": {\n        \"timestamp\": \"111\",\n        \"type\": \"geotimeSeriesValue\",\n        \"position\": [100, 200],\n      },\n    }],\n  };\n\n  sendToClient<StreamMessage>(\n    ws,\n    referenceUpdateMessage,\n  );\n}\n\nfunction expectEqualRemoveAndAddListeners(ws: MockedWebSocket) {\n  expect(ws.removeEventListener).toHaveBeenCalledTimes(\n    ws.addEventListener.mock.calls.length,\n  );\n}\n\nasync function expectSubscribeMessages(\n  ws: MockedWebSocket,\n  times: number = 1,\n): Promise<ObjectSetStreamSubscribeRequests> {\n  return await vi.waitFor(() => {\n    expect(ws.send).toBeCalledTimes(times);\n    const result = JSON.parse(ws.send.mock.lastCall![0].toString());\n    ws.send.mockClear();\n    return result;\n  });\n}\n\nasync function subscribeAndExpectWebSocket(\n  client: ObjectSetListenerWebsocket,\n  listener: MockedListener,\n): Promise<readonly [MockedWebSocket, () => void]> {\n  const [ws, unsubscribe] = await Promise.all([\n    expectWebSocketConstructed(),\n    client.subscribe<Employee, PropertyKeys<Employee>>(\n      {\n        apiName: \"Employee\",\n        type: \"object\",\n      },\n      {\n        type: \"base\",\n        objectType: Employee.apiName,\n      },\n      listener,\n    ),\n  ]);\n\n  // otherwise the ObjectSetListenerWebSocket is sitting waiting for it to \"connect\"\n  setWebSocketState(ws, \"open\");\n\n  return [ws, unsubscribe] as const;\n}\n\nasync function expectWebSocketConstructed(): Promise<MockedWebSocket> {\n  expect(MockedWebSocket).toHaveBeenCalledTimes(0);\n\n  const ws = await vi.waitFor(() => {\n    expect(MockedWebSocket).toHaveBeenCalled();\n    expect(MockedWebSocket.mock.results[0].type === \"return\");\n    return MockedWebSocket.mock.results[0].value as MockedWebSocket;\n  });\n\n  expect(MockedWebSocket).toHaveBeenCalledTimes(1);\n  MockedWebSocket.mockClear();\n  expect(MockedWebSocket).toHaveBeenCalledTimes(0);\n\n  return ws;\n}\n\nfunction createMockWebSocketConstructor(\n  OriginalWebSocket: WebSocket,\n  logger: Logger,\n): MockedWebSocket {\n  let i = 0;\n  const ret = vi.fn(function(..._args: any[]): MockedWebSocket {\n    const webSocketInst = i++;\n    logger.debug(\"WebSocket constructor called\");\n    const eventEmitter = new EventTarget();\n\n    return {\n      addEventListener: vi.fn(\n        eventEmitter.addEventListener.bind(eventEmitter),\n      ) as any,\n      removeEventListener: vi.fn(\n        eventEmitter.removeEventListener.bind(eventEmitter),\n      ) as any,\n\n      send: vi.fn((a, _b: any) => {\n        logger.debug(\n          { message: JSON.parse(a.toString()), webSocketInst },\n          \"send() called\",\n        );\n      }),\n      close: vi.fn(),\n      _eventEmitter: eventEmitter,\n      readyState: OriginalWebSocket.CONNECTING,\n    } satisfies RawWebSocketPlus as any as MockedWebSocket;\n    // ^ we only implement some things but the type system wants to think its the full deal,\n    // thus the satisfies plus the cast\n  }) as any as MockedWebSocket;\n\n  Object.assign(ret, {\n    OPEN: OriginalWebSocket.OPEN,\n    CLOSED: OriginalWebSocket.CLOSED,\n    CLOSING: OriginalWebSocket.CLOSING,\n    CONNECTING: OriginalWebSocket.CONNECTING,\n  });\n\n  return ret;\n}\n\nfunction setWebSocketState(ws: MockedWebSocket, readyState: \"open\" | \"close\") {\n  const newState = readyState === \"open\"\n    ? ImportedWebSocket.OPEN\n    : ImportedWebSocket.CLOSED;\n\n  if (newState === ws.readyState) return;\n\n  ws.readyState = newState;\n  ws._eventEmitter.dispatchEvent(new Event(readyState, {}));\n}\n\nfunction addLoggerToApiServer(apiServer: SetupServer, logger: Logger) {\n  const z = (\n    name: string,\n    { requestId, request }: { requestId: string; request: Request },\n  ) => logger.trace({ requestId, url: request.url }, name);\n\n  const eventNames = [\n    \"request:start\",\n    \"request:match\",\n    \"request:end\",\n    \"request:unhandled\",\n    \"response:bypass\",\n    \"response:mocked\",\n  ] as const;\n\n  for (const c of eventNames) {\n    apiServer.events.on(c as typeof eventNames[number], z.bind(undefined, c));\n  }\n}\n\nconst SubscribeMessage = z.object({\n  id: z.string(),\n  requests: z.array(z.object({\n    objectSet: z.object({ id: z.string() }),\n    propertySet: z.array(z.string()),\n    referenceSet: z.array(z.string()),\n  })),\n});\n\nclass MessageEvent extends Event {\n  data: string;\n  constructor(data: any) {\n    super(\"message\");\n    this.data = JSON.stringify(data);\n  }\n}\n\nfunction sendToClient<T>(ws: MockedWebSocket, t: T) {\n  ws._eventEmitter.dispatchEvent(new MessageEvent(t));\n}\n"],"mappings":"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","ignoreList":[]}