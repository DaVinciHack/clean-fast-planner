{"version":3,"file":"types.js","names":[],"sources":["types.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  CompileTimeMetadata,\n  DataValueClientToWire,\n  DataValueWireToClient,\n  ObjectQueryDataType,\n  ObjectSetQueryDataType,\n  QueryDataTypeDefinition,\n  QueryDefinition,\n  QueryParam,\n  QueryResult,\n} from \"@osdk/api\";\nimport type { PartialByNotStrict } from \"../util/partialBy.js\";\n\nexport type QuerySignatureFromDef<T extends QueryDefinition<any>> = {\n  executeFunction: CompileTimeMetadata<T> extends never ? QuerySignature<T>\n    : CompileTimeMetadata<T>[\"signature\"];\n};\n\nexport type QuerySignature<T extends QueryDefinition<any>> =\n  keyof CompileTimeMetadata<T>[\"parameters\"] extends never\n    ? () => Promise<QueryReturnType<CompileTimeMetadata<T>[\"output\"]>>\n    : (\n      params: QueryParameterType<CompileTimeMetadata<T>[\"parameters\"]>,\n    ) => Promise<QueryReturnType<CompileTimeMetadata<T>[\"output\"]>>;\n\nexport type QueryParameterType<\n  T extends Record<any, QueryDataTypeDefinition>,\n> = PartialByNotStrict<NotOptionalParams<T>, OptionalQueryParams<T>>;\n\nexport type QueryReturnType<T extends QueryDataTypeDefinition> = T extends\n  ObjectQueryDataType<infer TTargetType> ? QueryResult.ObjectType<TTargetType>\n  : T extends ObjectSetQueryDataType<infer TTargetType>\n    ? QueryResult.ObjectSetType<TTargetType>\n  : T[\"type\"] extends keyof DataValueWireToClient\n    ? QueryResult.PrimitiveType<T[\"type\"]>\n  : never;\n\ntype OptionalQueryParams<\n  T extends Record<any, QueryDataTypeDefinition>,\n> = {\n  [K in keyof T]: T[K] extends { nullable: true } ? never : K;\n}[keyof T];\n\ntype NotOptionalParams<\n  T extends Record<any, QueryDataTypeDefinition>,\n> = {\n  [K in keyof T]: MaybeArrayType<T[K]>;\n};\n\ntype MaybeArrayType<T extends QueryDataTypeDefinition> =\n  T[\"multiplicity\"] extends true ? ReadonlyArray<QueryBaseType<T>>\n    : QueryBaseType<T>;\n\ntype QueryBaseType<T extends QueryDataTypeDefinition> = T extends\n  ObjectQueryDataType<infer TTargetType> ? QueryParam.ObjectType<TTargetType>\n  : T extends ObjectSetQueryDataType<infer TTargetType>\n    ? QueryParam.ObjectSetType<TTargetType>\n  : T[\"type\"] extends keyof DataValueClientToWire\n    ? QueryParam.PrimitiveType<T[\"type\"]>\n  : never;\n"],"mappings":"","ignoreList":[]}