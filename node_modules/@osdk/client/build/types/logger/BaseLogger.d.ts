import type { Logger } from "@osdk/api";
import type { LogFn } from "./Logger.js";
export declare function noop(): any;
interface LoggerConstructor {
	new (bindings: Record<string, any>, options?: {
		level?: string
		msgPrefix?: string
	}): Logger;
}
export declare abstract class BaseLogger implements Logger {
	#private;
	protected bindings: Record<string, any>;
	protected options: {
		level?: string
		msgPrefix?: string
	} | undefined;
	constructor(bindings: Record<string, any>, options: {
		level?: string
		msgPrefix?: string
	} | undefined, factory: LoggerConstructor);
	protected abstract createLogMethod(name: "trace" | "debug" | "info" | "warn" | "error" | "fatal", bindings: Record<string, any>): LogFn;
	trace: LogFn;
	debug: LogFn;
	warn: LogFn;
	info: LogFn;
	error: LogFn;
	fatal: LogFn;
	child(bindings: Record<string, any>, options?: {
		level?: string
		msgPrefix?: string
	}): Logger;
	isLevelEnabled(level: string): boolean;
}
export {};
