{"version":3,"sources":["../../src/createPlatformClient.ts","../../src/util/datetimeConverters.ts"],"names":["createSharedClientContext","USER_AGENT","invariant"],"mappings":";;;;;;;;;;;;;AA8BO,SAAS,qBAAqB,OAAS,EAAA,aAAA,EAAe,OAAU,GAAA,MAAA,EAAW,UAAU,KAAO,EAAA;AACjG,EAAA,OAAOA,4CAA0B,CAAA,OAAA,EAAS,aAAe,EAAAC,4BAAA,EAAY,OAAO,CAAA;AAC9E;ACfA,IAAM,QAAW,GAAA,uEAAA;AAQV,IAAM,cAAc,CAAY,QAAA,KAAA;AACrC,EAAA,EAAE,QAAS,CAAA,MAAA,GAAS,EAAM,CAAA,GAAA,OAAA,CAAQ,GAAI,CAAA,QAAA,KAAa,YAAe,GAAAC,0BAAA,CAAU,KAAO,EAAA,kDAAkD,CAAI,GAAAA,0BAAA,CAAU,KAAK,CAAI,GAAA,MAAA;AAC5J,EAAA,CAAC,SAAS,IAAK,CAAA,QAAQ,CAAI,GAAA,OAAA,CAAQ,IAAI,QAAa,KAAA,YAAA,GAAeA,0BAAU,CAAA,KAAA,EAAO,+DAA+D,QAAQ,CAAA,CAAE,CAAI,GAAAA,0BAAA,CAAU,KAAK,CAAI,GAAA,MAAA;AACpL,EAAA,OAAO,yBAAyB,QAAQ,CAAA;AAC1C;AAQO,IAAM,mBAAmB,CAAQ,IAAA,KAAA;AACtC,EAAO,OAAA,wBAAA,CAAyB,IAAK,CAAA,WAAA,EAAa,CAAA;AACpD;AAQO,IAAM,yBAAyB,CAAQ,IAAA,KAAA;AAC5C,EAAO,OAAA,wBAAA,CAAyB,uBAAwB,CAAA,IAAI,CAAC,CAAA;AAC/D;AAGO,IAAM,0BAA0B,CAAQ,IAAA,KAAA;AAC7C,EAAA,MAAM,QAAW,GAAA,IAAA,CAAK,iBAAkB,EAAA,GAAI,EAAK,GAAA,GAAA;AACjD,EAAA,OAAO,IAAI,IAAK,CAAA,IAAA,CAAK,SAAY,GAAA,QAAQ,EAAE,WAAY,EAAA;AACzD,CAAA;AACA,IAAM,2BAA2B,CAAY,QAAA,KAAA;AAC3C,EAAA,OAAO,QAAS,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA;AAC9B,CAAA","file":"index.cjs","sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createSharedClientContext } from \"@osdk/shared.client.impl\";\nimport { USER_AGENT } from \"./util/UserAgent.js\";\n/**\n * Creates a client that can only be used with Platform APIs.\n *\n * If you already have an OSDK Client (from `createClient`), you do not need to\n * create one of these - those clients can be used with Platform APIs as well.\n *\n * @param baseUrl\n * @param tokenProvider\n * @param options Currently unused, reserved for future use.\n * @param fetchFn\n * @returns\n */\nexport function createPlatformClient(baseUrl, tokenProvider, options = undefined, fetchFn = fetch) {\n  return createSharedClientContext(baseUrl, tokenProvider, USER_AGENT, fetchFn);\n}","/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport invariant from \"tiny-invariant\";\nconst isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?$/;\n\n/**\n * Extracts the date from a ISO 8601 formatted date time string. Throws if the input is not in the correct format.\n *\n * @param dateTime An ISO 8601 formatted date time string\n * @returns The date part of the input string\n */\nexport const extractDate = dateTime => {\n  !(dateTime.length < 33) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Invalid date format. Provided input is too long.\") : invariant(false) : void 0;\n  !isoRegex.test(dateTime) ? process.env.NODE_ENV !== \"production\" ? invariant(false, `Invalid date format. Expected ISO 8601 format, but received ${dateTime}`) : invariant(false) : void 0;\n  return extractDateFromIsoString(dateTime);\n};\n\n/**\n * Generates a string representation of the input date (YYYY-MM-DD). The resulting date string reflects the given date in UTC time.\n *\n * @param date\n * @returns The date part of a ISO 8601 formatted date time string\n */\nexport const extractDateInUTC = date => {\n  return extractDateFromIsoString(date.toISOString());\n};\n\n/**\n * Generates a string representation of the input date (YYYY-MM-DD). The resulting date string reflects the given date in the local time zone.\n *\n * @param date\n * @returns The date part of a ISO 8601 formatted date time string\n */\nexport const extractDateInLocalTime = date => {\n  return extractDateFromIsoString(generateOffsetUtcString(date));\n};\n\n/** @internal */\nexport const generateOffsetUtcString = date => {\n  const offsetMs = date.getTimezoneOffset() * 60 * 1000;\n  return new Date(date.getTime() - offsetMs).toISOString();\n};\nconst extractDateFromIsoString = dateTime => {\n  return dateTime.split(\"T\")[0];\n};"]}