import { ObjectOrInterfaceDefinition, CompileTimeMetadata, ObjectSet, Attachment, Logger } from '@osdk/api';
import { C as Client } from '../Client-DBTcM9gB.cjs';
import { a as LogFn, L as Logger$1 } from '../Logger-a5UcHtrk.cjs';
import '@osdk/shared.client';
import '@osdk/api/unstable';
import '@osdk/shared.client2';

/**
 * Fetches a temporary object set RID from the Foundry stack for the given object set.
 *
 * @param client - An OSDK client.
 * @param objectSet - The object set to fetch a RID for.
 * @returns A promise that resolves to the RID of the temporary object set.
 */
declare function createAndFetchTempObjectSetRid<Q extends ObjectOrInterfaceDefinition>(client: Client, objectSet: unknown extends CompileTimeMetadata<Q>["objectSet"] ? ObjectSet<Q> : CompileTimeMetadata<Q>["objectSet"]): Promise<string>;

/**
 * Helper function to create an attachment type from a rid
 * @param client -  An OSDK client.
 * @param rid - The rid of attachment in Foundry.
 * @returns An OSDK attachment object
 */
declare function hydrateAttachmentFromRid(client: Client, rid: string): Attachment;

/**
 * Creates an OSDK object set from an object set RID.
 * @param client - An OSDK client.
 * @param definition - An OSDK object or interface definition.
 * @param rid - The RID of an object set.
 * @returns An OSDK object set.
 */
declare function hydrateObjectSetFromRid<T extends ObjectOrInterfaceDefinition>(client: Client, definition: T, rid: string): ObjectSet<T>;

interface LoggerConstructor {
    new (bindings: Record<string, any>, options?: {
        level?: string;
        msgPrefix?: string;
    }): Logger;
}
declare abstract class BaseLogger implements Logger {
    #private;
    protected bindings: Record<string, any>;
    protected options: {
        level?: string;
        msgPrefix?: string;
    } | undefined;
    constructor(bindings: Record<string, any>, options: {
        level?: string;
        msgPrefix?: string;
    } | undefined, factory: LoggerConstructor);
    protected abstract createLogMethod(name: "trace" | "debug" | "info" | "warn" | "error" | "fatal", bindings: Record<string, any>): LogFn;
    trace: LogFn;
    debug: LogFn;
    warn: LogFn;
    info: LogFn;
    error: LogFn;
    fatal: LogFn;
    child(bindings: Record<string, any>, options?: {
        level?: string;
        msgPrefix?: string;
    }): Logger;
    isLevelEnabled(level: string): boolean;
}

declare class BrowserLogger extends BaseLogger implements Logger {
    constructor(bindings?: Record<string, any>, options?: {
        level?: string;
        msgPrefix?: string;
    });
    protected createLogMethod(name: "trace" | "debug" | "info" | "warn" | "error" | "fatal", bindings: Record<string, any>): LogFn;
}

declare class MinimalLogger extends BaseLogger implements Logger$1 {
    constructor(bindings?: Record<string, any>, options?: {
        level?: string;
        msgPrefix?: string;
    });
    createLogMethod(name: "trace" | "debug" | "info" | "warn" | "error" | "fatal", bindings: Record<string, any>): LogFn;
}

export { BrowserLogger, MinimalLogger, createAndFetchTempObjectSetRid, hydrateAttachmentFromRid, hydrateObjectSetFromRid };
