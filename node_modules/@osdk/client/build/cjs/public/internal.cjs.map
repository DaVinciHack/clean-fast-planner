{"version":3,"sources":["../../../src/public-utils/createAndFetchTempObjectSetRid.ts","../../../src/public-utils/hydrateObjectSetFromRid.ts","../../../src/logger/BrowserLogger.ts"],"names":["OntologyObjectSet_exports","additionalContext","getWireObjectSet","createObjectSet","BaseLogger"],"mappings":"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","file":"internal.cjs","sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OntologyObjectSets } from \"@osdk/foundry.ontologies\";\nimport { additionalContext } from \"../Client.js\";\nimport { getWireObjectSet } from \"../objectSet/createObjectSet.js\";\n\n/**\n * Fetches a temporary object set RID from the Foundry stack for the given object set.\n *\n * @param client - An OSDK client.\n * @param objectSet - The object set to fetch a RID for.\n * @returns A promise that resolves to the RID of the temporary object set.\n */\nexport async function createAndFetchTempObjectSetRid(client, objectSet) {\n  const response = await OntologyObjectSets.createTemporary(client, await client[additionalContext].ontologyRid, {\n    objectSet: getWireObjectSet(objectSet)\n  });\n  return response.objectSetRid;\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { additionalContext } from \"../Client.js\";\nimport { createObjectSet } from \"../objectSet/createObjectSet.js\";\n\n/**\n * Creates an OSDK object set from an object set RID.\n * @param client - An OSDK client.\n * @param definition - An OSDK object or interface definition.\n * @param rid - The RID of an object set.\n * @returns An OSDK object set.\n */\nexport function hydrateObjectSetFromRid(client, definition, rid) {\n  return createObjectSet(definition, client[additionalContext], {\n    type: \"intersect\",\n    objectSets: [{\n      type: \"base\",\n      objectType: definition.apiName\n    }, {\n      type: \"reference\",\n      reference: rid\n    }]\n  });\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseLogger } from \"./BaseLogger.js\";\nfunction createStyle({\n  color\n}) {\n  return `color: ${color}; border: 1px solid ${color}; padding: 2px; border-radius: 3px;`;\n}\nconst levelStyles = {\n  debug: createStyle({\n    color: \"LightBlue\"\n  }),\n  error: createStyle({\n    color: \"red\"\n  }),\n  fatal: createStyle({\n    color: \"red\"\n  }),\n  info: createStyle({\n    color: \"green\"\n  }),\n  trace: createStyle({\n    color: \"gray\"\n  }),\n  warn: createStyle({\n    color: \"orange\"\n  })\n};\nexport class BrowserLogger extends BaseLogger {\n  constructor(bindings = {}, options = {}) {\n    super(bindings, {\n      ...options,\n      level: options.level ?? \"error\"\n    }, BrowserLogger);\n  }\n  createLogMethod(name, bindings) {\n    const msgs = [`%c${name}%c`];\n    const styles = [levelStyles[name], \"\"];\n    if (this.options?.msgPrefix) {\n      msgs.push(`%c${this.options.msgPrefix}%c`);\n      styles.push(\"font-style: italic; color: gray\", \"\");\n    }\n    if (typeof bindings === \"object\" && \"methodName\" in bindings) {\n      msgs.push(`%c.${bindings.methodName}()%c`);\n      styles.push(\"font-style: italic;color: orchid\", \"\");\n    }\n    return (...args) => {\n      // eslint-disable-next-line no-console\n      console[name === \"fatal\" ? \"error\" : name](msgs.join(\" \"), ...styles, ...args);\n    };\n  }\n}"]}