'use strict';

var chunkHTPVXLYY_cjs = require('../chunk-HTPVXLYY.cjs');

// src/public-utils/createAndFetchTempObjectSetRid.ts
async function createAndFetchTempObjectSetRid(client, objectSet) {
  const response = await chunkHTPVXLYY_cjs.OntologyObjectSet_exports.createTemporary(client, await client[chunkHTPVXLYY_cjs.additionalContext].ontologyRid, {
    objectSet: chunkHTPVXLYY_cjs.getWireObjectSet(objectSet)
  });
  return response.objectSetRid;
}

// src/public-utils/hydrateObjectSetFromRid.ts
function hydrateObjectSetFromRid(client, definition, rid) {
  return chunkHTPVXLYY_cjs.createObjectSet(definition, client[chunkHTPVXLYY_cjs.additionalContext], {
    type: "intersect",
    objectSets: [{
      type: "base",
      objectType: definition.apiName
    }, {
      type: "reference",
      reference: rid
    }]
  });
}

// src/logger/BrowserLogger.ts
function createStyle({
  color
}) {
  return `color: ${color}; border: 1px solid ${color}; padding: 2px; border-radius: 3px;`;
}
var levelStyles = {
  debug: createStyle({
    color: "LightBlue"
  }),
  error: createStyle({
    color: "red"
  }),
  fatal: createStyle({
    color: "red"
  }),
  info: createStyle({
    color: "green"
  }),
  trace: createStyle({
    color: "gray"
  }),
  warn: createStyle({
    color: "orange"
  })
};
var BrowserLogger = class _BrowserLogger extends chunkHTPVXLYY_cjs.BaseLogger {
  constructor(bindings = {}, options = {}) {
    super(bindings, {
      ...options,
      level: options.level ?? "error"
    }, _BrowserLogger);
  }
  createLogMethod(name, bindings) {
    const msgs = [`%c${name}%c`];
    const styles = [levelStyles[name], ""];
    if (this.options?.msgPrefix) {
      msgs.push(`%c${this.options.msgPrefix}%c`);
      styles.push("font-style: italic; color: gray", "");
    }
    if (typeof bindings === "object" && "methodName" in bindings) {
      msgs.push(`%c.${bindings.methodName}()%c`);
      styles.push("font-style: italic;color: orchid", "");
    }
    return (...args) => {
      console[name === "fatal" ? "error" : name](msgs.join(" "), ...styles, ...args);
    };
  }
};

Object.defineProperty(exports, "MinimalLogger", {
  enumerable: true,
  get: function () { return chunkHTPVXLYY_cjs.MinimalLogger; }
});
Object.defineProperty(exports, "hydrateAttachmentFromRid", {
  enumerable: true,
  get: function () { return chunkHTPVXLYY_cjs.hydrateAttachmentFromRid; }
});
exports.BrowserLogger = BrowserLogger;
exports.createAndFetchTempObjectSetRid = createAndFetchTempObjectSetRid;
exports.hydrateObjectSetFromRid = hydrateObjectSetFromRid;
//# sourceMappingURL=internal.cjs.map
//# sourceMappingURL=internal.cjs.map