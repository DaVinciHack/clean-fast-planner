{"version":3,"sources":["../../../src/observable/internal/ObservableClientImpl.ts","../../../src/observable/DebugFlags.ts","../../../../../node_modules/.pnpm/delay@6.0.0/node_modules/delay/index.js","../../../src/observable/internal/OptimisticId.ts","../../../src/observable/internal/OptimisticJob.ts","../../../src/observable/internal/ActionApplication.ts","../../../src/observable/internal/CacheKeys.ts","../../../src/observable/internal/CacheKey.ts","../../../src/observable/internal/Changes.ts","../../../src/observable/internal/WeakMapWithEntries.ts","../../../src/observable/internal/Layer.ts","../../../src/observable/internal/objectMatchesWhereClause.ts","../../../../../node_modules/.pnpm/p-defer@4.0.1/node_modules/p-defer/index.js","../../../src/observable/internal/BulkObjectLoader.ts","../../../src/observable/internal/Query.ts","../../../src/observable/internal/tombstone.ts","../../../src/observable/internal/ObjectQuery.ts","../../../src/observable/internal/ListQuery.ts","../../../src/observable/internal/OrderByCanonicalizer.ts","../../../src/observable/internal/RefCounts.ts","../../../src/observable/internal/WhereClauseCanonicalizer.ts","../../../src/observable/internal/Store.ts","../../../src/observable/ObservableClient.ts","../../../src/public-utils/osdkConfig.ts"],"names":["additionalContext","Trie","invariant","MultiMap","deepEqual","DefaultWeakMap","DefaultMap","PalantirApiError","connectable","map","BehaviorSubject","switchMap","combineLatest","of","auditTime","ReplaySubject","ObjectDefRef","groupBy","UnderlyingOsdkObject","array","createClientFromContext","createFetchHeaderMutator","OBSERVABLE_USER_AGENT"],"mappings":"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","file":"unstable-do-not-use.cjs","sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @internal\n */\nexport class ObservableClientImpl {\n  constructor(store) {\n    this.__experimentalStore = store;\n    this.observeObject = store.observeObject.bind(store);\n    this.observeList = store.observeList.bind(store);\n    this.applyAction = store.applyAction.bind(store);\n    this.canonicalizeWhereClause = store.canonicalizeWhereClause.bind(store);\n  }\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEBUG_REFCOUNTS = process.env.NODE_ENV !== \"production\" && false;\nexport const DEBUG_CACHE_KEYS = process.env.NODE_ENV !== \"production\" && false;","// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\nconst createAbortError = () => {\n  const error = new Error('Delay aborted');\n  error.name = 'AbortError';\n  return error;\n};\nconst clearMethods = new WeakMap();\nexport function createDelay({\n  clearTimeout: defaultClear,\n  setTimeout: defaultSet\n} = {}) {\n  // We cannot use `async` here as we need the promise identity.\n  return (milliseconds, {\n    value,\n    signal\n  } = {}) => {\n    // TODO: Use `signal?.throwIfAborted()` when targeting Node.js 18.\n    if (signal?.aborted) {\n      return Promise.reject(createAbortError());\n    }\n    let timeoutId;\n    let settle;\n    let rejectFunction;\n    const clear = defaultClear ?? clearTimeout;\n    const signalListener = () => {\n      clear(timeoutId);\n      rejectFunction(createAbortError());\n    };\n    const cleanup = () => {\n      if (signal) {\n        signal.removeEventListener('abort', signalListener);\n      }\n    };\n    const delayPromise = new Promise((resolve, reject) => {\n      settle = () => {\n        cleanup();\n        resolve(value);\n      };\n      rejectFunction = reject;\n      timeoutId = (defaultSet ?? setTimeout)(settle, milliseconds);\n    });\n    if (signal) {\n      signal.addEventListener('abort', signalListener, {\n        once: true\n      });\n    }\n    clearMethods.set(delayPromise, () => {\n      clear(timeoutId);\n      timeoutId = null;\n      settle();\n    });\n    return delayPromise;\n  };\n}\nconst delay = createDelay();\nexport default delay;\nexport async function rangeDelay(minimum, maximum, options = {}) {\n  return delay(randomInteger(minimum, maximum), options);\n}\nexport function clearDelay(promise) {\n  clearMethods.get(promise)?.();\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function createOptimisticId() {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (createOptimisticId.counter === undefined) {\n      createOptimisticId.counter = 0;\n    }\n    return {\n      __optimisticId: createOptimisticId.counter++\n    };\n  }\n\n  // in production we can just use the lightest empty object possible\n  return Object.create(null);\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { additionalContext } from \"../../Client.js\";\nimport { createOptimisticId } from \"./OptimisticId.js\";\nexport class OptimisticJob {\n  #result;\n  constructor(store, optimisticId) {\n    const updatedObjects = [];\n\n    // due to potentially needing to fetch the object metadata,\n    // the creation of objects needs to be async. In practice, the\n    // metadata is cached.\n    const addedObjectPromises = [];\n    const deletedObjects = [];\n\n    // TODO, this code needs to be refactored. its weird right now\n    // but the contract for `runOptimisticJob` is good.\n\n    // todo memoize this\n    this.getResult = () => {\n      return this.#result ??= (async () => {\n        const addedObjects = await Promise.allSettled(addedObjectPromises);\n        const {\n          batchResult\n        } = store.batch({\n          optimisticId\n        }, batch => {\n          for (const obj of addedObjects) {\n            if (obj.status === \"fulfilled\") {\n              store.getObjectQuery(obj.value.$objectType, obj.value.$primaryKey).writeToStore(obj.value, \"loading\", batch);\n            } else {\n              // TODO FIXME\n              throw obj;\n            }\n          }\n          for (const obj of updatedObjects) {\n            store.getObjectQuery(obj.$objectType, obj.$primaryKey).writeToStore(obj, \"loading\", batch);\n          }\n          for (const obj of deletedObjects) {\n            store.getObjectQuery(obj.$objectType, obj.$primaryKey).deleteFromStore(\"loading\", batch);\n          }\n        });\n        return batchResult.changes;\n      })();\n    };\n    this.context = {\n      updateObject(value) {\n        updatedObjects.push(value);\n        return this;\n      },\n      createObject(type, pk, properties) {\n        const create = store.client[additionalContext].objectFactory2(store.client[additionalContext], [{\n          $primaryKey: pk,\n          $apiName: type.apiName,\n          $objectType: type.apiName,\n          ...properties\n        }], undefined, {}).then(objs => {\n          return objs[0];\n        });\n        addedObjectPromises.push(create);\n        return this;\n      },\n      deleteObject(value) {\n        deletedObjects.push(value);\n        return this;\n      }\n    };\n  }\n}\nexport function runOptimisticJob(store, optimisticUpdate) {\n  if (!optimisticUpdate) {\n    return () => Promise.resolve();\n  }\n  const optimisticId = createOptimisticId();\n  const job = new OptimisticJob(store, optimisticId);\n  optimisticUpdate(job.context);\n  const optimisticApplicationDone = job.getResult();\n  return () => {\n    return optimisticApplicationDone.then(\n    // we don't want to leak the result\n    () => undefined).finally(() => {\n      store.removeLayer(optimisticId);\n    });\n  };\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport delay from \"delay\";\nimport { runOptimisticJob } from \"./OptimisticJob.js\";\nconst ACTION_DELAY = process.env.NODE_ENV === \"production\" ? 0 : 1000;\nexport class ActionApplication {\n  constructor(store) {\n    this.store = store;\n  }\n  applyAction = async (action, args, {\n    optimisticUpdate\n  } = {}) => {\n    const logger = process.env.NODE_ENV !== \"production\" ? this.store.logger?.child({\n      methodName: \"applyAction\"\n    }) : this.store.logger;\n    const removeOptimisticResult = runOptimisticJob(this.store, optimisticUpdate);\n    return await (async () => {\n      try {\n        if (Array.isArray(args)) {\n          if (process.env.NODE_ENV !== \"production\") {\n            logger?.debug(\"applying action to multiple args\", args);\n          }\n          const results = await this.store.client(action).batchApplyAction(args, {\n            $returnEdits: true\n          });\n          await this.#invalidateActionEditResponse(results);\n          return results;\n        }\n\n        // The types for client get confused when we dynamically applyAction so we\n        // have to deal with the `any` here and force cast it to what it should be.\n        // TODO: Update the types so this doesn't happen!\n\n        const actionResults = await this.store.client(action).applyAction(args, {\n          $returnEdits: true\n        });\n        if (process.env.NODE_ENV !== \"production\") {\n          if (ACTION_DELAY > 0) {\n            logger?.debug(\"action done, pausing\", actionResults);\n            await delay(ACTION_DELAY);\n            logger?.debug(\"action done, pausing done\");\n          }\n        }\n        await this.#invalidateActionEditResponse(actionResults);\n        return actionResults;\n      } finally {\n        if (process.env.NODE_ENV !== \"production\") {\n          logger?.debug(\"optimistic action complete; remove the results\");\n        }\n        // make sure this happens even if the action fails\n        await removeOptimisticResult();\n      }\n    })();\n  };\n  #invalidateActionEditResponse = async ({\n    deletedObjects,\n    modifiedObjects,\n    addedObjects,\n    editedObjectTypes,\n    type\n  }) => {\n    let changes;\n    if (type === \"edits\") {\n      const promisesToWait = [];\n      for (const list of [deletedObjects, modifiedObjects, addedObjects]) {\n        for (const obj of list ?? []) {\n          promisesToWait.push(this.store.invalidateObject(obj.objectType, obj.primaryKey));\n        }\n      }\n      this.store.batch({}, batch => {\n        for (const {\n          objectType,\n          primaryKey\n        } of deletedObjects ?? []) {\n          const cacheKey = this.store.getCacheKey(\"object\", objectType, primaryKey);\n          this.store.peekQuery(cacheKey)?.deleteFromStore(\"loaded\",\n          // this is probably not the best value to use\n          batch);\n        }\n      });\n      await Promise.all(promisesToWait);\n    } else {\n      for (const apiName of editedObjectTypes) {\n        await this.store.invalidateObjectType(apiName, changes);\n      }\n    }\n  };\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Trie } from \"@wry/trie\";\nimport invariant from \"tiny-invariant\";\nimport { DEBUG_CACHE_KEYS } from \"../DebugFlags.js\";\nexport class CacheKeys {\n  #cacheKeys = new Trie(false, keys => {\n    const ret = {\n      type: keys[0],\n      otherKeys: keys.slice(1)\n    };\n    this.#onCreate(ret);\n    return ret;\n  });\n  #cacheKeyFactories = new Map();\n  #onCreate;\n  constructor(whereCanonicalizer, orderByCanonicalizer, onCreate) {\n    this.#onCreate = onCreate;\n    this.#registerCacheKeyFactory(\"object\", (apiName, pk) => {\n      if (process.env.NODE_ENV !== \"production\" && DEBUG_CACHE_KEYS) {\n        // eslint-disable-next-line no-console\n        console.debug(`CacheKeys.get([object, ${apiName}, ${pk}]) -- already exists? `, this.#cacheKeys.peekArray([\"object\", apiName, pk]) != null);\n      }\n      return this.#cacheKeys.lookupArray([\"object\", apiName, pk]);\n    });\n    this.#registerCacheKeyFactory(\"list\", (type, apiName, where, orderBy) => {\n      if (process.env.NODE_ENV !== \"production\" && DEBUG_CACHE_KEYS) {\n        // eslint-disable-next-line no-console\n        console.debug(`CacheKeys.get([list, ${apiName}, ${JSON.stringify(where)}, ${JSON.stringify(orderBy)}]) -- already exists? `, this.#cacheKeys.peekArray([\"list\", apiName, whereCanonicalizer.canonicalize(where), orderByCanonicalizer.canonicalize(orderBy)]) != null);\n      }\n      return this.#cacheKeys.lookupArray([\"list\", type, apiName, whereCanonicalizer.canonicalize(where), orderByCanonicalizer.canonicalize(orderBy)]);\n    });\n  }\n  #registerCacheKeyFactory(type, factory) {\n    this.#cacheKeyFactories.set(type, factory);\n  }\n  get(type, ...args) {\n    const factory = this.#cacheKeyFactories.get(type);\n    !factory ? process.env.NODE_ENV !== \"production\" ? invariant(false, `no cache key factory for type \"${type}\"`) : invariant(false) : void 0;\n    return factory(...args);\n  }\n  remove(cacheKey) {\n    this.#cacheKeys.remove(cacheKey.type, ...cacheKey.otherKeys);\n  }\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This isn't performant and should only be used for debug logging!\n * @internal\n */\nexport function DEBUG_ONLY__cacheKeyToString(x) {\n  if (process.env.NODE_ENV !== \"production\") {\n    return `${x.type}CacheKey<${x.otherKeys.map(xx => JSON.stringify(xx)).join(\", \")}>`.replaceAll(\"\\\"\", \"'\");\n  } else {\n    throw new Error(\"not implemented\");\n  }\n}\n/**\n * This isn't performant and should only be used for debug logging!\n * @internal\n */\nexport function DEBUG_ONLY__cacheKeysToString(x) {\n  if (process.env.NODE_ENV !== \"production\") {\n    return \"\\n  - \" + x.map(DEBUG_ONLY__cacheKeyToString).join(\"\\n  - \");\n  } else {\n    throw new Error(\"not implemented\");\n  }\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MultiMap } from \"mnemonist\";\nimport { DEBUG_ONLY__cacheKeyToString } from \"./CacheKey.js\";\nexport class Changes {\n  modifiedObjects = new MultiMap();\n  addedObjects = new MultiMap();\n  added = new Set();\n  modified = new Set();\n  deleted = new Set();\n  registerObject = (cacheKey, data, isNew) => {\n    this[isNew ? \"addedObjects\" : \"modifiedObjects\"].set(data.$apiName, data);\n    this[isNew ? \"added\" : \"modified\"].add(cacheKey);\n  };\n  deleteObject = cacheKey => {\n    this.deleted.add(cacheKey);\n  };\n  registerList = key => {\n    this.modified.add(key);\n  };\n  isEmpty() {\n    return this.modifiedObjects.size === 0 && this.addedObjects.size === 0 && this.added.size === 0 && this.modified.size === 0 && this.deleted.size === 0;\n  }\n}\nexport function createChangedObjects() {\n  return new Changes();\n}\nexport function DEBUG_ONLY__changesToString(changes) {\n  if (process.env.NODE_ENV !== \"production\") {\n    return JSON.stringify({\n      modifiedObjects: multimapHelper(changes.modifiedObjects),\n      addedObjects: multimapHelper(changes.addedObjects),\n      added: listHelper(changes.added),\n      modified: listHelper(changes.modified)\n    }, null, 2);\n  } else {\n    throw new Error(\"not implemented\");\n  }\n}\nfunction listHelper(set) {\n  return Array.from(set).map(DEBUG_ONLY__cacheKeyToString);\n}\nfunction multimapHelper(multimap) {\n  return Object.fromEntries(Array.from(multimap.associations()).map(([type, objects]) => {\n    return [type, objects.map(o => o.$primaryKey)];\n  }));\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class WeakMapWithEntries {\n  #map = new WeakMap();\n  #list = [];\n  #toClean = [];\n  #needsCleaning = false;\n  #registry = new FinalizationRegistry(() => {\n    this.#toClean.push(new WeakRef({}));\n    this.#needsCleaning = true;\n  });\n  constructor() {\n    const weakThis = new WeakRef(this);\n    const intervalId = setInterval(() => {\n      const self = weakThis.deref();\n      if (self) {\n        if (this.#needsCleaning) {\n          this.#clean();\n        }\n      } else {\n        clearInterval(intervalId);\n      }\n    }, 1000);\n  }\n  #clean() {\n    this.#list = this.#list.filter(ref => ref.deref() !== undefined);\n  }\n\n  // functions for WeakMap\n  delete(key) {\n    const ret = this.#map.delete(key);\n    this.#toClean.push(new WeakRef(key));\n    this.#needsCleaning = true;\n    return ret;\n  }\n  get(key) {\n    return this.#map.get(key);\n  }\n  has(key) {\n    return this.#map.has(key);\n  }\n\n  /**\n   * Adds a new element with a specified key and value.\n   * @param key Must be an object or symbol.\n   */\n  set(key, value) {\n    if (!this.#map.has(key)) {\n      this.#list.push(new WeakRef(key));\n    }\n    this.#map.set(key, value);\n    return this;\n  }\n  [Symbol.toStringTag] = \"WeakMap\";\n\n  // functions for iterables\n  /** Returns an iterable of entries in the map. */\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  /**\n   * Returns an iterable of key, value pairs for every entry in the map.\n   */\n  entries() {\n    const self = this;\n    function* iter() {\n      for (const ref of self.#list) {\n        const key = ref.deref();\n        if (key !== undefined) {\n          yield [key, self.#map.get(key)];\n        }\n      }\n    }\n    return iter();\n  }\n\n  /**\n   * Returns an iterable of keys in the map\n   */\n  keys() {\n    const self = this;\n    function* iter() {\n      for (const ref of self.#list) {\n        const key = ref.deref();\n        if (key !== undefined) {\n          yield key;\n        }\n      }\n    }\n    return iter();\n  }\n\n  /**\n   * Returns an iterable of values in the map\n   */\n  values() {\n    const self = this;\n    function* iter() {\n      for (const ref of self.#list) {\n        const key = ref.deref();\n        if (key !== undefined) {\n          const value = self.#map.get(key);\n          if (value !== undefined) {\n            yield value;\n          }\n        }\n      }\n    }\n    return iter();\n  }\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WeakMapWithEntries } from \"./WeakMapWithEntries.js\";\n\n/*\n  Image some layers\n\n  [\n    { cache: { obj1: { a: 1 } }, layerId: undefined },\n    { cache: { obj1: { a: 1, b: 2 } }, layerId: \"layer1\" },\n    { cache: { obj1: { a: undefined, b: 2 } }, layerId: \"layer2\" },\n    { cache: { obj1: { a: 1, b: 2 } }, layerId: \"layer3\" },\n  ]\n*/\n\nexport class Layer {\n  #parent;\n  #cache = new WeakMapWithEntries();\n  #layerId;\n  constructor(parent, layerId) {\n    this.#parent = parent;\n    this.#layerId = layerId;\n  }\n  get parentLayer() {\n    return this.#parent;\n  }\n  get layerId() {\n    return this.#layerId;\n  }\n  addLayer(layerId) {\n    return new Layer(this, layerId);\n  }\n  removeLayer(layerId) {\n    if (layerId == null || this.#parent == null) {\n      // we are the root, so we can't remove anything\n      return this;\n    }\n    if (this.#layerId !== layerId) {\n      this.#parent = this.#parent.removeLayer(layerId);\n      return this;\n    }\n    return this.#parent.removeLayer(layerId);\n  }\n  entries() {\n    return this.#cache.entries();\n  }\n  keys() {\n    return this.#cache.keys();\n  }\n  get(cacheKey) {\n    return this.#cache.get(cacheKey) ?? this.#parent?.get(cacheKey);\n  }\n  set(cacheKey, value) {\n    this.#cache.set(cacheKey, value);\n  }\n}\nexport class Entry {\n  constructor(cacheKey, value, lastUpdated, status = \"init\") {\n    this.cacheKey = cacheKey;\n    this.value = value;\n    this.lastUpdated = lastUpdated;\n    this.status = status;\n  }\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport deepEqual from \"fast-deep-equal\";\nimport invariant from \"tiny-invariant\";\nfunction is$and(whereClause) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (\"$and\" in whereClause) {\n      !Array.isArray(whereClause.$and) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"expected $and to be an array\") : invariant(false) : void 0;\n      !(Object.keys(whereClause).length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"expected only $and to be present\") : invariant(false) : void 0;\n    }\n  }\n  return \"$and\" in whereClause;\n}\nfunction is$or(whereClause) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (\"$or\" in whereClause) {\n      !Array.isArray(whereClause.$or) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"expected $or to be an array\") : invariant(false) : void 0;\n      !(Object.keys(whereClause).length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"expected only $or to be present\") : invariant(false) : void 0;\n    }\n  }\n  return \"$or\" in whereClause;\n}\nfunction is$not(whereClause) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (\"$not\" in whereClause) {\n      !(Object.keys(whereClause).length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"expected only $not to be present\") : invariant(false) : void 0;\n    }\n  }\n  return \"$not\" in whereClause;\n}\nexport function objectSortaMatchesWhereClause(o, whereClause, strict) {\n  if (deepEqual({}, whereClause)) {\n    return true;\n  }\n  if (is$and(whereClause)) {\n    return whereClause.$and.every(w => objectSortaMatchesWhereClause(o, w, strict));\n  }\n  if (is$or(whereClause)) {\n    return whereClause.$or.some(w => objectSortaMatchesWhereClause(o, w, strict));\n  }\n  if (is$not(whereClause)) {\n    return !objectSortaMatchesWhereClause(o, whereClause.$not, strict);\n  }\n  return Object.entries(whereClause).every(([key, filter]) => {\n    if (typeof filter === \"object\") {\n      const realValue = o[key];\n      const [f] = Object.keys(filter);\n      const expected = filter[f];\n      switch (f) {\n        case \"$eq\":\n          return realValue === expected;\n        case \"$gt\":\n          return realValue > expected;\n        case \"$lt\":\n          return realValue < expected;\n        case \"$gte\":\n          return realValue >= expected;\n        case \"$lte\":\n          return realValue <= expected;\n        case \"$ne\":\n          return realValue !== expected;\n        case \"$in\":\n          return expected.$in.includes(realValue);\n        case \"$isNull\":\n          return realValue == null;\n        case \"$startsWith\":\n          return realValue.startsWith(expected);\n        case \"$contains\":\n        case \"$containsAllTerms\":\n        case \"$containsAllTermsInOrder\":\n        case \"$containsAnyTerm\":\n        case \"$intersects\":\n        case \"$within\":\n          // for these we will strictly say no and loosely say yes\n          // so that they don't change things now but may if reloaded\n          return !strict;\n        default:\n          // same thing here as the above cases but we will catch the\n          // exhaustive check in dev\n          if (process.env.NODE_ENV !== \"production\") {\n            const exhaustive = f;\n            !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, `Unknown where filter ${f}`) : invariant(false) : void 0;\n          }\n          return !strict;\n      }\n    }\n    if (key in o) {\n      if (o[key] === filter) {\n        return true;\n      }\n    }\n    return false;\n  });\n}","export default function pDefer() {\n  const deferred = {};\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PalantirApiError } from \"@osdk/shared.net.errors\";\nimport { DefaultMap, DefaultWeakMap } from \"mnemonist\";\nimport pDefer from \"p-defer\";\nimport { additionalContext } from \"../../Client.js\";\nconst weakCache = new DefaultWeakMap(c => new BulkObjectLoader(c));\nexport function getBulkObjectLoader(client) {\n  return weakCache.get(client);\n}\nexport class BulkObjectLoader {\n  #client;\n  #m = new DefaultMap(() => ({\n    data: [],\n    timer: undefined\n  }));\n  #logger;\n  #maxWait;\n  #maxEntries;\n  constructor(client, maxWait = 25, maxEntries = 100) {\n    this.#client = client;\n    this.#logger = client[additionalContext].logger;\n    this.#maxWait = maxWait;\n    this.#maxEntries = maxEntries;\n  }\n  fetch(apiName, primaryKey) {\n    const deferred = pDefer();\n    const entry = this.#m.get(apiName);\n    entry.data.push({\n      primaryKey: primaryKey,\n      deferred\n    });\n    if (!entry.timer) {\n      entry.timer = setTimeout(() => {\n        this.#loadObjects(apiName, entry.data);\n      }, this.#maxWait);\n    }\n    if (entry.data.length >= this.#maxEntries) {\n      clearTimeout(entry.timer);\n      this.#loadObjects(apiName, entry.data);\n    }\n    return deferred.promise;\n  }\n  #loadObjects(apiName, arr) {\n    this.#m.delete(apiName);\n    this.#reallyLoadObjects(apiName, arr).catch(e => {\n      this.#logger?.error(\"Unhandled exception\", e);\n    });\n  }\n  async #reallyLoadObjects(apiName, arr) {\n    const miniDef = {\n      type: \"object\",\n      apiName\n    };\n    const objMetadata = await this.#client.fetchMetadata(miniDef);\n    const pks = arr.map(x => x.primaryKey);\n    const {\n      data\n    } = await this.#client(miniDef).where({\n      [objMetadata.primaryKeyApiName]: {\n        $in: pks\n      }\n    }).fetchPage({\n      $pageSize: pks.length\n    });\n    for (const {\n      primaryKey,\n      deferred\n    } of arr) {\n      const object = data.find(x => x.$primaryKey === primaryKey);\n      if (object) {\n        deferred.resolve(object);\n      } else {\n        deferred.reject(new PalantirApiError(\"Object not found\"));\n      }\n    }\n  }\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { additionalContext } from \"../../Client.js\";\nexport class Query {\n  retainCount = 0;\n  #connectable;\n  #subscription;\n  #subject;\n\n  /** @internal */\n\n  constructor(store, observable, opts, cacheKey, logger) {\n    this.options = opts;\n    this.cacheKey = cacheKey;\n    this.store = store;\n    this.#subject = observable;\n    this.logger = logger ?? (process.env.NODE_ENV === \"production\" ? store.client[additionalContext].logger : store.client[additionalContext].logger?.child({}, {\n      msgPrefix: process.env.NODE_ENV !== \"production\" ? `Query<${cacheKey.type}, ${cacheKey.otherKeys.map(x => JSON.stringify(x)).join(\", \")}>` : \"Query\"\n    }));\n  }\n  subscribe(observer) {\n    this.#connectable ??= this._createConnectable(this.#subject);\n    this.#subscription = this.#connectable.connect();\n    return this.#connectable.subscribe(observer);\n  }\n\n  /**\n   * Causes the query to revalidate. This will cause the query to fetch\n   * the latest data from the server and update the store if it is deemed\n   * \"stale\" or if `force` is true.\n   *\n   * @param force\n   * @returns\n   */\n  async revalidate(force) {\n    const logger = process.env.NODE_ENV !== \"production\" ? this.logger?.child({\n      methodName: \"revalidate\"\n    }) : this.logger;\n    if (force) {\n      this.abortController?.abort();\n    }\n\n    // n.b. I think this isn't quite right since we may require multiple\n    // pages to properly \"revalidate\" for someone. This only really works if you\n    // have a single page/object. It needs to be redone. FIXME\n\n    // if we are pending the first page/object we can just ignore this\n    if (this.pendingFetch) {\n      if (process.env.NODE_ENV !== \"production\") {\n        logger?.debug(\"Fetch is already pending, using it\");\n      }\n      await this.pendingFetch;\n      return;\n    }\n    if ((this.options.dedupeInterval ?? 0) > 0 && this.lastFetchStarted != null && Date.now() - this.lastFetchStarted < (this.options.dedupeInterval ?? 0)) {\n      if (process.env.NODE_ENV !== \"production\") {\n        logger?.debug(\"Within dupeInterval, aborting revalidate\");\n      }\n      return Promise.resolve();\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      logger?.debug(\"Starting actual revalidate\");\n    }\n    this.store.batch({}, batch => {\n      // make sure the truth layer knows we are loading\n\n      // this will not trigger an update to `changes` so it cannot trigger an\n      // update of a list either. This may not be the behavior we want.\n      this.setStatus(\"loading\", batch);\n    });\n    this._preFetch();\n    this.lastFetchStarted = Date.now();\n    if (process.env.NODE_ENV !== \"production\") {\n      logger?.debug(\"calling _fetchAndStore()\");\n    }\n    this.pendingFetch = this._fetchAndStore().finally(() => {\n      logger?.debug(\"finally _fetchAndStore()\");\n      this.pendingFetch = undefined;\n    });\n    await this.pendingFetch;\n    return;\n  }\n  _preFetch() {}\n  /**\n   * Sets the status of the query in the store (but does not store that in `changes`).\n   *\n   * @param status\n   * @param batch\n   * @returns\n   */\n  setStatus(status, batch) {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"setStatus\"\n      }).debug(status);\n    }\n    const existing = batch.read(this.cacheKey);\n    if (existing?.status === status) return;\n    batch.write(this.cacheKey, existing?.value, status);\n  }\n  dispose() {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n    this.#subscription?.unsubscribe();\n    this._dispose();\n  }\n\n  /**\n   * Per query type dispose functionality\n   */\n  _dispose() {}\n\n  /**\n   * The purpose of this method is to provide a way for others to write\n   * directly into the store for this query.\n   *\n   * @param data\n   * @param status\n   * @param batch\n   */\n\n  /**\n   * @param changes\n   * @param optimisticId\n   * @returns If revalidation is needed, a promise that resolves after the\n   *          revalidation is complete. Otherwise, undefined.\n   */\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const tombstone = undefined;","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport deepEqual from \"fast-deep-equal\";\nimport { BehaviorSubject, connectable, map } from \"rxjs\";\nimport { additionalContext } from \"../../Client.js\";\nimport { getBulkObjectLoader } from \"./BulkObjectLoader.js\";\nimport { Query } from \"./Query.js\";\nimport { tombstone } from \"./tombstone.js\";\nexport class ObjectQuery extends Query {\n  #apiName;\n  #pk;\n  constructor(store, subject, type, pk, cacheKey, opts) {\n    super(store, subject, opts, cacheKey, process.env.NODE_ENV !== \"production\" ? store.client[additionalContext].logger?.child({}, {\n      msgPrefix: `ObjectQuery<${cacheKey.otherKeys.map(x => JSON.stringify(x)).join(\", \")}>`\n    }) : undefined);\n    this.#apiName = type;\n    this.#pk = pk;\n  }\n  _createConnectable(subject) {\n    return connectable(subject.pipe(map(x => {\n      return {\n        status: x.status,\n        object: x.value,\n        lastUpdated: x.lastUpdated,\n        isOptimistic: x.isOptimistic\n      };\n    })), {\n      connector: () => new BehaviorSubject({\n        status: \"init\",\n        object: undefined,\n        lastUpdated: 0,\n        isOptimistic: false\n      })\n    });\n  }\n  async _fetchAndStore() {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"_fetchAndStore\"\n      }).debug(\"calling _fetchAndStore\");\n    }\n    const obj = await getBulkObjectLoader(this.store.client).fetch(this.#apiName, this.#pk);\n    this.store.batch({}, batch => {\n      this.writeToStore(obj, \"loaded\", batch);\n    });\n  }\n  writeToStore(data, status, batch) {\n    const entry = batch.read(this.cacheKey);\n    if (entry && deepEqual(data, entry.value)) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this.logger?.child({\n          methodName: \"writeToStore\"\n        }).debug(`Object was deep equal, just setting status`);\n      }\n      // must do a \"full write\" here so that the lastUpdated is updated but we\n      // don't want to retrigger anyone's memoization on the value!\n      return batch.write(this.cacheKey, entry.value, status);\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"writeToStore\"\n      }).debug(JSON.stringify({\n        status\n      }), data);\n    }\n    const ret = batch.write(this.cacheKey, data, status);\n    batch.changes.registerObject(this.cacheKey, data, /* isNew */!entry);\n    return ret;\n  }\n  deleteFromStore(status, batch) {\n    const entry = batch.read(this.cacheKey);\n    if (entry && deepEqual(tombstone, entry.value)) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this.logger?.child({\n          methodName: \"deleteFromStore\"\n        }).debug(`Object was deep equal, just setting status`);\n      }\n      // must do a \"full write\" here so that the lastUpdated is updated but we\n      // don't want to retrigger anyone's memoization on the value!\n      return batch.write(this.cacheKey, entry.value, status);\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"deleteFromStore\"\n      }).debug(JSON.stringify({\n        status\n      }));\n    }\n\n    // if there is no entry then there is nothing to do\n    if (!entry || !entry.value) {\n      return;\n    }\n    const ret = batch.delete(this.cacheKey, status);\n    batch.changes.deleteObject(this.cacheKey);\n    return ret;\n  }\n}\n\n/**\n * Internal helper method for writing objects to the store and returning their\n * object keys\n * @internal\n */\nexport function storeOsdkInstances(store, values, batch) {\n  // update the cache for any object that has changed\n  // and save the mapped values to return\n  return values.map(v => {\n    return store.getObjectQuery(v.$apiName, v.$primaryKey).writeToStore(v, \"loaded\", batch).cacheKey;\n  });\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport deepEqual from \"fast-deep-equal\";\nimport groupBy from \"object.groupby\";\nimport { auditTime, combineLatest, connectable, map, of, ReplaySubject, switchMap } from \"rxjs\";\nimport invariant from \"tiny-invariant\";\nimport { additionalContext } from \"../../Client.js\";\nimport { ObjectDefRef, UnderlyingOsdkObject } from \"../../object/convertWireToOsdkObjects/InternalSymbols.js\";\nimport { DEBUG_ONLY__cacheKeysToString } from \"./CacheKey.js\";\nimport { DEBUG_ONLY__changesToString } from \"./Changes.js\";\nimport { objectSortaMatchesWhereClause as objectMatchesWhereClause } from \"./objectMatchesWhereClause.js\";\nimport { storeOsdkInstances } from \"./ObjectQuery.js\";\nimport { Query } from \"./Query.js\";\nexport const API_NAME_IDX = 1;\nexport const TYPE_IDX = 0;\nexport const WHERE_IDX = 2;\nexport const ORDER_BY_IDX = 3;\nclass BaseListQuery extends Query {\n  //\n  // Per list type implementations\n  //\n\n  //\n  // Shared Implementations\n  //\n\n  /**\n   * Only intended to be \"protected\" and used by subclasses but exposed for\n   * testing.\n   *\n   * @param objectCacheKeys\n   * @param append\n   * @param status\n   * @param batch\n   * @returns\n   */\n  _updateList(objectCacheKeys, append, status, batch) {\n    if (process.env.NODE_ENV !== \"production\") {\n      const logger = process.env.NODE_ENV !== \"production\" ? this.logger?.child({\n        methodName: \"updateList\"\n      }) : this.logger;\n      logger?.debug(`{status: ${status}}`, JSON.stringify(objectCacheKeys, null, 2));\n    }\n    objectCacheKeys = this.#retainReleaseAppend(batch, append, objectCacheKeys);\n    objectCacheKeys = this._sortCacheKeys(objectCacheKeys, batch);\n    objectCacheKeys = removeDuplicates(objectCacheKeys, batch);\n    return this.writeToStore({\n      data: objectCacheKeys\n    }, status, batch);\n  }\n  writeToStore(data, status, batch) {\n    const entry = batch.read(this.cacheKey);\n    if (entry && deepEqual(data, entry.value)) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this.logger?.child({\n          methodName: \"writeToStore\"\n        }).debug(`Object was deep equal, just setting status`);\n      }\n      return batch.write(this.cacheKey, entry.value, status);\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"writeToStore\"\n      }).debug(`{status: ${status}},`, DEBUG_ONLY__cacheKeysToString(data.data));\n    }\n    const ret = batch.write(this.cacheKey, data, status);\n    batch.changes.registerList(this.cacheKey);\n    return ret;\n  }\n  #retainReleaseAppend(batch, append, objectCacheKeys) {\n    const existingList = batch.read(this.cacheKey);\n\n    // whether its append or update we need to retain all the new objects\n    if (!batch.optimisticWrite) {\n      if (!append) {\n        // we need to release all the old objects\n        // N.B. the store keeps the cache keys around for a bit so we don't\n        // need to worry about them being GC'd before we re-retain them\n        for (const objectCacheKey of existingList?.value?.data ?? []) {\n          this.store.release(objectCacheKey);\n        }\n      }\n      for (const objectCacheKey of objectCacheKeys) {\n        this.store.retain(objectCacheKey);\n      }\n    }\n    if (append) {\n      objectCacheKeys = [...(existingList?.value?.data ?? []), ...objectCacheKeys];\n    }\n    return objectCacheKeys;\n  }\n  _dispose() {\n    // eslint-disable-next-line no-console\n    console.log(\"DISPOSE LIST QUERY\");\n    this.store.batch({}, batch => {\n      const entry = batch.read(this.cacheKey);\n      if (entry) {\n        for (const objectCacheKey of entry.value?.data ?? []) {\n          this.store.release(objectCacheKey);\n        }\n      }\n    });\n  }\n}\nexport class ListQuery extends BaseListQuery {\n  // pageSize?: number; // this is the internal page size. we need to track this properly\n\n  #type;\n  #apiName;\n  #whereClause;\n\n  // this represents the minimum number of results we need to load if we revalidate\n  #minNumResults = 0;\n  #nextPageToken;\n  #pendingPageFetch;\n  #orderBy;\n  #objectSet;\n  #sortFns;\n  constructor(store, subject, apiType, apiName, whereClause, orderBy, cacheKey, opts) {\n    super(store, subject, opts, cacheKey, process.env.NODE_ENV !== \"production\" ? store.client[additionalContext].logger?.child({}, {\n      msgPrefix: `ListQuery<${cacheKey.otherKeys.map(x => JSON.stringify(x)).join(\", \")}>`\n    }) : undefined);\n    this.#type = apiType;\n    this.#apiName = apiName;\n    this.#whereClause = whereClause;\n    this.#orderBy = orderBy;\n    this.#objectSet = store.client({\n      type: this.#type,\n      apiName: this.#apiName\n    }).where(this.#whereClause);\n    this.#sortFns = createOrderBySortFns(this.#orderBy);\n  }\n  get canonicalWhere() {\n    return this.#whereClause;\n  }\n  _createConnectable(subject) {\n    return connectable(subject.pipe(switchMap(listEntry => {\n      return combineLatest({\n        resolvedList: listEntry?.value?.data == null || listEntry.value.data.length === 0 ? of([]) : combineLatest(listEntry.value.data.map(cacheKey => this.store.getSubject(cacheKey).pipe(map(objectEntry => objectEntry?.value)))),\n        isOptimistic: of(listEntry.isOptimistic),\n        fetchMore: of(this.fetchMore),\n        hasMore: of(this.#nextPageToken != null),\n        status: of(listEntry.status),\n        lastUpdated: of(listEntry.lastUpdated)\n      });\n    }),\n    // like throttle but returns the tail\n    auditTime(0)), {\n      resetOnDisconnect: false,\n      connector: () => new ReplaySubject(1)\n    });\n  }\n  _preFetch() {\n    this.#nextPageToken = undefined;\n  }\n  async _fetchAndStore() {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"_fetchAndStore\"\n      }).debug(\"fetching pages\");\n    }\n    while (true) {\n      const entry = await this.#fetchPageAndUpdate(this.#objectSet, \"loading\", this.abortController?.signal);\n      if (!entry) {\n        // we were aborted\n        return;\n      }\n      !entry.value?.data ? process.env.NODE_ENV !== \"production\" ? invariant(false) : invariant(false) : void 0;\n      const count = entry.value.data.length;\n      if (count > this.#minNumResults || this.#nextPageToken == null) {\n        break;\n      }\n    }\n    this.store.batch({}, batch => {\n      this.setStatus(\"loaded\", batch);\n    });\n    return Promise.resolve();\n  }\n  fetchMore = () => {\n    if (this.#pendingPageFetch) {\n      return this.#pendingPageFetch;\n    }\n    if (this.pendingFetch) {\n      this.#pendingPageFetch = new Promise(async res => {\n        await this.pendingFetch;\n        res(this.fetchMore());\n      });\n      return this.#pendingPageFetch;\n    }\n    if (this.#nextPageToken == null) {\n      return Promise.resolve();\n    }\n    this.store.batch({}, batch => {\n      this.setStatus(\"loading\", batch);\n    });\n    this.pendingFetch = this.#fetchPageAndUpdate(this.#objectSet, \"loaded\", this.abortController?.signal).finally(() => {\n      this.#pendingPageFetch = undefined;\n    });\n    return this.pendingFetch;\n  };\n  async #fetchPageAndUpdate(objectSet, status, signal) {\n    const append = this.#nextPageToken != null;\n    try {\n      let {\n        data,\n        nextPageToken\n      } = await objectSet.fetchPage({\n        $nextPageToken: this.#nextPageToken,\n        $pageSize: this.options.pageSize,\n        // For now this keeps the shared test code from falling apart\n        // but shouldn't be needed ideally\n        ...(Object.keys(this.#orderBy).length > 0 ? {\n          $orderBy: this.#orderBy\n        } : {})\n      });\n      if (signal?.aborted) {\n        return;\n      }\n      this.#nextPageToken = nextPageToken;\n\n      // Our caching really expects to have the full objects in the list\n      // so we need to fetch them all here\n      if (this.#type === \"interface\") {\n        data = await reloadDataAsFullObjects(this.store.client, data);\n      }\n      const {\n        retVal\n      } = this.store.batch({}, batch => {\n        return this._updateList(storeOsdkInstances(this.store, data, batch), append, nextPageToken ? status : \"loaded\", batch);\n      });\n      return retVal;\n    } catch (e) {\n      this.logger?.error(\"error\", e);\n      this.store.getSubject(this.cacheKey).error(e);\n\n      // rethrowing would result in many unhandled promise rejections\n      // which i don't think we want\n      // throw e;\n    }\n  }\n\n  /**\n   * Will revalidate the list if its query is affected by invalidating the\n   * apiName of the object type passed in.\n   *\n   * @param apiName to invalidate\n   * @returns\n   */\n  revalidateObjectType = async apiName => {\n    if (this.#type === \"object\") {\n      if (this.#apiName === apiName) {\n        await this.revalidate(/* force */true);\n        return;\n      } else {\n        return;\n      }\n    }\n    //\n    const objectMetadata = await this.store.client.fetchMetadata({\n      type: \"object\",\n      apiName\n    });\n    if (this.#apiName in objectMetadata.interfaceMap) {\n      await this.revalidate(/* force */true);\n      return;\n    }\n  };\n\n  /**\n   * Note: This method is not async because I want it to return right after it\n   *       finishes the synchronous updates. The promise that is returned\n   *       will resolve after the revalidation is complete.\n   * @param changes\n   * @param optimisticId\n   * @returns If revalidation is needed, a promise that resolves after the\n   *          revalidation is complete. Otherwise, undefined.\n   */\n\n  maybeUpdateAndRevalidate = (changes, optimisticId) => {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"maybeUpdateAndRevalidate\"\n      }).debug(DEBUG_ONLY__changesToString(changes));\n    }\n    if (changes.modified.has(this.cacheKey)) return;\n    // mark ourselves as updated so we don't infinite recurse.\n    changes.modified.add(this.cacheKey);\n    try {\n      const relevantObjects = this._extractRelevantObjects(changes);\n\n      // If we got purely strict matches we can just update the list and move\n      // on with our lives. But if we got sorta matches, then we need to revalidate\n      // the list so we preemptively set it to loading to avoid thrashing the store.\n      const status = optimisticId || relevantObjects.added.sortaMatches.size > 0 || relevantObjects.modified.sortaMatches.size > 0 ? \"loading\" : \"loaded\";\n\n      // while we only push updates for the strict matches, we still need to\n      // trigger the list updating if some of our objects changed\n\n      const newList = [];\n      let needsRevalidation = false;\n      this.store.batch({\n        optimisticId,\n        changes\n      }, batch => {\n        const existingList = new Set(batch.read(this.cacheKey)?.value?.data);\n        const toAdd = new Set(\n        // easy case. objects are new to the cache and they match this filter\n        relevantObjects.added.strictMatches);\n\n        // anything thats been deleted can be removed, so start there\n        const toRemove = new Set(changes.deleted);\n\n        // deal with the modified objects\n        for (const obj of relevantObjects.modified.all) {\n          if (relevantObjects.modified.strictMatches.has(obj)) {\n            const objectCacheKey = this.store.getCacheKey(\"object\", obj.$objectType, obj.$primaryKey);\n            if (!existingList.has(objectCacheKey)) {\n              // object is new to the list\n              toAdd.add(obj);\n            }\n            continue;\n          } else if (batch.optimisticWrite) {\n            // we aren't removing objects in optimistic mode\n            // we also don't want to trigger revalidation in optimistic mode\n            // as it should be triggered when the optimistic job is done\n            continue;\n          } else {\n            // object is no longer a strict match\n            const existingObjectCacheKey = this.store.getCacheKey(\"object\", obj.$objectType, obj.$primaryKey);\n            toRemove.add(existingObjectCacheKey);\n            if (relevantObjects.modified.sortaMatches.has(obj)) {\n              // since it might still be in the list we need to revalidate\n              needsRevalidation = true;\n            }\n          }\n        }\n        for (const key of existingList) {\n          if (toRemove.has(key)) continue;\n          newList.push(key);\n        }\n        for (const obj of toAdd) {\n          newList.push(this.store.getCacheKey(\"object\", obj.$objectType, obj.$primaryKey));\n        }\n        this._updateList(newList, /* append */false, status, batch);\n      });\n      if (needsRevalidation) {\n        return this.revalidate(true);\n      }\n      return undefined;\n    } finally {\n      if (process.env.NODE_ENV !== \"production\") {\n        this.logger?.child({\n          methodName: \"maybeUpdateAndRevalidate\"\n        }).debug(\"in finally\");\n      }\n    }\n  };\n  #matchType(obj) {\n    // if its a strict match we can just insert it into place\n    if (objectMatchesWhereClause(obj, this.#whereClause, true)) {\n      return \"strict\";\n    }\n    // sorta match means it used a filter we cannot use on the frontend\n    if (objectMatchesWhereClause(obj, this.#whereClause, false)) {\n      return \"sorta\";\n    }\n    return false;\n  }\n  _extractRelevantObjects(changes) {\n    // TODO refactor this ternary into subclasses\n    const relevantObjects = this.#type === \"object\" ? this.#extractRelevantObjectsForTypeObject(changes) : this.#extractRelevantObjectsForTypeInterface(changes);\n\n    // categorize\n    for (const group of Object.values(relevantObjects)) {\n      for (const obj of group.all ?? []) {\n        const matchType = this.#matchType(obj);\n        if (matchType) {\n          group[`${matchType}Matches`].add(obj);\n        }\n      }\n    }\n    return relevantObjects;\n  }\n  #extractRelevantObjectsForTypeInterface(changes) {\n    const matchesApiName = ([, object]) => {\n      return this.#apiName in object[ObjectDefRef].interfaceMap;\n    };\n    const added = Array.from(changes.addedObjects).filter(matchesApiName).map(([, object]) => object.$as(this.#apiName));\n    const modified = Array.from(changes.modifiedObjects).filter(matchesApiName).map(([, object]) => object.$as(this.#apiName));\n    return {\n      added: {\n        all: added,\n        strictMatches: new Set(),\n        sortaMatches: new Set()\n      },\n      modified: {\n        all: modified,\n        strictMatches: new Set(),\n        sortaMatches: new Set()\n      }\n    };\n  }\n  #extractRelevantObjectsForTypeObject(changes) {\n    return {\n      added: {\n        all: changes.addedObjects.get(this.cacheKey.otherKeys[API_NAME_IDX]) ?? [],\n        strictMatches: new Set(),\n        sortaMatches: new Set()\n      },\n      modified: {\n        all: changes.modifiedObjects.get(this.cacheKey.otherKeys[API_NAME_IDX]) ?? [],\n        strictMatches: new Set(),\n        sortaMatches: new Set()\n      }\n    };\n  }\n  _sortCacheKeys(objectCacheKeys, batch) {\n    if (Object.keys(this.#orderBy).length > 0) {\n      objectCacheKeys = objectCacheKeys.sort((a, b) => {\n        for (const sortFn of this.#sortFns) {\n          const ret = sortFn(batch.read(a)?.value?.$as(this.#apiName), batch.read(b)?.value?.$as(this.#apiName));\n          if (ret !== 0) {\n            return ret;\n          }\n        }\n        return 0;\n      });\n    }\n    return objectCacheKeys;\n  }\n  registerStreamUpdates(sub) {\n    const logger = process.env.NODE_ENV !== \"production\" ? this.logger?.child({\n      methodName: \"registerStreamUpdates\"\n    }) : this.logger;\n    if (process.env.NODE_ENV !== \"production\") {\n      logger?.child({\n        methodName: \"observeList\"\n      }).info(\"Subscribing from websocket\");\n    }\n\n    // FIXME: We should only do this once. If we already have one we should probably\n    // just reuse it.\n\n    const websocketSubscription = this.#objectSet.subscribe({\n      onChange: this.#onOswChange.bind(this),\n      onError: this.#onOswError.bind(this),\n      onOutOfDate: this.#onOswOutOfDate.bind(this),\n      onSuccessfulSubscription: this.#onOswSuccessfulSubscription.bind(this)\n    });\n    sub.add(() => {\n      if (process.env.NODE_ENV !== \"production\") {\n        logger?.child({\n          methodName: \"observeList\"\n        }).info(\"Unsubscribing from websocket\");\n      }\n      websocketSubscription.unsubscribe();\n    });\n  }\n  #onOswSuccessfulSubscription() {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"onSuccessfulSubscription\"\n      }).debug(\"\");\n    }\n  }\n  #onOswOutOfDate() {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"onOutOfDate\"\n      }).debug(\"\");\n    }\n  }\n  #onOswError(errors) {\n    if (this.logger) {\n      this.logger?.child({\n        methodName: \"onError\"\n      }).error(\"subscription errors\", errors);\n    }\n  }\n  #onOswChange({\n    object: objOrIface,\n    state\n  }) {\n    const logger = process.env.NODE_ENV !== \"production\" ? this.logger?.child({\n      methodName: \"registerStreamUpdates\"\n    }) : this.logger;\n    if (process.env.NODE_ENV !== \"production\") {\n      logger?.child({\n        methodName: \"onChange\"\n      }).debug(`Got an update of type: ${state}`, objOrIface);\n    }\n    if (state === \"ADDED_OR_UPDATED\") {\n      const object = objOrIface.$apiName !== objOrIface.$objectType ? objOrIface.$as(objOrIface.$objectType) : objOrIface;\n      this.store.batch({}, batch => {\n        storeOsdkInstances(this.store, [object], batch);\n      });\n    } else if (state === \"REMOVED\") {\n      this.#onOswRemoved(objOrIface, logger);\n    }\n  }\n  #onOswRemoved(objOrIface, logger) {\n    this.store.batch({}, batch => {\n      // Read the truth layer (since not optimistic)\n      const existing = batch.read(this.cacheKey);\n      !existing ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"the truth value for our list should exist as we already subscribed\") : invariant(false) : void 0;\n      if (existing.status === \"loaded\") {\n        const objectCacheKey = this.store.getCacheKey(\"object\", objOrIface.$objectType, objOrIface.$primaryKey);\n        // remove the object from the list\n        const newObjects = existing.value?.data.filter(o => o !== objectCacheKey);\n\n        // If the filter didn't change anything, then the list was already\n        // updated (or didn't exist, which is nonsensical)\n        if (newObjects?.length !== existing.value?.data.length) {\n          batch.changes.registerList(this.cacheKey);\n          batch.write(this.cacheKey, {\n            data: newObjects ?? []\n          }, \"loaded\");\n          // Should there be an else for this case? Do we need to invalidate\n          // the paging tokens we may have? FIXME\n        }\n        return;\n      }\n      // There may be a tiny race here where OSW tells us the object has\n      // been removed but an outstanding invalidation of this query is\n      // about to return. In this case, its possible that we remove this item\n      // from the list and then the returned list load re-adds it.\n      // To avoid this, we will just force reload the query to be sure\n      // we don't leave things in a bad state.\n      if (process.env.NODE_ENV !== \"production\") {\n        logger?.info(\"Removing an object from an object list that is in the middle of being loaded.\", existing);\n      }\n      this.revalidate(/* force */true).catch(e => {\n        if (logger) {\n          logger?.error(\"Uncaught error while revalidating list\", e);\n        } else {\n          // Make sure we write to the console if there is no logger!\n          // eslint-disable-next-line no-console\n          console.error(\"Uncaught error while revalidating list\", e);\n        }\n      });\n    });\n  }\n}\nfunction removeDuplicates(objectCacheKeys, batch) {\n  const visited = new Set();\n  objectCacheKeys = objectCacheKeys.filter(key => {\n    batch.read(key);\n    if (visited.has(key)) {\n      return false;\n    }\n    visited.add(key);\n    return true;\n  });\n  return objectCacheKeys;\n}\nfunction createOrderBySortFns(orderBy) {\n  return Object.entries(orderBy).map(([key, order]) => {\n    return (a, b) => {\n      const aValue = a?.[key];\n      const bValue = b?.[key];\n      if (aValue == null && bValue == null) {\n        return 0;\n      }\n      if (aValue == null) {\n        return 1;\n      }\n      if (bValue == null) {\n        return -1;\n      }\n      const m = order === \"asc\" ? -1 : 1;\n      return aValue < bValue ? m : aValue > bValue ? -m : 0;\n    };\n  });\n}\n\n// Hopefully this can go away when we can just request the full object properties on first load\nasync function reloadDataAsFullObjects(client, data) {\n  const groups = groupBy(data, x => x.$objectType);\n  const objectTypeToPrimaryKeyToObject = Object.fromEntries(await Promise.all(Object.entries(groups).map(async ([apiName, objects]) => {\n    // to keep InternalSimpleOsdkInstance simple, we make both the `ObjectDefRef` and\n    // the `InterfaceDefRef` optional but we know that the right one is on there\n    // thus we can `!`\n    const objectDef = objects[0][UnderlyingOsdkObject][ObjectDefRef];\n    const where = {\n      [objectDef.primaryKeyApiName]: {\n        $in: objects.map(x => x.$primaryKey)\n      }\n    };\n    const result = await client(objectDef).where(where).fetchPage();\n    return [apiName, Object.fromEntries(result.data.map(x => [x.$primaryKey, x]))];\n  })));\n  data = data.map(obj => {\n    !objectTypeToPrimaryKeyToObject[obj.$objectType][obj.$primaryKey] ? process.env.NODE_ENV !== \"production\" ? invariant(false, `Could not find object ${obj.$objectType} ${obj.$primaryKey}`) : invariant(false) : void 0;\n    return objectTypeToPrimaryKeyToObject[obj.$objectType][obj.$primaryKey];\n  });\n  return data;\n}\nexport function isListCacheKey(cacheKey) {\n  return cacheKey.type === \"list\";\n}\n\n/**\n * Copied from @osdk/api\n */","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Trie } from \"@wry/trie\";\nconst defaultMakeData = () => Object.create(null);\nexport class WeakRefTrie {\n  #finalizer = new FinalizationRegistry(orderBy => {\n    this.#trie.removeArray(Object.entries(orderBy).flat());\n  });\n  #trie;\n  constructor(makeData = defaultMakeData) {\n    this.#trie = new Trie(false, array => {\n      const data = makeData(array);\n      this.#finalizer.register(data, array);\n      return new WeakRef(data);\n    });\n  }\n  lookupArray(array) {\n    const maybe = this.#trie.lookupArray(array);\n    let ret = maybe.deref();\n    if (maybe && !ret) {\n      // in case finalizer hasn't run\n      this.#trie.removeArray(array);\n      ret = this.#trie.lookupArray(array).deref();\n    }\n    return ret;\n  }\n  peekArray(array) {\n    const maybe = this.#trie.peekArray(array);\n    const ret = maybe?.deref();\n    if (maybe && !ret) {\n      // in case finalizer hasn't run\n      this.#trie.removeArray(array);\n    }\n    return ret;\n  }\n  removeArray(array) {\n    return this.#trie.removeArray(array)?.deref();\n  }\n}\nexport class OrderByCanonicalizer {\n  #trie = new WeakRefTrie(array => {\n    const pairs = array.reduce(function (result, _, index, array) {\n      if (index % 2 === 0 && array[index] != null) {\n        result.push(array.slice(index, index + 2));\n      }\n      return result;\n    }, []);\n    let data = Object.fromEntries(pairs);\n    if (process.env.NODE_ENV !== \"production\") {\n      data = Object.freeze(data);\n    }\n    return data;\n  });\n  canonicalize = orderBy => {\n    const strings = Object.entries(orderBy).flat();\n    return this.#trie.lookupArray(strings);\n  };\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEBUG_REFCOUNTS } from \"../DebugFlags.js\";\nexport class RefCounts {\n  refCounts = new Map();\n\n  // keeps our objects around for some extended duration after they are no longer\n  // needed which is good for quick clicks across tabs.\n  gcMap = new Map();\n  constructor(keepAlive, cleanup) {\n    this.keepAlive = keepAlive;\n    this.cleanup = cleanup;\n  }\n  register(key) {\n    if (!this.refCounts.has(key)) {\n      this.gcMap.set(key, Date.now() + this.keepAlive);\n    }\n    return key;\n  }\n  retain(key) {\n    const count = this.refCounts.get(key) ?? 0;\n    this.refCounts.set(key, count + 1);\n    if (this.gcMap.has(key)) {\n      this.gcMap.delete(key);\n    }\n  }\n  release(key) {\n    const count = this.refCounts.get(key);\n    if (count === undefined) {\n      // TODO we should trace here if this happens because it likely means\n      // someone unsubscribed twice and I don't know if we should treat that as\n      // a potential error or not\n      // throw new Error(\"RefCounts.release() - key not found\", key);\n    } else if (count === 1) {\n      this.refCounts.delete(key);\n      this.gcMap.set(key, Date.now() + this.keepAlive);\n    } else {\n      this.refCounts.set(key, count - 1);\n    }\n  }\n  has(key) {\n    return this.refCounts.has(key);\n  }\n  gc() {\n    const now = Date.now();\n    if (DEBUG_REFCOUNTS) {\n      for (const [key, count] of this.refCounts) {\n        // eslint-disable-next-line no-console\n        console.debug(\"RefCounts.gc() - counts: \", JSON.stringify(key), count);\n      }\n    }\n    for (const [key, deathTime] of this.gcMap) {\n      if (DEBUG_REFCOUNTS && deathTime >= now) {\n        // eslint-disable-next-line no-console\n        console.debug(\"RefCounts.gc() - ttl \", JSON.stringify(key), deathTime - now);\n      }\n      if (deathTime < now) {\n        if (DEBUG_REFCOUNTS) {\n          // eslint-disable-next-line no-console\n          console.debug(\"RefCounts.gc() - registering cleaning up\", JSON.stringify(key));\n        }\n        this.gcMap.delete(key);\n        this.cleanup(key);\n      }\n    }\n  }\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Trie } from \"@wry/trie\";\nimport deepEqual from \"fast-deep-equal\";\nimport invariant from \"tiny-invariant\";\nexport class WhereClauseCanonicalizer {\n  /**\n   * This is a shortcut cache for any WhereClause's that we have\n   * seen and already canonicalized. The theory behind this\n   * is that well behaving React applications will either `useMemo`\n   * their where clause, or store it in state or pass it through as\n   * props such that we are likely to get the same WhereClause\n   * object multiple times and we can skip unnecessary work.\n   */\n  #cache = new WeakMap();\n\n  /**\n   * This is a trie that stores the sorted collapsed keys of a where clause to\n   * the cache key for canonicalized options. In theory this keeps the number of\n   * deepEqual comparisons down to a minimum but its probably overkill.\n   */\n  #trie = new Trie();\n\n  /**\n   * This is a cache from the cacheKey provided by `this.#trie` to the potential\n   * canonicalized options.\n   */\n  #existingOptions = new Map();\n  canonicalize(where) {\n    // fastest shortcut\n    if (this.#cache.has(where)) {\n      return this.#cache.get(where);\n    }\n    const keysSet = new Set();\n    const calculatedCanon = this.#toCanon(where, keysSet);\n    const cacheKey = this.#trie.lookupArray(Array.from(keysSet).sort());\n    const lookupEntry = this.#existingOptions.get(cacheKey) ?? {\n      options: []\n    };\n    this.#existingOptions.set(cacheKey, lookupEntry);\n    const canon = lookupEntry.options.find(ref => deepEqual(ref.deref(), calculatedCanon))?.deref() ?? calculatedCanon;\n    if (canon === calculatedCanon) {\n      // This means no existing options were found\n      lookupEntry.options.push(new WeakRef(canon));\n    }\n    this.#cache.set(where, canon);\n    return canon;\n  }\n  #toCanon = (where, set = new Set()) => {\n    if (\"$and\" in where) {\n      if (process.env.NODE_ENV !== \"production\") {\n        !Array.isArray(where.$and) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"expected $and to be an array\") : invariant(false) : void 0;\n        !(Object.keys(where).length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"expected only $and to be present\") : invariant(false) : void 0;\n      }\n      if (where.$and.length === 0) {\n        // empty $and is a no-op\n        return {};\n      }\n      if (where.$and.length === 1) {\n        return this.#toCanon(where.$and[0], set);\n      }\n    }\n    // This is incomplete for all the cases possible but it gets us started\n\n    return Object.fromEntries(Object.entries(where).sort(([a], [b]) => a.localeCompare(b)).map(([k, v]) => {\n      set.add(k);\n      if (k === \"$and\" || k === \"$or\") {\n        return [k, v.map(x => this.#toCanon(x, set))];\n      }\n      if (k !== \"$not\" && typeof v === \"object\" && \"$eq\" in v) {\n        return [k, v[\"$eq\"]];\n      }\n      return [k, v];\n    }));\n  };\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BehaviorSubject } from \"rxjs\";\nimport invariant from \"tiny-invariant\";\nimport { additionalContext } from \"../../Client.js\";\nimport { DEBUG_REFCOUNTS } from \"../DebugFlags.js\";\nimport { ActionApplication } from \"./ActionApplication.js\";\nimport { CacheKeys } from \"./CacheKeys.js\";\nimport { createChangedObjects, DEBUG_ONLY__changesToString } from \"./Changes.js\";\nimport { Entry, Layer } from \"./Layer.js\";\nimport { isListCacheKey, ListQuery } from \"./ListQuery.js\";\nimport { ObjectQuery } from \"./ObjectQuery.js\";\nimport { OrderByCanonicalizer } from \"./OrderByCanonicalizer.js\";\nimport { RefCounts } from \"./RefCounts.js\";\nimport { tombstone } from \"./tombstone.js\";\nimport { WhereClauseCanonicalizer } from \"./WhereClauseCanonicalizer.js\";\n\n/*\n    Work still to do:\n    - [x] testing for optimistic writes\n    - [x] automatic invalidation of actions\n    - [x] automatic optimistic list updates\n    - [x] useOsdkObjects\n    - [x] imply offline for objects passed directly\n    - [x] websocket subscriptions\n    - [ ] links\n    - [x] add pagination\n    - [ ] sub-selection support\n    - [ ] interfaces\n    - [ ] setup defaults\n    - [ ] reduce updates in react\n*/\n\nfunction createInitEntry(cacheKey) {\n  return {\n    cacheKey,\n    status: \"init\",\n    value: undefined,\n    lastUpdated: 0\n  };\n}\n\n/*\n  Notes:\n    - Subjects are one per type per store (by cache key)\n    - Data is one per layer per cache key\n*/\n\nexport class Store {\n  whereCanonicalizer = new WhereClauseCanonicalizer();\n  orderByCanonicalizer = new OrderByCanonicalizer();\n  #truthLayer = new Layer(undefined, undefined);\n  #topLayer;\n\n  /** @internal */\n\n  // we can use a regular Map here because the refCounting will\n  // handle cleanup.\n  #queries = new Map();\n  #cacheKeyToSubject = new WeakMap();\n  #cacheKeys;\n  #refCounts = new RefCounts(DEBUG_REFCOUNTS ? 15_000 : 60_000, k => this.#cleanupCacheKey(k));\n\n  // we are currently only using this for debug logging and should just remove it in the future if that\n  // continues to be true\n  #finalizationRegistry;\n  constructor(client) {\n    this.client = client;\n    this.logger = client[additionalContext].logger?.child({}, {\n      msgPrefix: \"Store\"\n    });\n    this.#topLayer = this.#truthLayer;\n    this.#cacheKeys = new CacheKeys(this.whereCanonicalizer, this.orderByCanonicalizer, k => {\n      if (DEBUG_REFCOUNTS) {\n        const cacheKeyType = k.type;\n        const otherKeys = k.otherKeys;\n        // eslint-disable-next-line no-console\n        console.log(`CacheKeys.onCreate(${cacheKeyType}, ${JSON.stringify(otherKeys)})`);\n        this.#finalizationRegistry.register(k, () => {\n          // eslint-disable-next-line no-console\n          console.log(`CacheKey Finalization(${cacheKeyType}, ${JSON.stringify(otherKeys)})`);\n        });\n      }\n      this.#refCounts.register(k);\n    });\n    setInterval(() => {\n      this.#refCounts.gc();\n    }, 1000);\n    this.#finalizationRegistry = new FinalizationRegistry(cleanupCallback => {\n      try {\n        cleanupCallback();\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(\"Caught an error while running a finalization callback\", e);\n      }\n    });\n  }\n\n  /**\n   * Called after a key is no longer retained and the timeout has elapsed\n   * @param key\n   */\n  #cleanupCacheKey = key => {\n    const subject = this.peekSubject(key);\n    if (DEBUG_REFCOUNTS) {\n      // eslint-disable-next-line no-console\n      console.log(`CacheKey cleaning up (${JSON.stringify({\n        closed: subject?.closed,\n        observed: subject?.observed\n      })})`, JSON.stringify([key.type, ...key.otherKeys], null, 2));\n    }\n    this.#cacheKeys.remove(key);\n    if (process.env.NODE_ENV !== \"production\") {\n      !subject ? process.env.NODE_ENV !== \"production\" ? invariant(false) : invariant(false) : void 0;\n    }\n    if (subject) {\n      subject.complete();\n      this.#cacheKeyToSubject.delete(key);\n    }\n    this.#queries.get(key)?.dispose();\n    this.#queries.delete(key);\n  };\n  applyAction = async (action, args, opts) => {\n    return await new ActionApplication(this).applyAction(action, args, opts);\n  };\n  removeLayer(layerId) {\n    !(layerId != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"undefined is the reserved layerId for the truth layer\") : invariant(false) : void 0;\n    // 1. collect all cache keys for a given layerId\n    let currentLayer = this.#topLayer;\n    const cacheKeys = new Map();\n    while (currentLayer != null && currentLayer.parentLayer != null) {\n      if (currentLayer.layerId === layerId) {\n        for (const [k, v] of currentLayer.entries()) {\n          if (cacheKeys.has(k)) continue;\n          cacheKeys.set(k, v);\n        }\n      }\n      currentLayer = currentLayer.parentLayer;\n    }\n\n    // 2. remove the layers from the chain\n    this.#topLayer = this.#topLayer.removeLayer(layerId);\n\n    // 3. check each cache key to see if it is different in the new chain\n    for (const [k, oldEntry] of cacheKeys) {\n      const currentEntry = this.#topLayer.get(k);\n\n      // 4. if different, update the subject\n      if (oldEntry !== currentEntry) {\n        const x = currentEntry ?? createInitEntry(k);\n        // We are going to be pretty lazy here and just re-emit the value.\n        // In the future it may benefit us to deep equal check her but I think\n        // the subjects are effectively doing this anyway.\n        this.peekSubject(k)?.next({\n          // eslint-disable-next-line @typescript-eslint/no-misused-spread\n          ...(currentEntry ?? createInitEntry(k)),\n          isOptimistic: currentEntry?.value !== this.#truthLayer.get(k)?.value\n        });\n      }\n    }\n  }\n  getCacheKey(type, ...args) {\n    return this.#refCounts.register(this.#cacheKeys.get(type, ...args));\n  }\n  peekSubject = cacheKey => {\n    return this.#cacheKeyToSubject.get(cacheKey);\n  };\n  getSubject = cacheKey => {\n    let subject = this.#cacheKeyToSubject.get(cacheKey);\n    if (!subject) {\n      const initialValue = this.#topLayer.get(cacheKey) ?? createInitEntry(cacheKey);\n      subject = new BehaviorSubject({\n        // eslint-disable-next-line @typescript-eslint/no-misused-spread\n        ...initialValue,\n        isOptimistic: initialValue.value !== this.#truthLayer.get(cacheKey)?.value\n      });\n      this.#cacheKeyToSubject.set(cacheKey, subject);\n    }\n    return subject;\n  };\n  canonicalizeWhereClause(where) {\n    return this.whereCanonicalizer.canonicalize(where);\n  }\n  observeObject(apiName, pk, options, subFn) {\n    if (typeof apiName !== \"string\") {\n      apiName = apiName.apiName;\n    }\n    const query = this.getObjectQuery(apiName, pk);\n    this.retain(query.cacheKey);\n    if (options.mode !== \"offline\") {\n      query.revalidate(options.mode === \"force\").catch(e => {\n        subFn.error(e);\n        // we don't want observeObject() to return a promise,\n        // so we settle for logging an error here instead of\n        // dropping it on the floor.\n        if (this.logger) {\n          this.logger.error(\"Unhandled error in observeObject\", e);\n        } else {\n          throw e;\n        }\n      });\n    }\n    const sub = query.subscribe(subFn);\n    return {\n      unsubscribe: () => {\n        sub.unsubscribe();\n        this.release(query.cacheKey);\n      }\n    };\n  }\n  observeList(options, subFn) {\n    // the ListQuery represents the shared state of the list\n    const query = this.getListQuery(options.type, options.where ?? {}, options.orderBy ?? {}, options);\n    this.retain(query.cacheKey);\n    if (options.mode !== \"offline\") {\n      query.revalidate(options.mode === \"force\").catch(x => {\n        subFn.error(x);\n      });\n    }\n    const sub = query.subscribe(subFn);\n    if (options.streamUpdates) {\n      query.registerStreamUpdates(sub);\n    }\n    return {\n      unsubscribe: () => {\n        sub.unsubscribe();\n        this.release(query.cacheKey);\n      }\n    };\n  }\n  peekQuery(cacheKey) {\n    return this.#queries.get(cacheKey);\n  }\n  #getQuery(cacheKey, createQuery) {\n    let query = this.peekQuery(cacheKey);\n    if (!query) {\n      query = createQuery();\n      this.#queries.set(cacheKey, query);\n    }\n    return query;\n  }\n  getListQuery(def, where, orderBy, opts) {\n    const {\n      apiName,\n      type\n    } = def;\n    const canonWhere = this.whereCanonicalizer.canonicalize(where);\n    const canonOrderBy = this.orderByCanonicalizer.canonicalize(orderBy);\n    const listCacheKey = this.getCacheKey(\"list\", type, apiName, canonWhere, canonOrderBy);\n    return this.#getQuery(listCacheKey, () => {\n      return new ListQuery(this, this.getSubject(listCacheKey), type, apiName, canonWhere, canonOrderBy, listCacheKey, opts);\n    });\n  }\n  getObjectQuery(apiName, pk) {\n    if (typeof apiName !== \"string\") {\n      apiName = apiName.apiName;\n    }\n    const objectCacheKey = this.getCacheKey(\"object\", apiName, pk);\n    return this.#getQuery(objectCacheKey, () => new ObjectQuery(this, this.getSubject(objectCacheKey), apiName, pk, objectCacheKey, {\n      dedupeInterval: 0\n    }));\n  }\n  getValue(cacheKey) {\n    return this.#topLayer.get(cacheKey);\n  }\n  batch = ({\n    optimisticId,\n    changes = createChangedObjects()\n  }, batchFn) => {\n    !(optimisticId === undefined || !!optimisticId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"optimistic must be undefined or not falsy\") : invariant(false) : void 0;\n    let needsLayer = optimisticId !== undefined;\n    const batchContext = {\n      changes,\n      createLayerIfNeeded: () => {\n        if (needsLayer) {\n          this.#topLayer = this.#topLayer.addLayer(optimisticId);\n          needsLayer = false;\n        }\n      },\n      optimisticWrite: !!optimisticId,\n      write: (cacheKey, value, status) => {\n        const oldTopValue = this.#topLayer.get(cacheKey);\n        if (optimisticId) batchContext.createLayerIfNeeded();\n        const writeLayer = optimisticId ? this.#topLayer : this.#truthLayer;\n        const newValue = new Entry(cacheKey, value, Date.now(), status);\n        writeLayer.set(cacheKey, newValue);\n        const newTopValue = this.#topLayer.get(cacheKey);\n        if (oldTopValue !== newTopValue) {\n          this.#cacheKeyToSubject.get(cacheKey)?.next({\n            // eslint-disable-next-line @typescript-eslint/no-misused-spread\n            ...newValue,\n            isOptimistic: newTopValue?.value !== this.#truthLayer.get(cacheKey)?.value\n          });\n        }\n        return newValue;\n      },\n      delete: (cacheKey, status) => {\n        return batchContext.write(cacheKey, tombstone, status);\n      },\n      read: cacheKey => {\n        return optimisticId ? this.#topLayer.get(cacheKey) : this.#truthLayer.get(cacheKey);\n      }\n    };\n    const retVal = batchFn(batchContext);\n    this.maybeRevalidateQueries(changes, optimisticId).catch(e => {\n      // we don't want batch() to return a promise,\n      // so we settle for logging an error here instead of\n      // dropping it on the floor.\n      if (this.logger) {\n        this.logger.error(\"Unhandled error in batch\", e);\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(\"Unhandled error in batch\", e);\n        throw e;\n      }\n    });\n    return {\n      batchResult: batchContext,\n      retVal: retVal,\n      changes: batchContext.changes\n    };\n  };\n  invalidateObject(apiName, pk) {\n    if (typeof apiName !== \"string\") {\n      apiName = apiName.apiName;\n    }\n    return this.getObjectQuery(apiName, pk).revalidate(/* force */true);\n  }\n  async maybeRevalidateQueries(changes, optimisticId) {\n    if (changes.isEmpty()) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // todo\n        this.logger?.child({\n          methodName: \"maybeRevalidateQueries\"\n        }).debug(\"No changes, aborting\");\n      }\n      return;\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      // todo\n      this.logger?.child({\n        methodName: \"maybeRevalidateQueries\"\n      }).debug(DEBUG_ONLY__changesToString(changes), {\n        optimisticId\n      });\n    }\n    try {\n      const promises = [];\n      for (const cacheKey of this.#queries.keys()) {\n        const promise = this.peekQuery(cacheKey)?.maybeUpdateAndRevalidate?.(changes, optimisticId);\n        if (promise) promises.push(promise);\n      }\n      await Promise.all(promises);\n    } finally {\n      if (process.env.NODE_ENV !== \"production\") {\n        // todo\n        this.logger?.child({\n          methodName: \"maybeRevalidateQueries\"\n        }).debug(\"in finally\", DEBUG_ONLY__changesToString(changes));\n      }\n    }\n  }\n\n  /**\n   * @param apiName\n   * @param changes The changes we know about / to update\n   * @returns\n   */\n  invalidateObjectType(apiName, changes) {\n    if (typeof apiName !== \"string\") {\n      apiName = apiName.apiName;\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      this.logger?.child({\n        methodName: \"invalidateObjectType\"\n      }).info(changes ? DEBUG_ONLY__changesToString(changes) : void 0);\n    }\n    const promises = [];\n    for (const cacheKey of this.#truthLayer.keys()) {\n      if (isListCacheKey(cacheKey)) {\n        if (!changes || !changes.modified.has(cacheKey)) {\n          const promise = this.peekQuery(cacheKey)?.revalidate(true);\n          if (promise) {\n            promises.push(promise);\n            changes?.modified.add(cacheKey);\n          }\n        }\n      }\n    }\n    return Promise.all(promises).then(() => void 0);\n  }\n  retain(cacheKey) {\n    this.#refCounts.retain(cacheKey);\n  }\n  release(cacheKey) {\n    this.#refCounts.release(cacheKey);\n  }\n}\nexport async function invalidateList(store, args) {\n  const where = store.whereCanonicalizer.canonicalize(args.where ?? {});\n  const orderBy = store.orderByCanonicalizer.canonicalize(args.orderBy ?? {});\n  const cacheKey = store.getCacheKey(\"list\", args.type.type, args.type.apiName, where, orderBy);\n  await store.peekQuery(cacheKey)?.revalidate(true);\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createFetchHeaderMutator } from \"@osdk/shared.net.fetch\";\nimport { additionalContext } from \"../Client.js\";\nimport { createClientFromContext } from \"../createClient.js\";\nimport { OBSERVABLE_USER_AGENT } from \"../util/UserAgent.js\";\nimport { ObservableClientImpl } from \"./internal/ObservableClientImpl.js\";\nimport { Store } from \"./internal/Store.js\";\nexport let ObservableClient;\nexport function createObservableClient(client) {\n  // First we need a modified client that adds an extra header so we know its\n  // an observable client\n  const tweakedClient = createClientFromContext({\n    ...client[additionalContext],\n    fetch: createFetchHeaderMutator(client[additionalContext].fetch, headers => {\n      headers.set(\"Fetch-User-Agent\", [headers.get(\"Fetch-User-Agent\"), OBSERVABLE_USER_AGENT].filter(x => x && x?.length > 0).join(\" \"));\n      return headers;\n    })\n  });\n\n  // Then we use that client instead. Because the `client` does not hold\n  // any real state, this whole thing works.\n  return new ObservableClientImpl(new Store(tweakedClient));\n}","/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function getMetaTagContent(name) {\n  const element = document.querySelector(`meta[name=\"${name}\"]`);\n  const val = element ? element.getAttribute(\"content\") : null;\n  if (val == null) {\n    throw new Error(`Missing meta tag: ${name}`);\n  }\n  return val;\n}\nfunction getViteEnvVar(name) {\n  const val = import.meta.env[name];\n  if (val == null) {\n    throw new Error(`Missing environment variable: ${name}`);\n  }\n  return val;\n}\nfunction isProduction() {\n  return process.env.NODE_ENV === \"production\";\n}\nfunction getConfigValue(metaTagName, viteEnvVarName) {\n  return isProduction() ? getMetaTagContent(metaTagName) : getViteEnvVar(viteEnvVarName);\n}\nfunction getOntologyRid(ontologyRid) {\n  return isProduction() ? getMetaTagContent(\"osdk-ontologyRid\") : ontologyRid;\n}\nexport function getOsdkConfig(ontologyRid) {\n  return {\n    clientId: getConfigValue(\"osdk-clientId\", \"VITE_FOUNDRY_CLIENT_ID\"),\n    redirectUrl: getConfigValue(\"osdk-redirectUrl\", \"VITE_FOUNDRY_REDIRECT_URL\"),\n    foundryUrl: getConfigValue(\"osdk-foundryUrl\", \"VITE_FOUNDRY_API_URL\"),\n    ontologyRid: getOntologyRid(ontologyRid)\n  };\n}"]}