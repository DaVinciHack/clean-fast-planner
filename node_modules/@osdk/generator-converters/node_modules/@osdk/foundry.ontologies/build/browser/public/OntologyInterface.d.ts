import type * as _Core from "@osdk/foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
import type * as _Ontologies from "../_components.js";
/**
 * :::callout{theme=warning title=Warning}
 * This endpoint is in preview and may be modified or removed at any time.
 * To use this endpoint, add `preview=true` to the request query parameters.
 * :::
 *
 * Lists the interface types for the given Ontology.
 *
 * Each page may be smaller than the requested page size. However, it is guaranteed that if there are more
 * results available, at least one result will be present in the response.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @beta
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/interfaceTypes
 */
export declare function list($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    $queryParams?: {
        pageSize?: _Core.PageSize | undefined;
        pageToken?: _Core.PageToken | undefined;
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Ontologies.ListInterfaceTypesResponse>;
/**
 * :::callout{theme=warning title=Warning}
 * This endpoint is in preview and may be modified or removed at any time.
 * To use this endpoint, add `preview=true` to the request query parameters.
 * :::
 *
 * Gets a specific interface type with the given API name.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @beta
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/interfaceTypes/{interfaceType}
 */
export declare function get($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    interfaceType: _Ontologies.InterfaceTypeApiName,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Ontologies.InterfaceType>;
/**
 * :::callout{theme=warning title=Warning}
 * This endpoint will be removed once TS OSDK is updated to use `objectSets/loadObjects` with interface object
 * sets.
 * :::
 * :::callout{theme=warning title=Warning}
 * This endpoint is in preview and may be modified or removed at any time.
 * To use this endpoint, add `preview=true` to the request query parameters.
 * :::
 *
 * Search for objects in the specified ontology and interface type. Any properties specified in the "where" or
 * "orderBy" parameters must be shared property type API names defined on the interface. The following search
 * queries are supported:
 *
 * | Query type                              | Description                                                                                                       | Supported Types                 |
 * |-----------------------------------------|-------------------------------------------------------------------------------------------------------------------|---------------------------------|
 * | lt                                      | The provided property is less than the provided value.                                                            | number, string, date, timestamp |
 * | gt                                      | The provided property is greater than the provided value.                                                         | number, string, date, timestamp |
 * | lte                                     | The provided property is less than or equal to the provided value.                                                | number, string, date, timestamp |
 * | gte                                     | The provided property is greater than or equal to the provided value.                                             | number, string, date, timestamp |
 * | eq                                      | The provided property is exactly equal to the provided value.                                                     | number, string, date, timestamp |
 * | isNull                                  | The provided property is (or is not) null.                                                                        | all                             |
 * | contains                                | The provided property contains the provided value.                                                                | array                           |
 * | not                                     | The sub-query does not match.                                                                                     | N/A (applied on a query)        |
 * | and                                     | All the sub-queries match.                                                                                        | N/A (applied on queries)        |
 * | or                                      | At least one of the sub-queries match.                                                                            | N/A (applied on queries)        |
 * | startsWith                              | The provided property starts with the provided term.                                                              | string                          |
 * | containsAllTermsInOrderPrefixLastTerm   | The provided property contains all the terms provided in order. The last term can be a partial prefix match.      | string                          |
 * | containsAllTermsInOrder                 | The provided property contains the provided terms as a substring.                                                 | string                          |
 * | containsAnyTerm                         | The provided property contains at least one of the terms separated by whitespace.                                 | string                          |
 * | containsAllTerms                        | The provided property contains all the terms separated by whitespace.                                             | string                          |
 *
 * Queries can be at most three levels deep. By default, terms are separated by whitespace or punctuation (`?!,:;-[](){}'"~`). Periods (`.`) on their own are ignored.
 * Partial terms are not matched by terms filters except where explicitly noted.
 *
 * Attempting to use an unsupported query will result in a validation error. Third-party applications using this
 * endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @alpha
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/interfaces/{interfaceType}/search
 */
export declare function search($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    interfaceType: _Ontologies.InterfaceTypeApiName,
    $body: _Ontologies.SearchObjectsForInterfaceRequest,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Ontologies.SearchObjectsResponseV2>;
/**
 * :::callout{theme=warning title=Warning}
 * This endpoint will be removed once TS OSDK is updated to use `objectSets/aggregate` with interface object
 * sets.
 * :::
 * :::callout{theme=warning title=Warning}
 * This endpoint is in preview and may be modified or removed at any time.
 * To use this endpoint, add `preview=true` to the request query parameters.
 * :::
 *
 * Perform functions on object fields in the specified ontology and of the specified interface type. Any
 * properties specified in the query must be shared property type API names defined on the interface.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @alpha
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/interfaces/{interfaceType}/aggregate
 */
export declare function aggregate($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Ontologies.OntologyIdentifier,
    interfaceType: _Ontologies.InterfaceTypeApiName,
    $body: _Ontologies.AggregateObjectsRequestV2,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Ontologies.AggregateObjectsResponseV2>;
//# sourceMappingURL=OntologyInterface.d.ts.map