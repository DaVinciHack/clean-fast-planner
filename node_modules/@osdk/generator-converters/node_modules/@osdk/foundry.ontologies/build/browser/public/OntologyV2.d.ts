import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
import type * as _Ontologies from "../_components.js";
/**
 * Lists the Ontologies visible to the current user.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies
 */
export declare function list($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: []): Promise<_Ontologies.ListOntologiesV2Response>;
/**
 * Gets a specific ontology with the given Ontology RID.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}
 */
export declare function get($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [ontology: _Ontologies.OntologyIdentifier]): Promise<_Ontologies.OntologyV2>;
/**
 * Get the full Ontology metadata. This includes the objects, links, actions, queries, and interfaces.
 *
 * @beta
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/fullMetadata
 */
export declare function getFullMetadata($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [ontology: _Ontologies.OntologyIdentifier]): Promise<_Ontologies.OntologyFullMetadata>;
//# sourceMappingURL=OntologyV2.d.ts.map