{"version":3,"sources":["../../src/createSharedClientContext.ts"],"names":["createFetchHeaderMutator","createRetryingFetch","createFetchOrThrow","PalantirApiError"],"mappings":";;;;;;AAqBO,SAAS,yBAA0B,CAAA,OAAA,EAAS,aAAe,EAAA,SAAA,EAAW,UAAU,KAAO,EAAA;AAC5F,EAAI,IAAA,OAAA,CAAQ,WAAW,CAAG,EAAA;AACxB,IAAM,MAAA,IAAI,MAAM,yBAAyB,CAAA;AAAA;AAE3C,EAAM,MAAA,4BAAA,GAA+BA,0CAAyBC,oCAAoB,CAAAC,mCAAA,CAAmB,OAAO,CAAC,CAAA,EAAG,OAAM,OAAW,KAAA;AAC/H,IAAM,MAAA,KAAA,GAAQ,MAAM,aAAc,EAAA;AAClC,IAAA,OAAA,CAAQ,GAAI,CAAA,eAAA,EAAiB,CAAU,OAAA,EAAA,KAAK,CAAE,CAAA,CAAA;AAC9C,IAAA,OAAA,CAAQ,IAAI,kBAAoB,EAAA,CAAC,QAAQ,GAAI,CAAA,kBAAkB,GAAG,SAAS,CAAA,CAAE,MAAO,CAAA,CAAA,CAAA,KAAK,KAAK,CAAG,EAAA,MAAA,GAAS,CAAC,CAAE,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA;AACtH,IAAO,OAAA,OAAA;AAAA,GACR,CAAA;AAGD,EAAM,MAAA,YAAA,GAAe,OAAO,KAAA,EAAO,IAAS,KAAA;AAC1C,IAAI,IAAA;AACF,MAAO,OAAA,MAAM,4BAA6B,CAAA,KAAA,EAAO,IAAI,CAAA;AAAA,aAC9C,CAAG,EAAA;AACV,MAAM,MAAA,WAAA,GAAc,aAAaC,kCAAmB,GAAA,IAAIA,mCAAiB,CAAE,CAAA,OAAA,EAAS,CAAE,CAAA,SAAA,EAAW,CAAE,CAAA,SAAA,EAAW,EAAE,UAAY,EAAA,CAAA,CAAE,eAAiB,EAAA,CAAA,CAAE,UAAU,CAAA,GAAI,IAAI,KAAM,CAAA,kCAAA,IAAsC,CAAE,CAAA,OAAA,IAAW,CAAE,CAAA,CAAA;AAC9N,MAAA,WAAA,CAAY,KAAQ,GAAA,CAAA;AACpB,MAAM,MAAA,WAAA;AAAA;AACR,GACF;AACA,EAAO,OAAA;AAAA,IACL,OAAA;AAAA,IACA,KAAO,EAAA,YAAA;AAAA,IACP;AAAA,GACF;AACF","file":"index.cjs","sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PalantirApiError } from \"@osdk/shared.net.errors\";\nimport { createFetchHeaderMutator, createFetchOrThrow, createRetryingFetch } from \"@osdk/shared.net.fetch\";\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\n\nexport function createSharedClientContext(baseUrl, tokenProvider, userAgent, fetchFn = fetch) {\n  if (baseUrl.length === 0) {\n    throw new Error(\"baseUrl cannot be empty\");\n  }\n  const retryingFetchWithAuthOrThrow = createFetchHeaderMutator(createRetryingFetch(createFetchOrThrow(fetchFn)), async headers => {\n    const token = await tokenProvider();\n    headers.set(\"Authorization\", `Bearer ${token}`);\n    headers.set(\"Fetch-User-Agent\", [headers.get(\"Fetch-User-Agent\"), userAgent].filter(x => x && x?.length > 0).join(\" \"));\n    return headers;\n  });\n\n  // because this is async await it preserves stack traces, which the retrying fetch does not\n  const fetchWrapper = async (input, init) => {\n    try {\n      return await retryingFetchWithAuthOrThrow(input, init);\n    } catch (e) {\n      const betterError = e instanceof PalantirApiError ? new PalantirApiError(e.message, e.errorName, e.errorCode, e.statusCode, e.errorInstanceId, e.parameters) : new Error(\"Captured stack trace for error: \" + (e.message ?? e));\n      betterError.cause = e;\n      throw betterError;\n    }\n  };\n  return {\n    baseUrl,\n    fetch: fetchWrapper,\n    tokenProvider\n  };\n}"]}