{"version":3,"file":"createPublicOauthClient.js","names":["delay","authorizationCodeGrantRequest","calculatePKCECodeChallenge","customFetch","generateRandomCodeVerifier","generateRandomState","processAuthorizationCodeOAuth2Response","refreshTokenGrantRequest","validateAuthResponse","common","createAuthorizationServer","readLocal","readSession","removeLocal","removeSession","saveLocal","saveSession","throwIfError","processOptionsAndAssignDefaults","createPublicOauthClient","client_id","url","redirect_uri","useHistory","loginPage","postLoginPage","scopes","fetchFn","ctxPath","refreshTokenMarker","joinedScopes","client","token_endpoint_auth_method","authServer","oauthHttpOptions","makeTokenAndSaveRefresh","getToken","_signIn","maybeRefresh","maybeHandleAuthReturn","initiateLoginRedirect","bind","globalThis","go","x","window","history","replaceState","location","assign","Error","expectRefreshToken","refresh_token","lastRefreshTokenMarker","requestedScopes","initialRequestedScopes","areScopesEqual","result","pathname","URL","oldUrl","e","process","env","NODE_ENV","console","warn","state","codeVerifier","ret","href","toString","authorization_endpoint","URLSearchParams","response_type","code_challenge","code_challenge_method","scope"],"sources":["createPublicOauthClient.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport delay from \"delay\";\nimport type { Client, HttpRequestOptions } from \"oauth4webapi\";\nimport {\n  authorizationCodeGrantRequest,\n  calculatePKCECodeChallenge,\n  customFetch,\n  generateRandomCodeVerifier,\n  generateRandomState,\n  processAuthorizationCodeOAuth2Response,\n  refreshTokenGrantRequest,\n  validateAuthResponse,\n} from \"oauth4webapi\";\nimport {\n  common,\n  createAuthorizationServer,\n  readLocal,\n  readSession,\n  removeLocal,\n  removeSession,\n  saveLocal,\n  saveSession,\n} from \"./common.js\";\nimport type { PublicOauthClient } from \"./PublicOauthClient.js\";\nimport { throwIfError } from \"./throwIfError.js\";\nimport type { Token } from \"./Token.js\";\nimport { processOptionsAndAssignDefaults } from \"./utils.js\";\n\ndeclare const process: {\n  env: {\n    NODE_ENV: \"production\" | \"development\";\n    TARGET: \"browser\" | \"node\";\n  };\n};\n\nexport interface PublicOauthClientOptions {\n  /**\n   * If true, uses `history.replaceState()`, otherwise uses `window.location.assign()` (defaults to true)\n   */\n  useHistory?: boolean;\n\n  /**\n   * Custom landing page URL prior to logging in\n   */\n  loginPage?: string;\n\n  /**\n   * URL to return to after completed authentication cycle (defaults to `window.location.toString()`)\n   */\n  postLoginPage?: string;\n\n  /**\n   * * @param {string[]} [scopes=[]] - OAuth scopes to request. If not provided, defaults to `[\"api:read-data\", \"api:write-data\"]`\n   */\n  scopes?: string[];\n\n  /**\n   * Custom fetch function to use for requests (defaults to `globalThis.fetch`)\n   */\n  fetchFn?: typeof globalThis.fetch;\n\n  /**\n   * Context path for the authorization server (defaults to \"multipass\")\n   */\n  ctxPath?: string;\n\n  /**\n   * Allows for an additional value to be appended to the local storage key for the refresh token.\n   */\n  refreshTokenMarker?: string;\n}\n\n/**\n * Creates a PublicOauthClient for authentication.\n *\n * @param {string} clientId - The client_id from the OAuth configuration on the server\n * @param {string} url - The base URL of your Foundry server\n * @param {string} redirectUrl - The URL configured for redirect in the OAuth configuration on the server\n * @param {PublicOauthClientOptions} options - Additional options for the client\n * @returns {PublicOauthClient} A client that can be used as a token provider\n */\nexport function createPublicOauthClient(\n  clientId: string,\n  url: string,\n  redirectUrl: string,\n  options?: PublicOauthClientOptions,\n): PublicOauthClient;\n\n/**\n * Creates a PublicOauthClient for authentication.\n *\n * @param {string} clientId - The client_id from the OAuth configuration on the server\n * @param {string} url - The base URL of your Foundry server\n * @param {string} redirectUrl - The URL configured for redirect in the OAuth configuration on the server\n * @param {boolean} useHistory - If true, uses `history.replaceState()`, otherwise uses `window.location.assign()` (defaults to true)\n * @param {string} loginPage - Custom landing page URL prior to logging in\n * @param {string} postLoginPage - URL to return to after completed authentication cycle (defaults to `window.location.toString()`)\n * @param {string[]} scopes - OAuth scopes to request. If not provided, defaults to `[\"api:read-data\", \"api:write-data\"]`\n * @param {typeof globalThis.fetch} fetchFn - Custom fetch function to use for requests (defaults to `globalThis.fetch`)\n * @param {string} ctxPath - Context path for the authorization server (defaults to \"multipass\")\n * @returns {PublicOauthClient} A client that can be used as a token provider\n */\nexport function createPublicOauthClient(\n  client_id: string,\n  url: string,\n  redirectUrl: string,\n  useHistory?: boolean,\n  loginPage?: string,\n  postLoginPage?: string,\n  scopes?: string[],\n  fetchFn?: typeof globalThis.fetch,\n  ctxPath?: string,\n): PublicOauthClient;\nexport function createPublicOauthClient(\n  client_id: string,\n  url: string,\n  redirect_uri: string,\n  useHistory?: boolean | PublicOauthClientOptions,\n  loginPage?: string,\n  postLoginPage?: string,\n  scopes?: string[],\n  fetchFn?: typeof globalThis.fetch,\n  ctxPath?: string,\n): PublicOauthClient {\n  let refreshTokenMarker: string | undefined;\n  let joinedScopes: string;\n  ({\n    useHistory,\n    loginPage,\n    postLoginPage,\n    joinedScopes,\n    fetchFn,\n    ctxPath,\n    refreshTokenMarker,\n  } = processOptionsAndAssignDefaults(\n    url,\n    redirect_uri,\n    useHistory,\n    loginPage,\n    postLoginPage,\n    scopes,\n    fetchFn,\n    ctxPath,\n  ));\n\n  const client: Client = {\n    client_id,\n    token_endpoint_auth_method: \"none\",\n  };\n  const authServer = createAuthorizationServer(ctxPath, url);\n  const oauthHttpOptions: HttpRequestOptions = { [customFetch]: fetchFn };\n\n  const { makeTokenAndSaveRefresh, getToken } = common(\n    client,\n    authServer,\n    _signIn,\n    oauthHttpOptions,\n    maybeRefresh.bind(globalThis, true),\n    refreshTokenMarker,\n    joinedScopes,\n  );\n\n  // as an arrow function, `useHistory` is known to be a boolean\n  const go = async (x: string) => {\n    if (useHistory) {\n      window.history.replaceState({}, \"\", x);\n      return;\n    } else window.location.assign(x);\n\n    await delay(1000);\n    throw new Error(\"Unable to redirect\");\n  };\n\n  async function maybeRefresh(\n    expectRefreshToken?: boolean,\n  ): Promise<Token | undefined> {\n    const {\n      refresh_token,\n      refreshTokenMarker: lastRefreshTokenMarker,\n      requestedScopes: initialRequestedScopes,\n    } = readLocal(client);\n\n    const areScopesEqual = initialRequestedScopes != null\n      && joinedScopes === initialRequestedScopes;\n\n    if (\n      !refresh_token || lastRefreshTokenMarker !== refreshTokenMarker\n      || !areScopesEqual\n    ) {\n      if (expectRefreshToken) throw new Error(\"No refresh token found\");\n      return;\n    }\n\n    try {\n      // note, we don't use processRefreshTokenResponse because the mp oauth implementation\n      // doesn't do refresh tokens quite right and this lets us skip the id check\n      const result = makeTokenAndSaveRefresh(\n        throwIfError(\n          await processAuthorizationCodeOAuth2Response(\n            authServer,\n            client,\n            await refreshTokenGrantRequest(\n              authServer,\n              client,\n              refresh_token,\n              oauthHttpOptions,\n            ),\n          ),\n        ),\n        \"refresh\",\n      );\n\n      if (\n        result && window.location.pathname === new URL(redirect_uri).pathname\n      ) {\n        const { oldUrl } = readSession(client);\n        // don't block on the redirect\n        void go(oldUrl ?? \"/\");\n      }\n      return result;\n    } catch (e) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"Failed to get OAuth2 refresh token. Removing refresh token\",\n          e,\n        );\n      }\n      removeLocal(client);\n      if (expectRefreshToken) {\n        throw new Error(\"Could not refresh token\");\n      }\n    }\n  }\n\n  async function maybeHandleAuthReturn() {\n    const { state, oldUrl, codeVerifier } = readSession(client);\n    if (!codeVerifier) return;\n\n    try {\n      const ret = makeTokenAndSaveRefresh(\n        throwIfError(\n          await processAuthorizationCodeOAuth2Response(\n            authServer,\n            client,\n            await authorizationCodeGrantRequest(\n              authServer,\n              client,\n              throwIfError(\n                validateAuthResponse(\n                  authServer,\n                  client,\n                  new URL(window.location.href),\n                  state,\n                ),\n              ),\n              redirect_uri,\n              codeVerifier,\n              oauthHttpOptions,\n            ),\n          ),\n        ),\n        \"signIn\",\n      );\n\n      void go(oldUrl);\n      return ret;\n    } catch (e) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"Failed to get OAuth2 token using PKCE, removing PKCE and starting a new auth flow\",\n          e,\n        );\n      }\n      removeLocal(client);\n      removeSession(client);\n      throw e;\n    }\n  }\n\n  // As an arrow function, `scopes` and `postLoginPage` are known at compile time\n  const initiateLoginRedirect = async (): Promise<void> => {\n    if (\n      loginPage\n      && window.location.href !== loginPage\n      && window.location.pathname !== loginPage\n    ) {\n      saveLocal(client, {});\n      saveSession(client, { oldUrl: postLoginPage });\n      await go(loginPage);\n      return;\n    }\n\n    const state = generateRandomState()!;\n    const codeVerifier = generateRandomCodeVerifier();\n    const oldUrl = readSession(client).oldUrl ?? window.location.toString();\n    saveLocal(client, {});\n    saveSession(client, { codeVerifier, state, oldUrl });\n\n    window.location.assign(`${authServer\n      .authorization_endpoint!}?${new URLSearchParams({\n      client_id,\n      response_type: \"code\",\n      state,\n      redirect_uri,\n      code_challenge: await calculatePKCECodeChallenge(codeVerifier),\n      code_challenge_method: \"S256\",\n      scope: `offline_access ${joinedScopes}`,\n    })}`);\n\n    // Give time for redirect to happen\n    await delay(1000);\n    throw new Error(\"Unable to redirect\");\n  };\n\n  /** Will throw if there is no token! */\n  async function _signIn() {\n    // 1. Check if we have a refresh token in local storage\n    return await maybeRefresh()\n      // 2. If there is no refresh token we are likely trying to perform the callback\n      ?? await maybeHandleAuthReturn()\n      // 3. If we haven't been able to load the token from one of the two above ways, we need to make the initial auth request\n      ?? await initiateLoginRedirect() as unknown as Token;\n  }\n\n  return getToken;\n}\n"],"mappings":"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","ignoreList":[]}