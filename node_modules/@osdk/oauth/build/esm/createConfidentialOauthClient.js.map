{"version":3,"file":"createConfidentialOauthClient.js","names":["clientCredentialsGrantRequest","customFetch","processClientCredentialsResponse","common","createAuthorizationServer","throwIfError","createConfidentialOauthClient","client_id","client_secret","url","scopes","fetchFn","globalThis","fetch","ctxPath","client","authServer","oauthHttpOptions","joinedScopes","join","getToken","makeTokenAndSaveRefresh","URLSearchParams","scope","undefined"],"sources":["createConfidentialOauthClient.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Client, HttpRequestOptions } from \"oauth4webapi\";\nimport {\n  clientCredentialsGrantRequest,\n  customFetch,\n  processClientCredentialsResponse,\n} from \"oauth4webapi\";\nimport { common, createAuthorizationServer } from \"./common.js\";\nimport type { ConfidentialOauthClient } from \"./ConfidentialOauthClient.js\";\nimport { throwIfError } from \"./throwIfError.js\";\n\n/**\n * @param client_id\n * @param client_secret\n * @param url the base url of your foundry server\n * @param scopes\n * @param fetchFn\n * @param ctxPath\n * @returns which can be used as a token provider\n */\nexport function createConfidentialOauthClient(\n  client_id: string,\n  client_secret: string,\n  url: string,\n  scopes: string[] = [\n    \"api:read-data\",\n    \"api:write-data\",\n    \"api:use-ontologies-read\",\n    \"api:use-ontologies-write\",\n  ],\n  fetchFn: typeof globalThis.fetch = globalThis.fetch,\n  ctxPath: string = \"multipass\",\n): ConfidentialOauthClient {\n  const client: Client = { client_id, client_secret };\n  const authServer = createAuthorizationServer(ctxPath, url);\n  const oauthHttpOptions: HttpRequestOptions = { [customFetch]: fetchFn };\n  const joinedScopes = scopes.join(\" \");\n\n  const { getToken, makeTokenAndSaveRefresh } = common(\n    client,\n    authServer,\n    _signIn,\n    oauthHttpOptions,\n    undefined,\n    undefined,\n    joinedScopes,\n  );\n\n  async function _signIn() {\n    return makeTokenAndSaveRefresh(\n      throwIfError(\n        await processClientCredentialsResponse(\n          authServer,\n          client,\n          await clientCredentialsGrantRequest(\n            authServer,\n            client,\n            new URLSearchParams({ scope: joinedScopes }),\n            oauthHttpOptions,\n          ),\n        ),\n      ),\n      \"signIn\",\n    );\n  }\n\n  return getToken;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SACEA,6BAA6B,EAC7BC,WAAW,EACXC,gCAAgC,QAC3B,cAAc;AACrB,SAASC,MAAM,EAAEC,yBAAyB,QAAQ,aAAa;AAE/D,SAASC,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,6BAA6BA,CAC3CC,SAAiB,EACjBC,aAAqB,EACrBC,GAAW,EACXC,MAAgB,GAAG,CACjB,eAAe,EACf,gBAAgB,EAChB,yBAAyB,EACzB,0BAA0B,CAC3B,EACDC,OAAgC,GAAGC,UAAU,CAACC,KAAK,EACnDC,OAAe,GAAG,WAAW,EACJ;EACzB,MAAMC,MAAc,GAAG;IAAER,SAAS;IAAEC;EAAc,CAAC;EACnD,MAAMQ,UAAU,GAAGZ,yBAAyB,CAACU,OAAO,EAAEL,GAAG,CAAC;EAC1D,MAAMQ,gBAAoC,GAAG;IAAE,CAAChB,WAAW,GAAGU;EAAQ,CAAC;EACvE,MAAMO,YAAY,GAAGR,MAAM,CAACS,IAAI,CAAC,GAAG,CAAC;EAErC,MAAM;IAAEC,QAAQ;IAAEC;EAAwB,CAAC,GAAGlB,MAAM,CAClDY,MAAM,EACNC,UAAU,EAQZ,kBAAyB;IACvB,OAAOK,uBAAuB,CAC5BhB,YAAY,CACV,MAAMH,gCAAgC,CACpCc,UAAU,EACVD,MAAM,EACN,MAAMf,6BAA6B,CACjCgB,UAAU,EACVD,MAAM,EACN,IAAIO,eAAe,CAAC;MAAEC,KAAK,EAAEL;IAAa,CAAC,CAAC,EAC5CD,gBACF,CACF,CACF,CAAC,EACD,QACF,CAAC;EACH,CAAC,EAtBCA,gBAAgB,EAChBO,SAAS,EACTA,SAAS,EACTN,YACF,CAAC;EAoBD,OAAOE,QAAQ;AACjB","ignoreList":[]}