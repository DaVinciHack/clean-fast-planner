{"version":3,"file":"createPublicOauthClient.test.js","names":["createPublicOauthClient","oauthModule","describe","expect","it","vi","utilsModule","originalCreatePublicOauthClient","FOUNDRY_CLIENT_ID","FOUNDRY_URL","REDIRECT_URI","stubGlobal","location","toString","fn","mockReturnValue","mockProcessOptionsAndAssignDefaults","spyOn","mockImplementation","args","processOptionsAndAssignDefaults","_client_id","rest","authClient","undefined","fetch","toBeDefined","toHaveBeenCalledTimes","authClientWithOptions","useHistory","fetchFn","result1","result2","mock","results","value","toEqual"],"sources":["createPublicOauthClient.test.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createPublicOauthClient } from \"@osdk/oauth\";\nimport * as oauthModule from \"@osdk/oauth\";\nimport { describe, expect, it, vi } from \"vitest\";\nimport * as utilsModule from \"../utils.js\";\n\nconst originalCreatePublicOauthClient = oauthModule.createPublicOauthClient;\n\nconst FOUNDRY_CLIENT_ID = \"example-foundry-client-id\";\nconst FOUNDRY_URL = \"http://example-foundry-url.com\";\nconst REDIRECT_URI = \"http://localhost:8080/auth/callback\";\n\nvi.stubGlobal(\"window\", {\n  location: {\n    toString: vi.fn().mockReturnValue(\"http://example.com\"),\n  },\n});\n\ntype CreatePublicOauthClientParams = Parameters<typeof createPublicOauthClient>;\n\ntype ProcessedPublicOauthClientOptionsParams = Parameters<\n  typeof utilsModule.processOptionsAndAssignDefaults\n>;\n\ntype ProcessedPublicOauthClientOptionsReturn = ReturnType<\n  typeof utilsModule.processOptionsAndAssignDefaults\n>;\n\ndescribe(\"createPublicOauthClient\", () => {\n  it(\"should return the same processed options for both client creation methods\", async () => {\n    const mockProcessOptionsAndAssignDefaults = vi.fn<\n      (\n        ...args: ProcessedPublicOauthClientOptionsParams\n      ) => ProcessedPublicOauthClientOptionsReturn\n    >();\n\n    // Mock processOptionsAndAssignDefaults to call the mock function\n    vi.spyOn(utilsModule, \"processOptionsAndAssignDefaults\").mockImplementation(\n      (\n        ...args: ProcessedPublicOauthClientOptionsParams\n      ) => {\n        mockProcessOptionsAndAssignDefaults(...args);\n        return utilsModule.processOptionsAndAssignDefaults(...args);\n      },\n    );\n\n    // Mock createPublicOauthClient to call both the mock and the original function\n    vi.spyOn(oauthModule, \"createPublicOauthClient\").mockImplementation(\n      (\n        ...args: CreatePublicOauthClientParams\n      ) => {\n        const [_client_id, ...rest] = args;\n        mockProcessOptionsAndAssignDefaults(...rest);\n        return originalCreatePublicOauthClient(...args);\n      },\n    );\n\n    const authClient = createPublicOauthClient(\n      FOUNDRY_CLIENT_ID,\n      FOUNDRY_URL,\n      REDIRECT_URI,\n      true,\n      undefined,\n      undefined,\n      undefined,\n      fetch,\n      undefined,\n    );\n\n    expect(authClient).toBeDefined();\n    expect(mockProcessOptionsAndAssignDefaults).toHaveBeenCalledTimes(1);\n\n    const authClientWithOptions = createPublicOauthClient(\n      FOUNDRY_CLIENT_ID,\n      FOUNDRY_URL,\n      REDIRECT_URI,\n      {\n        useHistory: true,\n        fetchFn: fetch,\n      },\n    );\n\n    expect(authClientWithOptions).toBeDefined();\n    expect(mockProcessOptionsAndAssignDefaults).toHaveBeenCalledTimes(2);\n\n    const [result1, result2] = mockProcessOptionsAndAssignDefaults.mock.results;\n    expect(result1.value).toEqual(result2.value);\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,uBAAuB,QAAQ,aAAa;AACrD,OAAO,KAAKC,WAAW,MAAM,aAAa;AAC1C,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,QAAQ,QAAQ;AACjD,OAAO,KAAKC,WAAW,MAAM,aAAa;AAE1C,MAAMC,+BAA+B,GAAGN,WAAW,CAACD,uBAAuB;AAE3E,MAAMQ,iBAAiB,GAAG,2BAA2B;AACrD,MAAMC,WAAW,GAAG,gCAAgC;AACpD,MAAMC,YAAY,GAAG,qCAAqC;AAE1DL,EAAE,CAACM,UAAU,CAAC,QAAQ,EAAE;EACtBC,QAAQ,EAAE;IACRC,QAAQ,EAAER,EAAE,CAACS,EAAE,CAAC,CAAC,CAACC,eAAe,CAAC,oBAAoB;EACxD;AACF,CAAC,CAAC;AAYFb,QAAQ,CAAC,yBAAyB,EAAE,MAAM;EACxCE,EAAE,CAAC,2EAA2E,EAAE,YAAY;IAC1F,MAAMY,mCAAmC,GAAGX,EAAE,CAACS,EAAE,CAI/C,CAAC;;IAEH;IACAT,EAAE,CAACY,KAAK,CAACX,WAAW,EAAE,iCAAiC,CAAC,CAACY,kBAAkB,CACzE,CACE,GAAGC,IAA6C,KAC7C;MACHH,mCAAmC,CAAC,GAAGG,IAAI,CAAC;MAC5C,OAAOb,WAAW,CAACc,+BAA+B,CAAC,GAAGD,IAAI,CAAC;IAC7D,CACF,CAAC;;IAED;IACAd,EAAE,CAACY,KAAK,CAAChB,WAAW,EAAE,yBAAyB,CAAC,CAACiB,kBAAkB,CACjE,CACE,GAAGC,IAAmC,KACnC;MACH,MAAM,CAACE,UAAU,EAAE,GAAGC,IAAI,CAAC,GAAGH,IAAI;MAClCH,mCAAmC,CAAC,GAAGM,IAAI,CAAC;MAC5C,OAAOf,+BAA+B,CAAC,GAAGY,IAAI,CAAC;IACjD,CACF,CAAC;IAED,MAAMI,UAAU,GAAGvB,uBAAuB,CACxCQ,iBAAiB,EACjBC,WAAW,EACXC,YAAY,EACZ,IAAI,EACJc,SAAS,EACTA,SAAS,EACTA,SAAS,EACTC,KAAK,EACLD,SACF,CAAC;IAEDrB,MAAM,CAACoB,UAAU,CAAC,CAACG,WAAW,CAAC,CAAC;IAChCvB,MAAM,CAACa,mCAAmC,CAAC,CAACW,qBAAqB,CAAC,CAAC,CAAC;IAEpE,MAAMC,qBAAqB,GAAG5B,uBAAuB,CACnDQ,iBAAiB,EACjBC,WAAW,EACXC,YAAY,EACZ;MACEmB,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAEL;IACX,CACF,CAAC;IAEDtB,MAAM,CAACyB,qBAAqB,CAAC,CAACF,WAAW,CAAC,CAAC;IAC3CvB,MAAM,CAACa,mCAAmC,CAAC,CAACW,qBAAqB,CAAC,CAAC,CAAC;IAEpE,MAAM,CAACI,OAAO,EAAEC,OAAO,CAAC,GAAGhB,mCAAmC,CAACiB,IAAI,CAACC,OAAO;IAC3E/B,MAAM,CAAC4B,OAAO,CAACI,KAAK,CAAC,CAACC,OAAO,CAACJ,OAAO,CAACG,KAAK,CAAC;EAC9C,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}