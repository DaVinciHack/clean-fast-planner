import type { OntologyIrImportedTypes, OntologyIrOntologyBlockDataV2 } from "./generated/ontology-metadata/api/blockdata/index.js";
import type { BaseType } from "./generated/type-registry/api/BaseType.js";
import type { ExampleValue } from "./generated/type-registry/api/ExampleValue.js";
import type { ValueTypeApiName } from "./generated/type-registry/api/ValueTypeApiName.js";
import type { ValueTypeDataConstraint } from "./generated/type-registry/api/ValueTypeDataConstraint.js";
import type { ValueTypeDisplayMetadata } from "./generated/type-registry/api/ValueTypeDisplayMetadata.js";
import type { ValueTypeStatus } from "./generated/type-registry/api/ValueTypeStatus.js";
import type { ValueTypeVersion } from "./generated/type-registry/api/ValueTypeVersion.js";
export type InterfaceTypeApiName = string;
export type ObjectTypeFieldApiName = string;
export type InterfaceLinkTypeApiName = string;
export type { OntologyIrOntologyBlockDataV2 } from "./generated/ontology-metadata/api/blockdata/index.js";
export interface OntologyIr {
	blockData: OntologyIrOntologyBlockDataV2;
	importedTypes: OntologyIrImportedTypes;
}
export type ApiNameValueTypeReference = {
	apiName: ValueTypeApiName
	version: ValueTypeVersion
};
export type OntologyIrPackagedValueType = {
	version: ValueTypeVersion
	baseType: BaseType
	constraints: ValueTypeDataConstraint[]
	exampleValues: ExampleValue[]
};
export type OntologyIrPackagedValueTypeMetadata = {
	apiName: ValueTypeApiName
	displayMetadata: ValueTypeDisplayMetadata
	status: ValueTypeStatus
};
export type OntologyIrValueTypeBlockDataEntry = {
	metadata: OntologyIrPackagedValueTypeMetadata
	versions: OntologyIrPackagedValueType[]
};
export type OntologyIrValueTypeBlockData = {
	valueTypes: OntologyIrValueTypeBlockDataEntry[]
};
