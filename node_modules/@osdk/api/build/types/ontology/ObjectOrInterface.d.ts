import type { IncludeValuesExtending } from "../util/IncludeValuesExtending.js";
import type { InterfaceDefinition } from "./InterfaceDefinition.js";
import type { CompileTimeMetadata, ObjectTypeDefinition } from "./ObjectTypeDefinition.js";
import type { SimplePropertyDef } from "./SimplePropertyDef.js";
import type { WirePropertyTypes } from "./WirePropertyTypes.js";
export type ObjectOrInterfaceDefinition = ObjectTypeDefinition | InterfaceDefinition;
export declare namespace DerivedObjectOrInterfaceDefinition {
	type WithDerivedProperties<
		K extends ObjectOrInterfaceDefinition,
		D extends Record<string, SimplePropertyDef>
	> = {
		__DefinitionMetadata?: {
			properties: { [T in keyof D] : SimplePropertyDef.ToPropertyDef<D[T]> }
			props?: { [T in keyof D] : SimplePropertyDef.ToRuntimeProperty<D[T]> }
		}
	} & K;
}
export type PropertyKeys<O extends ObjectOrInterfaceDefinition> = (keyof CompileTimeMetadata<O>["properties"]) & string;
export declare namespace PropertyKeys {
	type Filtered<
		Q extends ObjectOrInterfaceDefinition,
		T extends WirePropertyTypes
	> = keyof IncludeValuesExtending<CompileTimeMetadata<Q>["properties"], {
		type: T
	}>;
}
