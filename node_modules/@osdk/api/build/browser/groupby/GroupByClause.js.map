{"version":3,"file":"GroupByClause.js","names":["TimeDurationMapping","DurationMapping"],"sources":["GroupByClause.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { AggregatableKeys } from \"../aggregate/AggregatableKeys.js\";\nimport { TimeDurationMapping } from \"../mapping/DurationMapping.js\";\nimport type { ObjectOrInterfaceDefinition } from \"../ontology/ObjectOrInterface.js\";\nimport type { CompileTimeMetadata } from \"../ontology/ObjectTypeDefinition.js\";\nimport type { GroupByMapper } from \"./GroupByMapper.js\";\n\nexport type GroupByClause<\n  Q extends ObjectOrInterfaceDefinition,\n> = {\n  [P in AggregatableKeys<Q>]?: GroupByEntry<Q, P>;\n};\n\ntype BaseGroupByValue =\n  | \"exact\"\n  | { $exactWithLimit: number }\n  | ExactGroupByWithOptions;\n\ntype ExactGroupByWithOptions = {\n  $exact: { $limit?: number; $defaultValue?: string };\n};\n\nexport type GroupByRange<T> = [T, T];\n\nexport type StringGroupByValue = BaseGroupByValue;\n\nexport type NumericGroupByValue = BaseGroupByValue | {\n  $fixedWidth: number;\n} | { $ranges: GroupByRange<number>[] };\n\nexport type TimestampGroupByValue =\n  | BaseGroupByValue\n  | { $ranges: GroupByRange<string>[] }\n  | { $duration: TimestampDurationGroupBy };\n\nexport type DateGroupByValue =\n  | BaseGroupByValue\n  | { $ranges: GroupByRange<string>[] }\n  | { $duration: DatetimeDurationGroupBy };\n\nexport type BooleanGroupByValue = BaseGroupByValue;\n\nexport type TimestampTimeUnits =\n  | DateTimeUnits\n  | \"SECONDS\"\n  | \"MINUTES\"\n  | \"HOURS\";\n\nexport type DateTimeUnits = \"DAYS\" | \"WEEKS\" | \"MONTHS\" | \"YEARS\" | \"QUARTERS\";\nexport const DurationMapping: {\n  quarter: \"QUARTERS\";\n  quarters: \"QUARTERS\";\n  sec: \"SECONDS\";\n  seconds: \"SECONDS\";\n  min: \"MINUTES\";\n  minute: \"MINUTES\";\n  minutes: \"MINUTES\";\n  hr: \"HOURS\";\n  hrs: \"HOURS\";\n  hour: \"HOURS\";\n  hours: \"HOURS\";\n  day: \"DAYS\";\n  days: \"DAYS\";\n  wk: \"WEEKS\";\n  week: \"WEEKS\";\n  weeks: \"WEEKS\";\n  mos: \"MONTHS\";\n  month: \"MONTHS\";\n  months: \"MONTHS\";\n  yr: \"YEARS\";\n  year: \"YEARS\";\n  years: \"YEARS\";\n} = {\n  ...TimeDurationMapping,\n  \"quarter\": \"QUARTERS\",\n  \"quarters\": \"QUARTERS\",\n} satisfies Record<string, DateTimeUnits | TimestampTimeUnits>;\n\ninterface TimeValueMapping {\n  SECONDS: number;\n  MINUTES: number;\n  HOURS: number;\n  DAYS: number;\n  WEEKS: 1;\n  MONTHS: 1;\n  YEARS: 1;\n  QUARTERS: 1;\n}\n\ntype DurationGroupBy<A> = {\n  [K in keyof typeof DurationMapping]: typeof DurationMapping[K] extends A\n    ? [TimeValueMapping[typeof DurationMapping[K]], K]\n    : never;\n}[keyof typeof DurationMapping];\n\ntype TimestampDurationGroupBy = DurationGroupBy<TimestampTimeUnits>;\ntype DatetimeDurationGroupBy = DurationGroupBy<DateTimeUnits>;\n\ntype GroupByEntry<\n  Q extends ObjectOrInterfaceDefinition,\n  P extends AggregatableKeys<Q>,\n> = CompileTimeMetadata<Q>[\"properties\"][P][\"type\"] extends keyof GroupByMapper\n  ? GroupByMapper[CompileTimeMetadata<Q>[\"properties\"][P][\"type\"]]\n  : never;\n\nexport type AllGroupByValues = GroupByMapper[keyof GroupByMapper];\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,mBAAmB,QAAQ,+BAA+B;AA+CnE,OAAO,MAAMC,eAuBZ,GAAG;EACF,GAAGD,mBAAmB;EACtB,SAAS,EAAE,UAAU;EACrB,UAAU,EAAE;AACd,CAA8D","ignoreList":[]}