{"version":3,"file":"LinkDefinitions.js","names":[],"sources":["LinkDefinitions.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FetchPageArgs, SelectArg } from \"../object/FetchPageArgs.js\";\nimport type { Result } from \"../object/Result.js\";\nimport type { ObjectSet } from \"../objectSet/ObjectSet.js\";\nimport type { PropertyKeys } from \"../ontology/ObjectOrInterface.js\";\nimport type {\n  CompileTimeMetadata,\n  ObjectMetadata,\n  ObjectTypeDefinition,\n  ObjectTypeLinkKeysFrom2,\n} from \"../ontology/ObjectTypeDefinition.js\";\nimport type { ExtractOptions, Osdk } from \"../OsdkObjectFrom.js\";\n\n/** The $link container to get from one object type to its linked objects */\nexport type OsdkObjectLinksObject<\n  O extends ObjectTypeDefinition,\n> = ObjectTypeLinkKeysFrom2<O> extends never ? never : {\n  readonly [L in ObjectTypeLinkKeysFrom2<O>]: OsdkObjectLinksEntry<O, L>;\n};\n\nexport type OsdkObjectLinksEntry<\n  Q extends ObjectTypeDefinition,\n  L extends ObjectTypeLinkKeysFrom2<Q>,\n> = CompileTimeMetadata<Q>[\"links\"][L] extends\n  ObjectMetadata.Link<infer T, infer M> ? (\n    M extends false ? SingleLinkAccessor<T> : ObjectSet<T>\n  )\n  : never;\n\nexport type DefaultToFalse<B extends boolean | undefined> = false extends B\n  ? false\n  : undefined extends B ? false\n  : true;\n\nexport interface SingleLinkAccessor<\n  T extends ObjectTypeDefinition,\n> {\n  /** Load the linked object\n   */\n  fetchOne: <\n    const A extends SelectArg<\n      T,\n      PropertyKeys<T>,\n      boolean\n    >,\n  >(\n    options?: A,\n  ) => Promise<\n    A extends FetchPageArgs<T, infer L, infer R, any, infer S>\n      ? Osdk.Instance<T, ExtractOptions<R, S>, L & PropertyKeys<T>>\n      : Osdk.Instance<T>\n  >;\n\n  /** Load the linked object, with a result wrapper\n   */\n  fetchOneWithErrors: <\n    const A extends SelectArg<\n      T,\n      PropertyKeys<T>,\n      boolean\n    >,\n  >(\n    options?: A,\n  ) => Promise<\n    Result<\n      A extends FetchPageArgs<T, infer L, infer R, any, infer S>\n        ? Osdk.Instance<T, ExtractOptions<R, S>, L>\n        : Osdk.Instance<T>\n    >\n  >;\n}\n"],"mappings":"","ignoreList":[]}