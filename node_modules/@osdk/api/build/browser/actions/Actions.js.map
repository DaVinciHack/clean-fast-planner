{"version":3,"file":"Actions.js","names":["ActionParam"],"sources":["Actions.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValueClientToWire } from \"../mapping/DataValueMapping.js\";\nimport type { ObjectSet } from \"../objectSet/ObjectSet.js\";\nimport type { InterfaceDefinition } from \"../ontology/InterfaceDefinition.js\";\nimport type { ObjectTypeDefinition } from \"../ontology/ObjectTypeDefinition.js\";\nimport type { OsdkBase } from \"../OsdkBase.js\";\nimport type { OsdkObjectPrimaryKeyType } from \"../OsdkObjectPrimaryKeyType.js\";\n\nimport type {\n  ActionResults,\n  ValidateActionResponseV2,\n} from \"./ActionResults.js\";\n\nexport type ApplyActionOptions =\n  | { $returnEdits?: true; $validateOnly?: false }\n  | {\n    $validateOnly?: true;\n    $returnEdits?: false;\n  };\n\nexport type ApplyBatchActionOptions = { $returnEdits?: boolean };\n\n/**\n * Helper types for converting action definition parameter types to typescript types\n */\nexport namespace ActionParam {\n  /**\n   * Helper type to convert action definition parameter primitives to typescript types\n   */\n  export type PrimitiveType<T extends keyof DataValueClientToWire> =\n    DataValueClientToWire[T];\n\n  /**\n   * Helper type to convert action definition parameter object types to typescript types\n   */\n  export type ObjectType<T extends ObjectTypeDefinition> =\n    | OsdkBase<T>\n    | OsdkObjectPrimaryKeyType<T>;\n\n  /**\n   * Helper type to convert action definition parameter object sets to typescript types\n   */\n  export type ObjectSetType<T extends ObjectTypeDefinition> = ObjectSet<T>;\n\n  /**\n   * Helper type to convert action definition parameter interface types to typescript types\n   */\n  export type InterfaceType<T extends InterfaceDefinition> = {\n    $objectType: NonNullable<T[\"__DefinitionMetadata\"]> extends\n      { implementedBy: infer U } ? (U extends ReadonlyArray<never> ? string\n        : U extends ReadonlyArray<string> ? U[number]\n        : string)\n      : string;\n    $primaryKey: string | number;\n  };\n\n  export type StructType<\n    T extends Record<string, keyof DataValueClientToWire>,\n  > = { [K in keyof T]: DataValueClientToWire[T[K]] };\n}\n\nexport type ActionEditResponse = ActionResults;\nexport type ActionValidationResponse = ValidateActionResponseV2;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AACA;AACA;AAFA,WAGiBA,WAAW","ignoreList":[]}