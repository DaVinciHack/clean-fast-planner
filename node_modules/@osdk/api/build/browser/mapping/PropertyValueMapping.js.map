{"version":3,"file":"PropertyValueMapping.js","names":[],"sources":["PropertyValueMapping.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Attachment, AttachmentUpload } from \"../object/Attachment.js\";\nimport type { Media } from \"../object/Media.js\";\nimport type {\n  GeotimeSeriesProperty,\n  TimeSeriesProperty,\n} from \"../timeseries/timeseries.js\";\n\n/**\n * Map from the PropertyDefinition type to the typescript type that we return\n */\nexport interface PropertyValueWireToClient {\n  attachment: Attachment;\n  boolean: boolean;\n  byte: number;\n  datetime: string;\n  decimal: string;\n  double: number;\n  float: number;\n  geopoint: GeoJSON.Point;\n  geoshape: GeoJSON.GeoJSON;\n  integer: number;\n  long: string;\n  marking: string;\n  mediaReference: Media;\n  short: number;\n  string: string;\n  timestamp: string;\n  numericTimeseries: TimeSeriesProperty<number>;\n  stringTimeseries: TimeSeriesProperty<string>;\n  sensorTimeseries: TimeSeriesProperty<string | number>;\n  geotimeSeriesReference: GeotimeSeriesProperty<GeoJSON.Point>;\n}\n\nexport type GetClientPropertyValueFromWire<\n  T extends\n    | keyof PropertyValueWireToClient\n    | Record<string, keyof PropertyValueWireToClient>,\n> = T extends keyof PropertyValueWireToClient ? PropertyValueWireToClient[T]\n  : T extends Record<string, keyof PropertyValueWireToClient>\n    ? { [K in keyof T]: PropertyValueWireToClient[T[K]] }\n  : never;\n\n/**\n * Map from the PropertyDefinition type to the typescript type that we accept\n */\nexport interface PropertyValueClientToWire {\n  attachment: string | AttachmentUpload | Blob & { readonly name: string };\n  boolean: boolean;\n  byte: number;\n  datetime: string;\n  decimal: string | number;\n  double: number;\n  float: number;\n  geopoint: GeoJSON.Point;\n  geoshape: GeoJSON.GeoJSON;\n  integer: number;\n  long: string | number;\n  marking: string;\n  short: number;\n  string: string;\n  timestamp: string;\n  mediaReference: Media;\n  numericTimeseries: TimeSeriesProperty<number>;\n  stringTimeseries: TimeSeriesProperty<string>;\n  sensorTimeseries: TimeSeriesProperty<string | number>;\n  geotimeSeriesReference: GeotimeSeriesProperty<GeoJSON.Point>;\n}\nexport type GetWirePropertyValueFromClient<\n  T extends\n    | keyof PropertyValueClientToWire\n    | Record<string, keyof PropertyValueClientToWire>,\n> = T extends keyof PropertyValueClientToWire ? PropertyValueClientToWire[T]\n  : T extends Record<string, keyof PropertyValueClientToWire>\n    ? { [K in keyof T]: PropertyValueClientToWire[T[K]] }\n  : never;\n"],"mappings":"","ignoreList":[]}