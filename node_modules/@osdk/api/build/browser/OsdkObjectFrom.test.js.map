{"version":3,"file":"OsdkObjectFrom.test.js","names":["describe","expectTypeOf","it","createMockObjectSet","toEqualTypeOf","branded","fauxObjectSet","fetchPage"],"sources":["OsdkObjectFrom.test.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { describe, expectTypeOf, it } from \"vitest\";\nimport type { NullabilityAdherence } from \"./object/FetchPageArgs.js\";\nimport { createMockObjectSet } from \"./objectSet/ObjectSet.test.js\";\nimport type { ExtractOptions, Osdk } from \"./OsdkObjectFrom.js\";\n\ndescribe(\"ExtractOptions\", () => {\n  describe(\"NullabilityAdherence Generic\", () => {\n    it(\"does not add $notStrict for any\", () => {\n      expectTypeOf<ExtractOptions<any, any>>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $notStrict for never\", () => {\n      expectTypeOf<ExtractOptions<any, never>>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $notStrict for false\", () => {\n      expectTypeOf<ExtractOptions<any, false>>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $notStrict for throw\", () => {\n      expectTypeOf<ExtractOptions<any, \"throw\">>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $notStrict for drop\", () => {\n      expectTypeOf<ExtractOptions<any, \"drop\">>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $notStrict for drop | throw\", () => {\n      expectTypeOf<ExtractOptions<any, \"drop\" | \"throw\">>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $notStrict for drop | false\", () => {\n      expectTypeOf<ExtractOptions<any, \"drop\" | false>>()\n        .toEqualTypeOf<never>();\n    });\n    it(\"does not add $notStrict for false | throw\", () => {\n      expectTypeOf<ExtractOptions<any, false | \"throw\">>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $notStrict for drop | throw | false\", () => {\n      expectTypeOf<ExtractOptions<any, \"drop\" | \"throw\" | false>>()\n        .toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $notStrict for NullabilityAdherence\", () => {\n      expectTypeOf<ExtractOptions<any, NullabilityAdherence>>()\n        .toEqualTypeOf<never>();\n    });\n  });\n\n  describe(\"Rid Generic\", () => {\n    it(\"does not add $rid for false\", () => {\n      expectTypeOf<ExtractOptions<false, any>>().toEqualTypeOf<never>();\n    });\n\n    it(\"does add $rid for true\", () => {\n      expectTypeOf<ExtractOptions<true, any>>().toEqualTypeOf<\"$rid\">();\n    });\n\n    it(\"does not add $rid for any\", () => {\n      expectTypeOf<ExtractOptions<any, any>>().toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $rid for never\", () => {\n      expectTypeOf<ExtractOptions<never, any>>().toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $rid for boolean\", () => {\n      expectTypeOf<ExtractOptions<boolean, any>>().toEqualTypeOf<never>();\n    });\n\n    it(\"does not add $rid for true | false\", () => {\n      expectTypeOf<ExtractOptions<true | false, any>>().toEqualTypeOf<never>();\n    });\n  });\n\n  type quickAndDirty = {\n    apiName: \"Foo\";\n    type: \"object\";\n    __DefinitionMetadata: {\n      props: {\n        name: string;\n        foo: number | undefined;\n      };\n      strictProps: {\n        name: string;\n        foo: number;\n      };\n      apiName: \"Foo\";\n      displayName: \"\";\n      interfaceMap: {};\n      inverseInterfaceMap: {};\n      links: {};\n      pluralDisplayName: \"\";\n      primaryKeyApiName: \"\";\n      primaryKeyType: \"string\";\n      properties: {\n        name: {\n          type: \"string\";\n        };\n        foo: {\n          type: \"integer\";\n        };\n      };\n      rid: \"\";\n      status: \"ACTIVE\";\n      titleProperty: \"name\";\n      type: \"object\";\n      icon: undefined;\n      visibility: undefined;\n      description: undefined;\n    };\n  };\n\n  describe(\"Osdk.Instance\", () => {\n    it(\"defaults to second argument never if omitted\", () => {\n      type toCheck = Osdk.Instance<quickAndDirty>;\n      expectTypeOf<toCheck>().toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, never>\n      >();\n\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n    });\n\n    it(\"defaults to second argument never if never\", () => {\n      type toCheck = Osdk.Instance<quickAndDirty, never>;\n      expectTypeOf<toCheck>().toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, never>\n      >();\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n    });\n\n    it(\"defaults to second argument never if any\", () => {\n      type toCheck = Osdk.Instance<quickAndDirty, any>;\n      expectTypeOf<toCheck>().branded.toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, never>\n      >();\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n    });\n\n    it(\"Cannot use $notStrict\", () => {\n      // @ts-expect-error\n      type toCheck = Osdk.Instance<quickAndDirty, \"$notStrict\">;\n\n      expectTypeOf<toCheck>().branded\n        // @ts-expect-error\n        .toEqualTypeOf<Osdk.Instance<quickAndDirty, \"$notStrict\">>();\n      // ensure its not the strict type\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n    });\n\n    it(\"defaults to last argument all props if never\", () => {\n      expectTypeOf<Osdk.Instance<quickAndDirty, never, never>>().branded\n        .toEqualTypeOf<\n          Osdk.Instance<quickAndDirty, never, \"name\" | \"foo\">\n        >();\n    });\n\n    it(\"defaults to last argument all props if any\", () => {\n      expectTypeOf<Osdk.Instance<quickAndDirty, never, any>>().branded\n        .toEqualTypeOf<\n          Osdk.Instance<quickAndDirty, never, \"name\" | \"foo\">\n        >();\n    });\n\n    it(\"defaults to last argument exactly if specified\", () => {\n      expectTypeOf<Osdk.Instance<quickAndDirty, never, \"name\">>().branded\n        .toEqualTypeOf<\n          Osdk.Instance<quickAndDirty, never, \"name\">\n        >();\n    });\n\n    it(\"Is assignable to Record<string, unknown>\", () => {\n      // We encountered a break where this stopped being assignable. We need to continue to support this assignment.\n      const a = {} as Osdk.Instance<quickAndDirty>;\n      a as Record<string, unknown>;\n    });\n  });\n\n  describe(\"Osdk<>\", () => {\n    it(\"defaults to second argument never if omitted\", () => {\n      type toCheck = Osdk<quickAndDirty>;\n      expectTypeOf<toCheck>().toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, never>\n      >();\n\n      // expect no rid\n      expectTypeOf<keyof toCheck & \"$rid\">().toEqualTypeOf<never>();\n\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n    });\n\n    it(\"returns $rid if only thing specified\", () => {\n      type toCheck = Osdk<quickAndDirty, \"$rid\">;\n      expectTypeOf<toCheck>().toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, \"$rid\">\n      >();\n\n      // expect rid\n      expectTypeOf<keyof toCheck & \"$rid\">().toEqualTypeOf<\"$rid\">();\n\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n    });\n\n    it(\"handles legacy properly: $rid and name\", () => {\n      type toCheck = Osdk<quickAndDirty, \"$rid\" | \"name\">;\n      expectTypeOf<toCheck>().toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, \"$rid\", \"name\">\n      >();\n\n      // expect rid\n      expectTypeOf<keyof toCheck & \"$rid\">().toEqualTypeOf<\"$rid\">();\n\n      // ensure its the strict type\n      expectTypeOf<Pick<toCheck, \"name\">>().toEqualTypeOf<{\n        name: quickAndDirty[\"__DefinitionMetadata\"][\"strictProps\"][\"name\"];\n      }>();\n    });\n\n    it(\"handles legacy properly: $rid and $all\", () => {\n      type toCheck = Osdk<quickAndDirty, \"$rid\" | \"$all\">;\n      expectTypeOf<toCheck>().branded.toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, \"$rid\", \"name\" | \"foo\">\n      >();\n\n      // expect rid\n      expectTypeOf<keyof toCheck & \"$rid\">().toEqualTypeOf<\"$rid\">();\n\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n    });\n\n    it(\"handles legacy properly: just $all\", () => {\n      type toCheck = Osdk<quickAndDirty, \"$all\">;\n      expectTypeOf<toCheck>().branded.toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, never, \"name\" | \"foo\">\n      >();\n\n      // expect no rid\n      expectTypeOf<keyof toCheck & \"$rid\">().toEqualTypeOf<never>();\n\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n    });\n\n    it(\"defaults to second argument never if never\", () => {\n      type toCheck = Osdk<quickAndDirty, never>;\n      expectTypeOf<toCheck>().toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, never>\n      >();\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n\n      // expect no rid\n      expectTypeOf<keyof toCheck & \"$rid\">().toEqualTypeOf<never>();\n    });\n\n    it(\"defaults to second argument never if any\", () => {\n      type toCheck = Osdk<quickAndDirty, any>;\n      expectTypeOf<toCheck>().branded.toEqualTypeOf<\n        Osdk.Instance<quickAndDirty, never>\n      >();\n      // ensure its the normal props\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n\n      // expect no rid\n      expectTypeOf<keyof toCheck & \"$rid\">().toEqualTypeOf<never>();\n    });\n\n    it(\"Does not use $notStrict if requested with old type\", () => {\n      type toCheck = Osdk<quickAndDirty, \"$notStrict\">;\n      expectTypeOf<toCheck>().branded\n        .toEqualTypeOf<Osdk.Instance<quickAndDirty, never>>();\n      // ensure its not the strict type\n      expectTypeOf<Pick<toCheck, \"name\" | \"foo\">>().toEqualTypeOf<\n        quickAndDirty[\"__DefinitionMetadata\"][\"props\"]\n      >();\n\n      // expect no rid\n      expectTypeOf<keyof toCheck & \"$rid\">().toEqualTypeOf<never>();\n    });\n\n    it(\"defaults to last argument all props if never\", () => {\n      expectTypeOf<Osdk<quickAndDirty, never, never>>().branded\n        .toEqualTypeOf<\n          Osdk.Instance<quickAndDirty, never, \"name\" | \"foo\">\n        >();\n    });\n\n    it(\"defaults to last argument all props if any\", () => {\n      expectTypeOf<Osdk<quickAndDirty, never, any>>().branded\n        .toEqualTypeOf<\n          Osdk.Instance<quickAndDirty, never, \"name\" | \"foo\">\n        >();\n    });\n\n    it(\"defaults to last argument exactly if specified\", () => {\n      expectTypeOf<Osdk<quickAndDirty, never, \"name\">>()\n        .toEqualTypeOf<\n          Osdk.Instance<quickAndDirty, never, \"name\">\n        >();\n    });\n  });\n\n  describe(\"Inferred return types from fetchPage work\", () => {\n    const fauxObjectSet = createMockObjectSet<quickAndDirty>();\n\n    it(\"is not $notStrict\", async () => {\n      const page = await fauxObjectSet.fetchPage();\n\n      expectTypeOf<typeof page[\"data\"]>().branded\n        .toEqualTypeOf<\n          Osdk.Instance<quickAndDirty>[]\n        >();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}