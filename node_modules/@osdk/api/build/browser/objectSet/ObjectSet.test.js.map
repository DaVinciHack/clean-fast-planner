{"version":3,"file":"ObjectSet.test.js","names":["describe","expectTypeOf","it","test","vi","createMockObjectSet","fauxObject","fauxResults","fauxObjectSet","$link","peeps","$objectSetInternals","def","data","where","fn","withProperties","fetchPage","Promise","resolve","fetchOne","asyncIter","aggregate","pivotTo","toEqualTypeOf","fetchPageResult","class","$includeAllBaseObjectProperties","asyncIterResult","$select","x","$includeRid","subselect","withA","base","selectProperty","withFamily","withMom","withParents","todo","withAggregations","whereResults","aggTestObjectSet","result","maxHasSameType","minHasSameType","approximateDistinctNumberNoUndefined","exactDistinctNumberNoUndefined","countNumberNoUndefined","sumNumber","avgNumber","branded","selectedInteger","add","subtract","multiply","divide","abs","negate","max","min","extractPart","maxAggregation","collectList","plus","intAndLong","intAndDouble","longAndDouble","longAndLong","intAndInt","intLongDoubleChain","shortAndIntReturnsInt","shortAndFloatReturnsDouble","constant","double","intPlusIntReturnsInt","integer","nested","selectedDatetime","dateAndDateReturnDate","datetime","dateAndTimeReturnTime","timestamp"],"sources":["ObjectSet.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { describe, expectTypeOf, it, test, vi } from \"vitest\";\n\nimport type {\n  DerivedProperty,\n  NullabilityAdherence,\n  ObjectOrInterfaceDefinition,\n  ObjectSet as $ObjectSet,\n  Osdk,\n  PageResult,\n  PropertyKeys,\n} from \"../index.js\";\nimport type { DerivedObjectOrInterfaceDefinition } from \"../ontology/ObjectOrInterface.js\";\nimport type { EmployeeApiTest } from \"../test/EmployeeApiTest.js\";\n\nexport function createMockObjectSet<\n  Q extends ObjectOrInterfaceDefinition,\n>(): $ObjectSet<Q, never> {\n  let fauxObject: Osdk.Instance<Q>,\n    fauxResults: any,\n    fauxObjectSet: $ObjectSet<Q>;\n\n  // eslint-disable-next-line prefer-const\n  fauxObject = {\n    $link: {\n      peeps: {\n        $objectSetInternals: {\n          def: {},\n        },\n      },\n    },\n  } as Osdk.Instance<Q>;\n\n  fauxResults = {\n    data: [fauxObject],\n  };\n\n  fauxObjectSet = {\n    where: vi.fn(() => {\n      return fauxObjectSet;\n    }),\n    withProperties: vi.fn(() => {\n      return fauxObjectSet;\n    }),\n    fetchPage: vi.fn(() => Promise.resolve(fauxResults)),\n    fetchOne: vi.fn(() => fauxObject),\n    asyncIter: vi.fn(() => {\n      return {};\n    }),\n    aggregate: vi.fn(() => {\n      return {};\n    }),\n    pivotTo: vi.fn(() => {\n      return fauxObjectSet;\n    }),\n  } as any as $ObjectSet<Q>;\n\n  return fauxObjectSet;\n}\n\ndescribe(\"ObjectSet\", () => {\n  const fauxObjectSet = createMockObjectSet<EmployeeApiTest>();\n\n  describe(\"normal\", () => {\n    test(\"select none\", async () => {\n      const result = await fauxObjectSet.fetchPage();\n      expectTypeOf<typeof result.data[0]>().toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>>\n      >();\n\n      // Do it again but be explicit about the params to be sure\n      // we don't break them\n      const result2 = await fauxObjectSet.fetchPage<\n        PropertyKeys<EmployeeApiTest>,\n        false,\n        never,\n        NullabilityAdherence.Default,\n        false\n      >();\n    });\n\n    test(\"select one\", async () => {\n      const result = await fauxObjectSet.fetchPage({ \"$select\": [\"fullName\"] });\n      expectTypeOf<typeof result.data[0]>().toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, \"fullName\">\n      >();\n    });\n  });\n\n  describe(\"includeAllBaseObjectProperties\", () => {\n    it(\"has the right types if you pass true\", async () => {\n      const fetchPageResult = await fauxObjectSet\n        .where({ class: \"idk\" })\n        .fetchPage({ $includeAllBaseObjectProperties: true });\n\n      expectTypeOf(fetchPageResult).toEqualTypeOf<\n        PageResult<\n          Osdk.Instance<EmployeeApiTest, \"$allBaseProperties\">\n        >\n      >();\n\n      const asyncIterResult = fauxObjectSet\n        .where({ class: \"idk\" })\n        .asyncIter({ $includeAllBaseObjectProperties: true });\n\n      expectTypeOf(asyncIterResult).toEqualTypeOf<\n        AsyncIterableIterator<\n          Osdk.Instance<EmployeeApiTest, \"$allBaseProperties\">\n        >\n      >();\n    });\n\n    it(\"does not let you pass partial $select and true\", async () => {\n      const fetchPageResult = await fauxObjectSet\n        .where({ class: \"idk\" })\n        .fetchPage({\n          // @ts-expect-error\n          $includeAllBaseObjectProperties: true,\n          $select: [\"attachment\"],\n        });\n\n      const asyncIterResult = fauxObjectSet\n        .where({ class: \"idk\" })\n        .asyncIter({\n          // @ts-expect-error\n          $includeAllBaseObjectProperties: true,\n          $select: [\"attachment\"],\n        });\n    });\n\n    it(\"does let you pass full select options and false\", async () => {\n      const fetchPageResult = await fauxObjectSet\n        .where({ class: \"idk\" })\n        .fetchPage({\n          $includeAllBaseObjectProperties: true,\n\n          // this select list is intended to represent all properties on `EmployeeApiTest`,\n          // so if you get an error here later and you added properties to that object,\n          // be sure to add them here too.\n          $select: [\n            \"attachment\",\n            \"class\",\n            \"employeeId\",\n            \"fullName\",\n            \"geopoint\",\n            \"geotimeSeriesReference\",\n            \"isActive\",\n            \"mediaReference\",\n            \"timeseries\",\n            \"dateOfJoining\",\n            \"hourlyRate\",\n            \"yearsOfExperience\",\n            \"rank\",\n            \"performanceScore\",\n            \"mediaReference\",\n            \"lastUpdated\",\n          ],\n        });\n\n      const asyncIterResult = await fauxObjectSet\n        .where({ class: \"idk\" })\n        .fetchPage({\n          $includeAllBaseObjectProperties: true,\n\n          // this select list is intended to represent all properties on `EmployeeApiTest`,\n          // so if you get an error here later and you added properties to that object,\n          // be sure to add them here too.\n          $select: [\n            \"attachment\",\n            \"class\",\n            \"employeeId\",\n            \"fullName\",\n            \"geopoint\",\n            \"geotimeSeriesReference\",\n            \"isActive\",\n            \"mediaReference\",\n            \"timeseries\",\n            \"dateOfJoining\",\n            \"hourlyRate\",\n            \"yearsOfExperience\",\n            \"rank\",\n            \"performanceScore\",\n            \"mediaReference\",\n            \"lastUpdated\",\n          ],\n        });\n    });\n  });\n\n  test(\"includeRid\", async () => {\n    const x = await fauxObjectSet\n      .where({ class: \"idk\" })\n      .fetchPage({ $includeRid: true });\n\n    expectTypeOf(x).toEqualTypeOf<\n      PageResult<\n        Osdk.Instance<EmployeeApiTest, \"$rid\">\n      >\n    >();\n  });\n\n  test(\"pivotTo\", async () => {\n    const noArgs = await fauxObjectSet.pivotTo(\"peeps\").fetchPage({});\n    const subselect = await fauxObjectSet.pivotTo(\"peeps\").fetchPage({\n      $select: [\"employeeId\", \"class\"],\n    });\n\n    expectTypeOf(subselect).toEqualTypeOf<\n      PageResult<\n        Osdk.Instance<EmployeeApiTest, never, \"employeeId\" | \"class\">\n      >\n    >();\n  });\n\n  describe(\".withProperties\", () => {\n    test(\"single property\", async () => {\n      const withA = fauxObjectSet.withProperties({\n        \"a\": (base) => {\n          return base.pivotTo(\"lead\").aggregate(\"class:exactDistinct\");\n        },\n      });\n\n      const isWithAAssignable: $ObjectSet<EmployeeApiTest, {}> = withA;\n\n      expectTypeOf(withA).toEqualTypeOf<\n        $ObjectSet<EmployeeApiTest, {\n          a: \"integer\";\n        }>\n      >();\n\n      const withAResults = await withA.fetchPage();\n\n      expectTypeOf<typeof withAResults[\"data\"][0]>().toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>, {\n          a: \"integer\";\n        }>\n      >();\n\n      expectTypeOf<typeof withAResults[\"data\"][0][\"a\"]>()\n        .toEqualTypeOf<number>();\n    });\n\n    it(\"can be sub-selected\", () => {\n      const objectWithUndefinedRdp = fauxObjectSet.withProperties({\n        \"derivedPropertyName\": (base) =>\n          base.pivotTo(\"lead\").selectProperty(\"employeeId\"),\n      }).fetchOne(3, {\n        $select: [\"derivedPropertyName\"],\n      });\n    });\n\n    test(\"multiple properties\", async () => {\n      const withFamily = fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n        \"dad\": (base) => base.pivotTo(\"lead\").selectProperty(\"fullName\"),\n        \"sister\": (base) => base.pivotTo(\"lead\").aggregate(\"class:collectList\"),\n      });\n      expectTypeOf(withFamily).toEqualTypeOf<\n        $ObjectSet<EmployeeApiTest, {\n          mom: \"integer\";\n          dad: \"string\" | undefined;\n          sister: \"string\"[] | undefined;\n        }>\n      >();\n\n      const withFamilyResults = await withFamily.fetchPage();\n\n      expectTypeOf<typeof withFamilyResults[\"data\"][0]>().toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>, {\n          mom: \"integer\";\n          dad: \"string\" | undefined;\n          sister: \"string\"[] | undefined;\n        }>\n      >();\n\n      expectTypeOf<typeof withFamilyResults[\"data\"][0][\"mom\"]>()\n        .toEqualTypeOf<number>();\n      expectTypeOf<typeof withFamilyResults[\"data\"][0][\"dad\"]>()\n        .toEqualTypeOf<string | undefined>();\n      expectTypeOf<typeof withFamilyResults[\"data\"][0][\"sister\"]>()\n        .toEqualTypeOf<string[] | undefined>();\n    });\n\n    describe(\"called in succession\", () => {\n      test(\"independently\", () => {\n        const withMom = fauxObjectSet.withProperties({\n          \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n        });\n\n        const withParents = withMom.withProperties({\n          \"dad\": (base) => base.pivotTo(\"lead\").selectProperty(\"fullName\"),\n        });\n\n        expectTypeOf(withParents).toEqualTypeOf<\n          $ObjectSet<EmployeeApiTest, {\n            mom: \"integer\";\n            dad: \"string\" | undefined;\n          }>\n        >();\n      });\n\n      test.todo(\"with calculated properties\");\n    });\n\n    describe(\"nullability\", () => {\n      it(\"count, exactDistinct, and approximateDistinct aren't nullable\", async () => {\n        const withFamily = fauxObjectSet.withProperties({\n          \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n          \"dad\": (base) =>\n            base.pivotTo(\"lead\").aggregate(\"class:exactDistinct\"),\n          \"sis\": (base) =>\n            base.pivotTo(\"lead\").aggregate(\"class:approximateDistinct\"),\n        });\n\n        const withFamilyResults = await withFamily.fetchPage();\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>().toEqualTypeOf<\n          Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>, {\n            mom: \"integer\";\n            dad: \"integer\";\n            sis: \"integer\";\n          }>\n        >();\n      });\n\n      it(\n        \"collectToSet, collectToList, selectProperty, and numeric aggregations are nullable\",\n        async () => {\n          const withAggregations = fauxObjectSet.withProperties({\n            \"collectSet\": (base) =>\n              base.pivotTo(\"lead\").aggregate(\"class:collectSet\"),\n            \"select\": (base) => base.pivotTo(\"lead\").selectProperty(\"fullName\"),\n            \"collectList\": (base) =>\n              base.pivotTo(\"lead\").aggregate(\"class:collectList\"),\n            \"min\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:max\"),\n            \"max\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:min\"),\n            \"sum\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:sum\"),\n            \"avg\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:avg\"),\n            \"approximatePercentile\": (base) =>\n              base.pivotTo(\"lead\").aggregate(\n                \"employeeId:approximatePercentile\",\n              ),\n          });\n\n          const withAggregationResults = await withAggregations.fetchPage();\n\n          expectTypeOf<typeof withAggregationResults[\"data\"][0]>()\n            .toEqualTypeOf<\n              Osdk.Instance<\n                EmployeeApiTest,\n                never,\n                PropertyKeys<EmployeeApiTest>,\n                {\n                  collectSet: \"string\"[] | undefined;\n                  select: \"string\" | undefined;\n                  collectList: \"string\"[] | undefined;\n                  min: \"double\" | undefined;\n                  max: \"double\" | undefined;\n                  sum: \"double\" | undefined;\n                  avg: \"double\" | undefined;\n                  approximatePercentile: \"double\" | undefined;\n                }\n              >\n            >();\n        },\n      );\n    });\n\n    describe(\"fetch functions return correct Osdk.Instance\", () => {\n      const withFamily = fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n        \"dad\": (base) => base.pivotTo(\"lead\").selectProperty(\"fullName\"),\n        \"sister\": (base) => base.pivotTo(\"lead\").aggregate(\"class:collectList\"),\n      });\n\n      it(\"works with .where\", async () => {\n        const where = withFamily.where({ \"mom\": 1 });\n        const whereResults = await where.fetchPage();\n\n        // Checks that if you did an `await where.fetchPage()` that you can then\n        // pass/assign it to something explicit.\n        const _assignPreviouslyInferredPages: PageResult<\n          Osdk.Instance<\n            EmployeeApiTest,\n            never,\n            PropertyKeys<EmployeeApiTest>,\n            {\n              mom: \"integer\";\n              dad: \"string\" | undefined;\n              sister: \"string\"[] | undefined;\n            }\n          >\n        > = whereResults;\n\n        // Checks that if you did an `await where.fetchPage()` that you can then\n        // pass/assign it to something explicit.\n        const _assignPreviouslyInferredInstance: Osdk.Instance<\n          EmployeeApiTest,\n          never,\n          PropertyKeys<EmployeeApiTest>,\n          {\n            mom: \"integer\";\n            dad: \"string\" | undefined;\n            sister: \"string\"[] | undefined;\n          }\n        > = whereResults.data[0];\n\n        const q = whereResults.data[0].$link.peeps.$objectSetInternals.def;\n\n        // same as above but with expectTypeOf\n        expectTypeOf<typeof where>().toEqualTypeOf<typeof withFamily>();\n        expectTypeOf<typeof whereResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              PropertyKeys<EmployeeApiTest>,\n              {\n                mom: \"integer\";\n                dad: \"string\" | undefined;\n                sister: \"string\"[] | undefined;\n              }\n            >\n          >();\n\n        // Checks that when you directly assign, it infers correctly.\n        // Sometimes an explicit assignment can affect how typescript infers\n        // types.\n        const shouldBeAssignablePage: PageResult<\n          Osdk.Instance<\n            EmployeeApiTest,\n            never,\n            PropertyKeys<EmployeeApiTest>,\n            {\n              mom: \"integer\";\n              dad: \"string\" | undefined;\n              sister: \"string\"[] | undefined;\n            }\n          >\n        > = await where.fetchPage();\n\n        const _shouldBeAssignableSingle: Osdk.Instance<\n          EmployeeApiTest,\n          never,\n          PropertyKeys<EmployeeApiTest>,\n          {\n            mom: \"integer\";\n            dad: \"string\" | undefined;\n            sister: \"string\"[] | undefined;\n          }\n        > = await withFamily.fetchOne(1);\n        await withFamily.fetchOne(1);\n      });\n\n      it(\"works with .async\", () => {\n        const asyncIter = withFamily.asyncIter();\n        expectTypeOf<typeof asyncIter>().toEqualTypeOf<\n          AsyncIterableIterator<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              PropertyKeys<EmployeeApiTest>,\n              {\n                mom: \"integer\";\n                dad: \"string\" | undefined;\n                sister: \"string\"[] | undefined;\n              }\n            >\n          >\n        >();\n      });\n\n      it(\"Works with no select\", async () => {\n        const withFamilyResults = await withFamily.fetchPage();\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              PropertyKeys<EmployeeApiTest>,\n              {\n                mom: \"integer\";\n                dad: \"string\" | undefined;\n                sister: \"string\"[] | undefined;\n              }\n            >\n          >();\n      });\n\n      it(\"Works with selecting all RDPs\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\"mom\", \"dad\", \"sister\"],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<EmployeeApiTest, never, never, {\n              mom: \"integer\";\n              dad: \"string\" | undefined;\n              sister: \"string\"[] | undefined;\n            }>\n          >();\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0][\"mom\"]>()\n          .toEqualTypeOf<number>();\n      });\n\n      it(\"Works with selecting some RDPs\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\"mom\"],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<EmployeeApiTest, never, never, {\n              mom: \"integer\";\n            }>\n          >();\n      });\n\n      it(\"Works with selecting all non-RDP's\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\n            \"employeeId\",\n            \"fullName\",\n            \"class\",\n            \"attachment\",\n            \"geopoint\",\n            \"timeseries\",\n            \"mediaReference\",\n            \"geotimeSeriesReference\",\n            \"isActive\",\n            \"yearsOfExperience\",\n            \"rank\",\n            \"performanceScore\",\n            \"hourlyRate\",\n            \"dateOfJoining\",\n            \"lastUpdated\",\n          ],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              PropertyKeys<EmployeeApiTest>,\n              {}\n            >\n          >();\n        expectTypeOf<typeof withFamilyResults[\"data\"][0][\"class\"]>()\n          .toEqualTypeOf<\n            string | undefined\n          >();\n      });\n\n      it(\"Works with selecting some non-RDP's\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\"class\"],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<EmployeeApiTest, never, \"class\", {}>\n          >();\n      });\n\n      it(\"Works with selecting a mix\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\"class\", \"mom\"],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              \"class\",\n              { mom: \"integer\" }\n            >\n          >();\n      });\n    });\n\n    it(\"allows extracting the type\", () => {\n      const objectSet = fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n      });\n\n      type ObjectSetType = typeof objectSet;\n\n      expectTypeOf<ObjectSetType>().toEqualTypeOf<\n        $ObjectSet<EmployeeApiTest, {\n          mom: \"integer\";\n        }>\n      >();\n\n      const objectSet2 = fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n      }) satisfies ObjectSetType;\n    });\n\n    it(\"Defining the Type\", () => {\n      type ObjectSetType = $ObjectSet<\n        EmployeeApiTest,\n        {\n          mom: \"integer\";\n        }\n      >;\n\n      fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n      }) satisfies ObjectSetType;\n    });\n\n    it(\"has correct aggregation keys\", () => {\n      fauxObjectSet.withProperties({\n        \"integer\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n        \"integerNumericAgg\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"employeeId:sum\"),\n        \"string\": (base) => base.pivotTo(\"lead\").aggregate(\"class:collectList\"),\n        \"stringDoesNotHaveNumericAgg\": (base) =>\n          // @ts-expect-error\n          base.pivotTo(\"lead\").aggregate(\"class:sum\"),\n        \"isActive\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"isActive:approximateDistinct\"),\n        \"attachment\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"attachment:collectList\"),\n        \"geopoint\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"geopoint:collectList\"),\n        \"numericTimeseries\": (base) =>\n          // @ts-expect-error\n          base.pivotTo(\"lead\").aggregate(\"timeseries:sum\"),\n        \"numericTimeseriesExactDistinct\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"timeseries:exactDistinct\"),\n        \"mediaReference\": (base) =>\n          // @ts-expect-error\n          base.pivotTo(\"lead\").aggregate(\"mediaReference:avg\"),\n        \"mediaReferenceExactDistinct\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"mediaReference:exactDistinct\"),\n        \"geotimeSeriesReference\": (base) =>\n          // @ts-expect-error\n          base.pivotTo(\"lead\").aggregate(\"geotimeSeriesReference:sum\"),\n        \"geotimeSeriesReferenceExactDistinct\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\n            \"geotimeSeriesReference:exactDistinct\",\n          ),\n        \"lastUpdated\": (base) => {\n          base.pivotTo(\"lead\").aggregate(\"lastUpdated:approximateDistinct\");\n          base.pivotTo(\"lead\").aggregate(\"lastUpdated:exactDistinct\");\n          base.pivotTo(\"lead\").aggregate(\"lastUpdated:max\");\n          base.pivotTo(\"lead\").aggregate(\"lastUpdated:min\");\n          base.pivotTo(\"lead\").aggregate(\"lastUpdated:collectList\");\n          return base.pivotTo(\"lead\").aggregate(\"lastUpdated:collectSet\");\n        },\n        \"dateOfJoining\": (base) => {\n          base.pivotTo(\"lead\").aggregate(\"dateOfJoining:approximateDistinct\");\n          base.pivotTo(\"lead\").aggregate(\"dateOfJoining:exactDistinct\");\n          base.pivotTo(\"lead\").aggregate(\"dateOfJoining:max\");\n          base.pivotTo(\"lead\").aggregate(\"dateOfJoining:min\");\n          base.pivotTo(\"lead\").aggregate(\"dateOfJoining:collectList\");\n          return base.pivotTo(\"lead\").aggregate(\"dateOfJoining:collectSet\");\n        },\n      });\n    });\n\n    it(\"has correct aggregation return types\", async () => {\n      const aggTestObjectSet = fauxObjectSet.withProperties({\n        \"maxHasSameType\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"dateOfJoining:max\"),\n        \"minHasSameType\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"dateOfJoining:min\"),\n        \"approximateDistinctNumberNoUndefined\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"employeeId:approximateDistinct\"),\n        \"exactDistinctNumberNoUndefined\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"employeeId:exactDistinct\"),\n        \"countNumberNoUndefined\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"$count\"),\n        \"sumNumber\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:sum\"),\n        \"avgNumber\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:avg\"),\n      }).fetchPage();\n\n      const result = (await aggTestObjectSet).data[0];\n      expectTypeOf((await aggTestObjectSet).data[0]).toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>, {\n          maxHasSameType: \"datetime\" | undefined;\n          minHasSameType: \"datetime\" | undefined;\n          avgNumber: \"double\" | undefined;\n          approximateDistinctNumberNoUndefined: \"integer\";\n          exactDistinctNumberNoUndefined: \"integer\";\n          countNumberNoUndefined: \"integer\";\n          sumNumber: \"double\" | undefined;\n        }>\n      >();\n\n      expectTypeOf(result.maxHasSameType).toEqualTypeOf<string | undefined>();\n      expectTypeOf(result.minHasSameType).toEqualTypeOf<string | undefined>();\n      expectTypeOf(result.approximateDistinctNumberNoUndefined).toEqualTypeOf<\n        number\n      >();\n      expectTypeOf(result.exactDistinctNumberNoUndefined).toEqualTypeOf<\n        number\n      >();\n      expectTypeOf(result.countNumberNoUndefined).toEqualTypeOf<number>();\n      expectTypeOf(result.sumNumber).toEqualTypeOf<number | undefined>();\n      expectTypeOf(result.avgNumber).toEqualTypeOf<number | undefined>();\n    });\n\n    it(\"Merged object type is equivalent to original\", () => {\n      const a = {} as EmployeeApiTest;\n      let b = {} as DerivedObjectOrInterfaceDefinition.WithDerivedProperties<\n        EmployeeApiTest,\n        {}\n      >;\n\n      b = a; // should be assignable. testing explicitly due to break in 2.2 release.\n\n      expectTypeOf<\n        EmployeeApiTest\n      >().branded.toEqualTypeOf<\n        DerivedObjectOrInterfaceDefinition.WithDerivedProperties<\n          EmployeeApiTest,\n          {}\n        >\n      >();\n    });\n  });\n  describe(\"aggregate\", () => {\n    it(\"has correct aggregation keys\", () => {\n      void fauxObjectSet.aggregate({\n        \"$select\": {\n          \"lastUpdated:max\": \"asc\",\n          \"lastUpdated:min\": \"desc\",\n          \"lastUpdated:approximateDistinct\": \"asc\",\n          \"lastUpdated:exactDistinct\": \"desc\",\n          \"dateOfJoining:max\": \"desc\",\n          \"dateOfJoining:min\": \"asc\",\n          \"dateOfJoining:approximateDistinct\": \"asc\",\n          \"dateOfJoining:exactDistinct\": \"desc\",\n        },\n      });\n    });\n  });\n  describe(\"expressions\", () => {\n    \"Test all property types\";\n    describe(\"numeric expressions\", () => {\n      it(\"provides correct methods off of selected numeric derived property definitions\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const selectedInteger = base.pivotTo(\"lead\").selectProperty(\n              \"employeeId\",\n            );\n\n            expectTypeOf(selectedInteger).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"integer\" | undefined,\n                EmployeeApiTest\n              >\n            >;\n\n            selectedInteger.add(1);\n            selectedInteger.subtract(1);\n            selectedInteger.multiply(1);\n            selectedInteger.divide(1);\n            selectedInteger.abs();\n            selectedInteger.negate();\n            selectedInteger.max(1);\n            selectedInteger.min(1);\n\n            // @ts-expect-error\n            selectedInteger.extractPart(\"1\");\n\n            expectTypeOf(\n              base.pivotTo(\"lead\").selectProperty(\n                \"performanceScore\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n            expectTypeOf(\n              base.pivotTo(\"lead\").selectProperty(\n                \"rank\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"short\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n            expectTypeOf(\n              base.pivotTo(\"lead\").selectProperty(\n                \"yearsOfExperience\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"long\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n            expectTypeOf(\n              base.pivotTo(\"lead\").selectProperty(\n                \"hourlyRate\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"float\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n\n            return selectedInteger;\n          },\n        });\n      });\n\n      it(\"provides correct methods off of selection definitions\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const selectedInteger = base.pivotTo(\"lead\").selectProperty(\n              \"employeeId\",\n            );\n\n            expectTypeOf(selectedInteger).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"integer\" | undefined,\n                EmployeeApiTest\n              >\n            >;\n\n            selectedInteger.add(1);\n            selectedInteger.subtract(1);\n            selectedInteger.multiply(1);\n            selectedInteger.divide(1);\n            selectedInteger.abs();\n            selectedInteger.negate();\n            selectedInteger.max(1);\n            selectedInteger.min(1);\n\n            // @ts-expect-error\n            selectedInteger.extractPart(\"1\");\n\n            expectTypeOf(\n              base.pivotTo(\"lead\").selectProperty(\n                \"performanceScore\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n            expectTypeOf(\n              base.pivotTo(\"lead\").selectProperty(\n                \"rank\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"short\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n            expectTypeOf(\n              base.pivotTo(\"lead\").selectProperty(\n                \"yearsOfExperience\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"long\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n            expectTypeOf(\n              base.pivotTo(\"lead\").selectProperty(\n                \"hourlyRate\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"float\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n\n            return selectedInteger;\n          },\n        });\n      });\n\n      it(\"provides correct methods off of aggregated properties\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const maxAggregation = base.pivotTo(\"lead\").aggregate(\n              \"employeeId:max\",\n            );\n\n            expectTypeOf(maxAggregation).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"integer\" | undefined,\n                EmployeeApiTest\n              >\n            >;\n\n            maxAggregation.add(1);\n            maxAggregation.subtract(1);\n            maxAggregation.multiply(1);\n            maxAggregation.divide(1);\n            maxAggregation.abs();\n            maxAggregation.negate();\n            maxAggregation.max(1);\n            maxAggregation.min(1);\n\n            expectTypeOf(\n              base.pivotTo(\"peeps\").aggregate(\"employeeId:sum\"),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n\n            expectTypeOf(\n              base.pivotTo(\"peeps\").aggregate(\"employeeId:avg\"),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n\n            expectTypeOf(\n              base.pivotTo(\"peeps\").aggregate(\"employeeId:min\"),\n            ).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"integer\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n\n            const collectList = base.pivotTo(\"peeps\").aggregate(\n              \"employeeId:collectList\",\n            );\n            expectTypeOf(\n              collectList,\n            ).toEqualTypeOf<\n              DerivedProperty.Definition<\n                \"integer\"[] | undefined,\n                EmployeeApiTest\n              >\n            >();\n\n            // @ts-expect-error\n            collectList.plus(1);\n\n            expectTypeOf(\n              base.pivotTo(\"peeps\").aggregate(\n                \"employeeId:collectList\",\n              ),\n            ).toEqualTypeOf<\n              DerivedProperty.Definition<\n                \"integer\"[] | undefined,\n                EmployeeApiTest\n              >\n            >();\n\n            return maxAggregation;\n          },\n        });\n      });\n\n      it(\"correctly coerces numeric types\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const intAndLong = base.pivotTo(\"lead\").selectProperty(\"employeeId\")\n              .add(base.selectProperty(\"yearsOfExperience\")).add(\n                base.selectProperty(\"employeeId\"),\n              );\n            expectTypeOf(intAndLong).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\"long\", EmployeeApiTest>\n            >();\n\n            const intAndDouble = base.pivotTo(\"lead\").selectProperty(\n              \"employeeId\",\n            )\n              .add(base.selectProperty(\"performanceScore\")).add(\n                base.selectProperty(\"employeeId\"),\n              );\n            expectTypeOf(intAndDouble).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\",\n                EmployeeApiTest\n              >\n            >();\n\n            const longAndDouble = base.pivotTo(\"lead\").selectProperty(\n              \"yearsOfExperience\",\n            )\n              .add(base.selectProperty(\"performanceScore\")).add(\n                base.selectProperty(\"yearsOfExperience\"),\n              );\n            expectTypeOf(longAndDouble).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\",\n                EmployeeApiTest\n              >\n            >();\n\n            const longAndLong = base.pivotTo(\"lead\").selectProperty(\n              \"yearsOfExperience\",\n            )\n              .add(base.selectProperty(\"yearsOfExperience\"));\n            expectTypeOf(longAndLong).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\"long\", EmployeeApiTest>\n            >();\n\n            const intAndInt = base.pivotTo(\"lead\").selectProperty(\"employeeId\")\n              .add(base.selectProperty(\"employeeId\"));\n            expectTypeOf(intAndInt).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"integer\",\n                EmployeeApiTest\n              >\n            >();\n\n            const intLongDoubleChain = base.pivotTo(\"lead\").selectProperty(\n              \"employeeId\",\n            ).add(base.selectProperty(\"yearsOfExperience\")).add(\n              base.selectProperty(\"employeeId\"),\n            ).add(\n              base.selectProperty(\"performanceScore\"),\n            ).add(base.selectProperty(\"employeeId\"));\n            expectTypeOf(intLongDoubleChain).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\",\n                EmployeeApiTest\n              >\n            >();\n\n            const shortAndIntReturnsInt = base.pivotTo(\"lead\").selectProperty(\n              \"rank\",\n            ).add(base.selectProperty(\"employeeId\"));\n            expectTypeOf(shortAndIntReturnsInt).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"integer\",\n                EmployeeApiTest\n              >\n            >();\n\n            const shortAndFloatReturnsDouble = base.pivotTo(\"lead\")\n              .selectProperty(\n                \"rank\",\n              ).add(base.selectProperty(\"hourlyRate\"));\n            expectTypeOf(shortAndFloatReturnsDouble).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\",\n                EmployeeApiTest\n              >\n            >();\n\n            return intLongDoubleChain;\n          },\n        });\n      });\n\n      it(\"allows adding number literals as a double\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const plus = base.pivotTo(\"lead\").selectProperty(\"employeeId\")\n              .add(1);\n            expectTypeOf(plus).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\",\n                EmployeeApiTest\n              >\n            >();\n\n            return plus;\n          },\n        });\n      });\n\n      it(\"allows adding literals via base.constant\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const plus = base.pivotTo(\"lead\").selectProperty(\"employeeId\")\n              .add(base.constant.double(1));\n            expectTypeOf(plus).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\",\n                EmployeeApiTest\n              >\n            >();\n\n            const intPlusIntReturnsInt = base.pivotTo(\"lead\").selectProperty(\n              \"employeeId\",\n            )\n              .add(base.constant.integer(1));\n            expectTypeOf(intPlusIntReturnsInt).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"integer\",\n                EmployeeApiTest\n              >\n            >();\n\n            return plus;\n          },\n        });\n      });\n\n      it(\"allows correctly typed nested property definitions\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const nested = base.pivotTo(\"lead\").selectProperty(\"employeeId\")\n              .add(\n                base.pivotTo(\"peeps\").aggregate(\"employeeId:sum\"),\n              );\n            expectTypeOf(nested).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\",\n                EmployeeApiTest\n              >\n            >();\n\n            return nested;\n          },\n        });\n      });\n\n      it(\"allows correctly types property keys off the linked OT\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const nested = base.pivotTo(\"lead\").selectProperty(\"employeeId\")\n              .add(\n                base.selectProperty(\"performanceScore\"),\n              );\n            expectTypeOf(nested).toEqualTypeOf<\n              DerivedProperty.NumericPropertyDefinition<\n                \"double\",\n                EmployeeApiTest\n              >\n            >();\n\n            return nested;\n          },\n        });\n      });\n\n      // it(\"allows correctly types property keys off the base OT\", () => {});\n    });\n    describe(\"datetime expressions\", () => {\n      it(\"provides correct methods off of datetime selections\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const selectedDatetime = base.pivotTo(\"lead\").selectProperty(\n              \"dateOfJoining\",\n            );\n\n            expectTypeOf(selectedDatetime).toEqualTypeOf<\n              DerivedProperty.DatetimePropertyDefinition<\n                \"datetime\" | undefined,\n                EmployeeApiTest\n              >\n            >();\n\n            selectedDatetime.max(base.selectProperty(\"dateOfJoining\"));\n            selectedDatetime.min(base.selectProperty(\"lastUpdated\"));\n\n            expectTypeOf(base.pivotTo(\"lead\").selectProperty(\"lastUpdated\"))\n              .toEqualTypeOf<\n                DerivedProperty.DatetimePropertyDefinition<\n                  \"timestamp\" | undefined,\n                  EmployeeApiTest\n                >\n              >();\n\n            return selectedDatetime;\n          },\n        });\n      });\n\n      it(\"correctly coerces datetime types\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const max = base.pivotTo(\"lead\").selectProperty(\"dateOfJoining\")\n              .max(base.selectProperty(\"lastUpdated\"));\n            expectTypeOf(max).toEqualTypeOf<\n              DerivedProperty.DatetimePropertyDefinition<\n                \"timestamp\",\n                EmployeeApiTest\n              >\n            >();\n\n            const min = base.pivotTo(\"lead\").selectProperty(\"dateOfJoining\")\n              .min(base.selectProperty(\"dateOfJoining\"));\n            expectTypeOf(min).toEqualTypeOf<\n              DerivedProperty.DatetimePropertyDefinition<\n                \"datetime\",\n                EmployeeApiTest\n              >\n            >();\n\n            return max;\n          },\n        });\n      });\n\n      it(\"allows adding literals via base.constant\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const dateAndDateReturnDate = base.pivotTo(\"lead\").selectProperty(\n              \"dateOfJoining\",\n            )\n              .min(base.constant.datetime(\"2025-01-01T00:00:00Z\"));\n            expectTypeOf(dateAndDateReturnDate).toEqualTypeOf<\n              DerivedProperty.DatetimePropertyDefinition<\n                \"datetime\",\n                EmployeeApiTest\n              >\n            >();\n\n            const dateAndTimeReturnTime = base.pivotTo(\"lead\").selectProperty(\n              \"dateOfJoining\",\n            )\n              .min(base.constant.timestamp(\"2025-01-01T00:00:00Z\"));\n            expectTypeOf(dateAndTimeReturnTime).toEqualTypeOf<\n              DerivedProperty.DatetimePropertyDefinition<\n                \"timestamp\",\n                EmployeeApiTest\n              >\n            >();\n\n            return dateAndTimeReturnTime;\n          },\n        });\n      });\n\n      it(\"allows correctly typed nested property definitions\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const nested = base.pivotTo(\"lead\").selectProperty(\"dateOfJoining\")\n              .min(\n                base.pivotTo(\"lead\").pivotTo(\"lead\").selectProperty(\n                  \"lastUpdated\",\n                ),\n              );\n            expectTypeOf(nested).toEqualTypeOf<\n              DerivedProperty.DatetimePropertyDefinition<\n                \"timestamp\",\n                EmployeeApiTest\n              >\n            >();\n\n            return nested;\n          },\n        });\n      });\n\n      it(\"allows correctly typed property keys off the linked OT\", () => {\n        const objectSet = fauxObjectSet.withProperties({\n          \"myProp1\": (base) => {\n            const nested = base.pivotTo(\"lead\").selectProperty(\"dateOfJoining\")\n              .min(\n                base.selectProperty(\"lastUpdated\"),\n              );\n            expectTypeOf(nested).toEqualTypeOf<\n              DerivedProperty.DatetimePropertyDefinition<\n                \"timestamp\",\n                EmployeeApiTest\n              >\n            >();\n\n            return nested;\n          },\n        });\n      });\n\n      // it(\"allows correctly typed property keys off the base OT\", () => {});\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}