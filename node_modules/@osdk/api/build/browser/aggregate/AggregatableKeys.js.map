{"version":3,"file":"AggregatableKeys.js","names":[],"sources":["AggregatableKeys.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  BaseWithPropAggregations,\n  DatetimeWithPropAggregateOption,\n  DistinctWithPropAggregateOption,\n  NumericWithPropAggregateOption,\n  ValidCollectPropertyKeysForSpecialTypes,\n} from \"../derivedProperties/WithPropertiesAggregationOptions.js\";\nimport type {\n  GetWirePropertyValueFromClient,\n} from \"../mapping/PropertyValueMapping.js\";\nimport type {\n  ObjectOrInterfaceDefinition,\n  PropertyKeys,\n} from \"../ontology/ObjectOrInterface.js\";\nimport type { CompileTimeMetadata } from \"../ontology/ObjectTypeDefinition.js\";\nimport type { WirePropertyTypes } from \"../ontology/WirePropertyTypes.js\";\n\nexport type BaseAggregateOptions = \"approximateDistinct\" | \"exactDistinct\";\n\nexport type MinMaxAggregateOption = \"min\" | \"max\";\n\nexport type DatetimeAggregateOption =\n  | MinMaxAggregateOption\n  | BaseAggregateOptions;\n\nexport type NumericAggregateOption =\n  | \"sum\"\n  | \"avg\"\n  | \"approximateDistinct\"\n  | \"exactDistinct\"\n  | MinMaxAggregateOption;\n\ntype AGG_FOR_TYPE<WIRE_TYPE extends WirePropertyTypes> = number extends\n  GetWirePropertyValueFromClient<WIRE_TYPE> ? NumericAggregateOption\n  : WIRE_TYPE extends \"datetime\" | \"timestamp\" ? DatetimeAggregateOption\n  : BaseAggregateOptions;\n\ntype WITH_PROPERTIES_AGG_FOR_TYPE<WIRE_TYPE extends WirePropertyTypes> =\n  number extends GetWirePropertyValueFromClient<WIRE_TYPE>\n    ? NumericWithPropAggregateOption\n    : WIRE_TYPE extends \"datetime\" | \"timestamp\"\n      ? DatetimeWithPropAggregateOption\n    : WIRE_TYPE extends \"string\" ? BaseWithPropAggregations\n    : WITH_PROPERTIES_AGG_FOR_SPECIAL_WIRE_TYPE<WIRE_TYPE>;\n\ntype WITH_PROPERTIES_AGG_FOR_SPECIAL_WIRE_TYPE<\n  WIRE_TYPE extends WirePropertyTypes,\n> = WIRE_TYPE extends ValidCollectPropertyKeysForSpecialTypes\n  ? BaseWithPropAggregations\n  : DistinctWithPropAggregateOption;\n\nexport type ValidAggregationKeys<\n  Q extends ObjectOrInterfaceDefinition,\n  R extends \"aggregate\" | \"withPropertiesAggregate\" = \"aggregate\",\n> = keyof (\n  & {\n    [\n      KK in AggregatableKeys<Q> as `${KK & string}:${R extends \"aggregate\"\n        ? AGG_FOR_TYPE<\n          CompileTimeMetadata<Q>[\"properties\"][KK][\"type\"]\n        >\n        : WITH_PROPERTIES_AGG_FOR_TYPE<\n          CompileTimeMetadata<Q>[\"properties\"][KK][\"type\"]\n        >}`\n    ]?: any;\n  }\n  & { $count?: any }\n);\n\nexport type AggregatableKeys<\n  Q extends ObjectOrInterfaceDefinition,\n> = keyof {\n  [P in PropertyKeys<Q>]: any;\n};\n"],"mappings":"","ignoreList":[]}