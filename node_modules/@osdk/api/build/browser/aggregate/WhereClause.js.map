{"version":3,"file":"WhereClause.js","names":["DistanceUnitMapping"],"sources":["WhereClause.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BBox, Point, Polygon } from \"geojson\";\nimport type {\n  ObjectOrInterfaceDefinition,\n} from \"../ontology/ObjectOrInterface.js\";\nimport type {\n  CompileTimeMetadata,\n  ObjectMetadata,\n} from \"../ontology/ObjectTypeDefinition.js\";\nimport type { BaseWirePropertyTypes } from \"../ontology/WirePropertyTypes.js\";\nimport type { IsNever } from \"../OsdkObjectFrom.js\";\nimport type { ArrayFilter } from \"./ArrayFilter.js\";\nimport type { BaseFilter } from \"./BaseFilter.js\";\nimport type { BooleanFilter } from \"./BooleanFilter.js\";\nimport type { DatetimeFilter } from \"./DatetimeFilter.js\";\nimport type { GeoFilter } from \"./GeoFilter.js\";\nimport type { Just } from \"./Just.js\";\nimport type { NumberFilter } from \"./NumberFilter.js\";\nimport type { StringFilter } from \"./StringFilter.js\";\n\nexport type PossibleWhereClauseFilters =\n  | \"$gt\"\n  | \"$eq\"\n  | \"$ne\"\n  | \"$isNull\"\n  | \"$contains\"\n  | \"$gte\"\n  | \"$lt\"\n  | \"$lte\"\n  | \"$within\"\n  | \"$in\"\n  | \"$intersects\"\n  | \"$startsWith\"\n  | \"$containsAllTermsInOrder\"\n  | \"$containsAnyTerm\"\n  | \"$containsAllTerms\";\n\n// the value side of this needs to match DistanceUnit from @osdk/foundry but we don't\n// want the dependency\nexport const DistanceUnitMapping: {\n  centimeter: \"CENTIMETERS\";\n  centimeters: \"CENTIMETERS\";\n  cm: \"CENTIMETERS\";\n  meter: \"METERS\";\n  meters: \"METERS\";\n  m: \"METERS\";\n  kilometer: \"KILOMETERS\";\n  kilometers: \"KILOMETERS\";\n  km: \"KILOMETERS\";\n  inch: \"INCHES\";\n  inches: \"INCHES\";\n  foot: \"FEET\";\n  feet: \"FEET\";\n  yard: \"YARDS\";\n  yards: \"YARDS\";\n  mile: \"MILES\";\n  miles: \"MILES\";\n  nautical_mile: \"NAUTICAL_MILES\";\n  nauticalMile: \"NAUTICAL_MILES\";\n  \"nautical miles\": \"NAUTICAL_MILES\";\n} = {\n  \"centimeter\": \"CENTIMETERS\",\n  \"centimeters\": \"CENTIMETERS\",\n  \"cm\": \"CENTIMETERS\",\n  \"meter\": \"METERS\",\n  \"meters\": \"METERS\",\n  \"m\": \"METERS\",\n  \"kilometer\": \"KILOMETERS\",\n  \"kilometers\": \"KILOMETERS\",\n  \"km\": \"KILOMETERS\",\n  \"inch\": \"INCHES\",\n  \"inches\": \"INCHES\",\n  \"foot\": \"FEET\",\n  \"feet\": \"FEET\",\n  \"yard\": \"YARDS\",\n  \"yards\": \"YARDS\",\n  \"mile\": \"MILES\",\n  \"miles\": \"MILES\",\n  \"nautical_mile\": \"NAUTICAL_MILES\",\n  \"nauticalMile\": \"NAUTICAL_MILES\",\n  \"nautical miles\": \"NAUTICAL_MILES\",\n} satisfies Record<\n  string,\n  | \"CENTIMETERS\"\n  | \"METERS\"\n  | \"KILOMETERS\"\n  | \"INCHES\"\n  | \"FEET\"\n  | \"YARDS\"\n  | \"MILES\"\n  | \"NAUTICAL_MILES\"\n>;\n\nexport type GeoFilter_Within = {\n  \"$within\":\n    | {\n      $distance: [number, keyof typeof DistanceUnitMapping];\n      $of: [number, number] | Readonly<Point>;\n      $bbox?: never;\n      $polygon?: never;\n    }\n    | {\n      $bbox: BBox;\n      $distance?: never;\n      $of?: never;\n      $polygon?: never;\n    }\n    | BBox\n    | {\n      $polygon: Polygon[\"coordinates\"];\n      $bbox?: never;\n      $distance?: never;\n      $of?: never;\n    }\n    | Polygon;\n};\n\nexport type GeoFilter_Intersects = {\n  \"$intersects\":\n    | {\n      $bbox: BBox;\n      $polygon?: never;\n    }\n    | BBox\n    | {\n      $polygon: Polygon[\"coordinates\"];\n      $bbox?: never;\n    }\n    | Polygon;\n};\n\ntype FilterFor<PD extends ObjectMetadata.Property> = PD[\"multiplicity\"] extends\n  true\n  ? (PD[\"type\"] extends\n    \"string\" | \"geopoint\" | \"geoshape\" | \"datetime\" | \"timestamp\"\n    ? ArrayFilter<string>\n    : (PD[\"type\"] extends boolean ? ArrayFilter<boolean>\n      : ArrayFilter<number>))\n  : PD[\"type\"] extends Record<string, BaseWirePropertyTypes> ?\n      | StructFilter<PD[\"type\"]>\n      | BaseFilter.$isNull<string>\n  : (PD[\"type\"] extends \"string\" ? StringFilter\n    : PD[\"type\"] extends \"geopoint\" | \"geoshape\" ? GeoFilter\n    : PD[\"type\"] extends \"datetime\" | \"timestamp\" ? DatetimeFilter\n    : PD[\"type\"] extends \"boolean\" ? BooleanFilter\n    : PD[\"type\"] extends\n      \"double\" | \"integer\" | \"long\" | \"float\" | \"decimal\" | \"byte\"\n      ? NumberFilter\n    : BaseFilter<string>); // FIXME we need to represent all types\n\ntype StructFilterOpts<ST extends Record<string, BaseWirePropertyTypes>> = {\n  [K in keyof ST]?: FilterFor<{ \"type\": ST[K] }>;\n};\ntype StructFilter<ST extends Record<string, BaseWirePropertyTypes>> = {\n  [K in keyof ST]: Just<K, StructFilterOpts<ST>>;\n}[keyof ST];\n\nexport interface AndWhereClause<\n  T extends ObjectOrInterfaceDefinition,\n> {\n  $and: WhereClause<T>[];\n}\n\nexport interface OrWhereClause<\n  T extends ObjectOrInterfaceDefinition,\n> {\n  $or: WhereClause<T>[];\n}\n\nexport interface NotWhereClause<\n  T extends ObjectOrInterfaceDefinition,\n> {\n  $not: WhereClause<T>;\n}\n\nexport type PropertyWhereClause<T extends ObjectOrInterfaceDefinition> = {\n  [P in keyof CompileTimeMetadata<T>[\"properties\"]]?: FilterFor<\n    CompileTimeMetadata<T>[\"properties\"][P]\n  >;\n};\n\nexport type WhereClause<\n  T extends ObjectOrInterfaceDefinition,\n> =\n  | OrWhereClause<T>\n  | AndWhereClause<T>\n  | NotWhereClause<T>\n  | (IsNever<keyof CompileTimeMetadata<T>[\"properties\"]> extends true\n    ? Record<string, never>\n    : PropertyWhereClause<T>);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAsCA;AACA;AACA,OAAO,MAAMA,mBAqBZ,GAAG;EACF,YAAY,EAAE,aAAa;EAC3B,aAAa,EAAE,aAAa;EAC5B,IAAI,EAAE,aAAa;EACnB,OAAO,EAAE,QAAQ;EACjB,QAAQ,EAAE,QAAQ;EAClB,GAAG,EAAE,QAAQ;EACb,WAAW,EAAE,YAAY;EACzB,YAAY,EAAE,YAAY;EAC1B,IAAI,EAAE,YAAY;EAClB,MAAM,EAAE,QAAQ;EAChB,QAAQ,EAAE,QAAQ;EAClB,MAAM,EAAE,MAAM;EACd,MAAM,EAAE,MAAM;EACd,MAAM,EAAE,OAAO;EACf,OAAO,EAAE,OAAO;EAChB,MAAM,EAAE,OAAO;EACf,OAAO,EAAE,OAAO;EAChB,eAAe,EAAE,gBAAgB;EACjC,cAAc,EAAE,gBAAgB;EAChC,gBAAgB,EAAE;AACpB,CAUC;;AAyD0B","ignoreList":[]}