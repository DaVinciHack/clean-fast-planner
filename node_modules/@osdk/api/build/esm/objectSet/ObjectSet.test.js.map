{"version":3,"file":"ObjectSet.test.js","names":["describe","expectTypeOf","it","test","vi","fauxObjectSet","where","fn","withProperties","fetchPage","Promise","resolve","data","asyncIter","aggregate","toEqualTypeOf","withA","base","pivotTo","withFamily","selectProperty","withMom","withParents","todo","withAggregations","$select","aggTestObjectSet","result","maxHasSameType","minHasSameType","approximateDistinctNumberNoUndefined","exactDistinctNumberNoUndefined","countNumberNoUndefined","sumNumber","avgNumber"],"sources":["ObjectSet.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { describe, expectTypeOf, it, test, vi } from \"vitest\";\n\nimport type { ObjectSet as $ObjectSet, Osdk, PropertyKeys } from \"../index.js\";\nimport type { EmployeeApiTest } from \"../test/EmployeeApiTest.js\";\n\ndescribe(\"ObjectSet\", () => {\n  const fauxObjectSet = {\n    where: vi.fn(() => {\n      return fauxObjectSet;\n    }),\n    withProperties: vi.fn(() => {\n      return fauxObjectSet;\n    }),\n    fetchPage: vi.fn(() => Promise.resolve({ data: [{}] })),\n    asyncIter: vi.fn(() => {\n      return {};\n    }),\n    aggregate: vi.fn(() => {\n      return {};\n    }),\n  } as any as EmployeeApiTest.ObjectSet;\n\n  describe(\"normal\", () => {\n    test(\"select none\", async () => {\n      const result = await fauxObjectSet.fetchPage();\n      expectTypeOf<typeof result.data[0]>().toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never>\n      >();\n    });\n\n    test(\"select one\", async () => {\n      const result = await fauxObjectSet.fetchPage({ \"$select\": [\"fullName\"] });\n      expectTypeOf<typeof result.data[0]>().toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, \"fullName\">\n      >();\n    });\n  });\n\n  describe(\".withProperties\", () => {\n    test(\"single property\", async () => {\n      const withA = fauxObjectSet.withProperties({\n        \"a\": (base) => {\n          return base.pivotTo(\"lead\").aggregate(\"class:exactDistinct\");\n        },\n      });\n\n      expectTypeOf(withA).toEqualTypeOf<\n        $ObjectSet<EmployeeApiTest, {\n          a: \"integer\";\n        }>\n      >();\n\n      const withAResults = await withA.fetchPage();\n\n      expectTypeOf<typeof withAResults[\"data\"][0]>().toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>, {\n          a: \"integer\";\n        }>\n      >();\n\n      expectTypeOf<typeof withAResults[\"data\"][0][\"a\"]>()\n        .toEqualTypeOf<number>();\n    });\n\n    test(\"multiple properties\", async () => {\n      const withFamily = fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n        \"dad\": (base) => base.pivotTo(\"lead\").selectProperty(\"fullName\"),\n        \"sister\": (base) => base.pivotTo(\"lead\").aggregate(\"class:collectList\"),\n      });\n      expectTypeOf(withFamily).toEqualTypeOf<\n        $ObjectSet<EmployeeApiTest, {\n          mom: \"integer\";\n          dad: \"string\" | undefined;\n          sister: \"string\"[] | undefined;\n        }>\n      >();\n\n      const withFamilyResults = await withFamily.fetchPage();\n\n      expectTypeOf<typeof withFamilyResults[\"data\"][0]>().toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>, {\n          mom: \"integer\";\n          dad: \"string\" | undefined;\n          sister: \"string\"[] | undefined;\n        }>\n      >();\n\n      expectTypeOf<typeof withFamilyResults[\"data\"][0][\"mom\"]>()\n        .toEqualTypeOf<number>();\n      expectTypeOf<typeof withFamilyResults[\"data\"][0][\"dad\"]>()\n        .toEqualTypeOf<string | undefined>();\n      expectTypeOf<typeof withFamilyResults[\"data\"][0][\"sister\"]>()\n        .toEqualTypeOf<string[] | undefined>();\n    });\n\n    describe(\"called in succession\", () => {\n      test(\"independently\", () => {\n        const withMom = fauxObjectSet.withProperties({\n          \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n        });\n\n        const withParents = withMom.withProperties({\n          \"dad\": (base) => base.pivotTo(\"lead\").selectProperty(\"fullName\"),\n        });\n\n        expectTypeOf(withParents).toEqualTypeOf<\n          $ObjectSet<EmployeeApiTest, {\n            mom: \"integer\";\n            dad: \"string\" | undefined;\n          }>\n        >();\n      });\n\n      test.todo(\"with calculated properties\");\n    });\n\n    describe(\"nullability\", () => {\n      it(\"count, exactDistinct, and approximateDistinct aren't nullable\", async () => {\n        const withFamily = fauxObjectSet.withProperties({\n          \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n          \"dad\": (base) =>\n            base.pivotTo(\"lead\").aggregate(\"class:exactDistinct\"),\n          \"sis\": (base) =>\n            base.pivotTo(\"lead\").aggregate(\"class:approximateDistinct\"),\n        });\n\n        const withFamilyResults = await withFamily.fetchPage();\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>().toEqualTypeOf<\n          Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>, {\n            mom: \"integer\";\n            dad: \"integer\";\n            sis: \"integer\";\n          }>\n        >();\n      });\n\n      it(\n        \"collectToSet, collectToList, selectProperty, and numeric aggregations are nullable\",\n        async () => {\n          const withAggregations = fauxObjectSet.withProperties({\n            \"collectSet\": (base) =>\n              base.pivotTo(\"lead\").aggregate(\"class:collectSet\"),\n            \"select\": (base) => base.pivotTo(\"lead\").selectProperty(\"fullName\"),\n            \"collectList\": (base) =>\n              base.pivotTo(\"lead\").aggregate(\"class:collectList\"),\n            \"min\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:max\"),\n            \"max\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:min\"),\n            \"sum\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:sum\"),\n            \"avg\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:avg\"),\n            \"approximatePercentile\": (base) =>\n              base.pivotTo(\"lead\").aggregate(\n                \"employeeId:approximatePercentile\",\n              ),\n          });\n\n          const withAggregationResults = await withAggregations.fetchPage();\n\n          expectTypeOf<typeof withAggregationResults[\"data\"][0]>()\n            .toEqualTypeOf<\n              Osdk.Instance<\n                EmployeeApiTest,\n                never,\n                PropertyKeys<EmployeeApiTest>,\n                {\n                  collectSet: \"string\"[] | undefined;\n                  select: \"string\" | undefined;\n                  collectList: \"string\"[] | undefined;\n                  min: \"double\" | undefined;\n                  max: \"double\" | undefined;\n                  sum: \"double\" | undefined;\n                  avg: \"double\" | undefined;\n                  approximatePercentile: \"double\" | undefined;\n                }\n              >\n            >();\n        },\n      );\n    });\n\n    describe(\"fetch functions return correct Osdk.Instance\", () => {\n      const withFamily = fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n        \"dad\": (base) => base.pivotTo(\"lead\").selectProperty(\"fullName\"),\n        \"sister\": (base) => base.pivotTo(\"lead\").aggregate(\"class:collectList\"),\n      });\n\n      it(\"works with .where\", async () => {\n        const where = withFamily.where({ \"mom\": 1 });\n        const whereResults = await where.fetchPage();\n\n        expectTypeOf<typeof where>().toEqualTypeOf<typeof withFamily>();\n        expectTypeOf<typeof whereResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              PropertyKeys<EmployeeApiTest>,\n              {\n                mom: \"integer\";\n                dad: \"string\" | undefined;\n                sister: \"string\"[] | undefined;\n              }\n            >\n          >();\n      });\n\n      it(\"works with .async\", () => {\n        const asyncIter = withFamily.asyncIter();\n        expectTypeOf<typeof asyncIter>().toEqualTypeOf<\n          AsyncIterableIterator<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              PropertyKeys<EmployeeApiTest>,\n              {\n                mom: \"integer\";\n                dad: \"string\" | undefined;\n                sister: \"string\"[] | undefined;\n              }\n            >\n          >\n        >();\n      });\n\n      it(\"Works with no select\", async () => {\n        const withFamilyResults = await withFamily.fetchPage();\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              PropertyKeys<EmployeeApiTest>,\n              {\n                mom: \"integer\";\n                dad: \"string\" | undefined;\n                sister: \"string\"[] | undefined;\n              }\n            >\n          >();\n      });\n\n      it(\"Works with selecting all RDPs\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\"mom\", \"dad\", \"sister\"],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<EmployeeApiTest, never, never, {\n              mom: \"integer\";\n              dad: \"string\" | undefined;\n              sister: \"string\"[] | undefined;\n            }>\n          >();\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0][\"mom\"]>()\n          .toEqualTypeOf<number>();\n      });\n\n      it(\"Works with selecting some RDPs\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\"mom\"],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<EmployeeApiTest, never, never, {\n              mom: \"integer\";\n            }>\n          >();\n      });\n\n      it(\"Works with selecting all non-RDP's\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\n            \"class\",\n            \"fullName\",\n            \"employeeId\",\n            \"attachment\",\n            \"geopoint\",\n            \"timeseries\",\n            \"mediaReference\",\n            \"geotimeSeriesReference\",\n            \"isActive\",\n            \"lastClockIn\",\n            \"dateOfBirth\",\n          ],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              PropertyKeys<EmployeeApiTest>,\n              {}\n            >\n          >();\n        expectTypeOf<typeof withFamilyResults[\"data\"][0][\"class\"]>()\n          .toEqualTypeOf<\n            string | undefined\n          >();\n      });\n\n      it(\"Works with selecting some non-RDP's\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\"class\"],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<EmployeeApiTest, never, \"class\", {}>\n          >();\n      });\n\n      it(\"Works with selecting a mix\", async () => {\n        const withFamilyResults = await withFamily.fetchPage({\n          $select: [\"class\", \"mom\"],\n        });\n\n        expectTypeOf<typeof withFamilyResults[\"data\"][0]>()\n          .toEqualTypeOf<\n            Osdk.Instance<\n              EmployeeApiTest,\n              never,\n              \"class\",\n              { mom: \"integer\" }\n            >\n          >();\n      });\n    });\n\n    it(\"allows extracting the type\", () => {\n      const objectSet = fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n      });\n\n      type ObjectSetType = typeof objectSet;\n\n      expectTypeOf<ObjectSetType>().toEqualTypeOf<\n        $ObjectSet<EmployeeApiTest, {\n          mom: \"integer\";\n        }>\n      >();\n\n      const objectSet2 = fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n      }) satisfies ObjectSetType;\n    });\n\n    it(\"Defining the Type\", () => {\n      type ObjectSetType = $ObjectSet<\n        EmployeeApiTest,\n        {\n          mom: \"integer\" | undefined;\n        }\n      >;\n\n      fauxObjectSet.withProperties({\n        \"mom\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n      }) satisfies ObjectSetType;\n    });\n\n    it(\"has correct aggregation keys\", () => {\n      fauxObjectSet.withProperties({\n        \"integer\": (base) => base.pivotTo(\"lead\").aggregate(\"$count\"),\n        \"integerNumericAgg\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"employeeId:sum\"),\n        \"string\": (base) => base.pivotTo(\"lead\").aggregate(\"class:collectList\"),\n        \"stringDoesNotHaveNumericAgg\": (base) =>\n          // @ts-expect-error\n          base.pivotTo(\"lead\").aggregate(\"class:sum\"),\n        \"isActive\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"isActive:approximateDistinct\"),\n        \"attachment\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"attachment:collectList\"),\n        \"geopoint\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"geopoint:collectList\"),\n        \"numericTimeseries\": (base) =>\n          // @ts-expect-error\n          base.pivotTo(\"lead\").aggregate(\"timeseries:sum\"),\n        \"numericTimeseriesExactDistinct\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"timeseries:exactDistinct\"),\n        \"mediaReference\": (base) =>\n          // @ts-expect-error\n          base.pivotTo(\"lead\").aggregate(\"mediaReference:avg\"),\n        \"mediaReferenceExactDistinct\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"mediaReference:exactDistinct\"),\n        \"geotimeSeriesReference\": (base) =>\n          // @ts-expect-error\n          base.pivotTo(\"lead\").aggregate(\"geotimeSeriesReference:sum\"),\n        \"geotimeSeriesReferenceExactDistinct\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\n            \"geotimeSeriesReference:exactDistinct\",\n          ),\n        \"lastClockIn\": (base) => {\n          base.pivotTo(\"lead\").aggregate(\"lastClockIn:approximateDistinct\");\n          base.pivotTo(\"lead\").aggregate(\"lastClockIn:exactDistinct\");\n          base.pivotTo(\"lead\").aggregate(\"lastClockIn:max\");\n          base.pivotTo(\"lead\").aggregate(\"lastClockIn:min\");\n          base.pivotTo(\"lead\").aggregate(\"lastClockIn:collectList\");\n          return base.pivotTo(\"lead\").aggregate(\"lastClockIn:collectSet\");\n        },\n        \"dateOfBirth\": (base) => {\n          base.pivotTo(\"lead\").aggregate(\"dateOfBirth:approximateDistinct\");\n          base.pivotTo(\"lead\").aggregate(\"dateOfBirth:exactDistinct\");\n          base.pivotTo(\"lead\").aggregate(\"dateOfBirth:max\");\n          base.pivotTo(\"lead\").aggregate(\"dateOfBirth:min\");\n          base.pivotTo(\"lead\").aggregate(\"dateOfBirth:collectList\");\n          return base.pivotTo(\"lead\").aggregate(\"dateOfBirth:collectSet\");\n        },\n      });\n    });\n\n    it(\"has correct aggregation return types\", async () => {\n      const aggTestObjectSet = fauxObjectSet.withProperties({\n        \"maxHasSameType\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"dateOfBirth:max\"),\n        \"minHasSameType\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"dateOfBirth:min\"),\n        \"approximateDistinctNumberNoUndefined\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"employeeId:approximateDistinct\"),\n        \"exactDistinctNumberNoUndefined\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"employeeId:exactDistinct\"),\n        \"countNumberNoUndefined\": (base) =>\n          base.pivotTo(\"lead\").aggregate(\"$count\"),\n        \"sumNumber\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:sum\"),\n        \"avgNumber\": (base) => base.pivotTo(\"lead\").aggregate(\"employeeId:avg\"),\n      }).fetchPage();\n\n      const result = (await aggTestObjectSet).data[0];\n      expectTypeOf((await aggTestObjectSet).data[0]).toEqualTypeOf<\n        Osdk.Instance<EmployeeApiTest, never, PropertyKeys<EmployeeApiTest>, {\n          maxHasSameType: \"datetime\" | undefined;\n          minHasSameType: \"datetime\" | undefined;\n          avgNumber: \"double\" | undefined;\n          approximateDistinctNumberNoUndefined: \"integer\";\n          exactDistinctNumberNoUndefined: \"integer\";\n          countNumberNoUndefined: \"integer\";\n          sumNumber: \"double\" | undefined;\n        }>\n      >();\n\n      expectTypeOf(result.maxHasSameType).toEqualTypeOf<string | undefined>();\n      expectTypeOf(result.minHasSameType).toEqualTypeOf<string | undefined>();\n      expectTypeOf(result.approximateDistinctNumberNoUndefined).toEqualTypeOf<\n        number\n      >();\n      expectTypeOf(result.exactDistinctNumberNoUndefined).toEqualTypeOf<\n        number\n      >();\n      expectTypeOf(result.countNumberNoUndefined).toEqualTypeOf<number>();\n      expectTypeOf(result.sumNumber).toEqualTypeOf<number | undefined>();\n      expectTypeOf(result.avgNumber).toEqualTypeOf<number | undefined>();\n    });\n  });\n  describe(\"aggregate\", () => {\n    it(\"has correct aggregation keys\", () => {\n      void fauxObjectSet.aggregate({\n        \"$select\": {\n          \"lastClockIn:max\": \"asc\",\n          \"lastClockIn:min\": \"desc\",\n          \"lastClockIn:approximateDistinct\": \"asc\",\n          \"lastClockIn:exactDistinct\": \"desc\",\n          \"dateOfBirth:max\": \"desc\",\n          \"dateOfBirth:min\": \"asc\",\n          \"dateOfBirth:approximateDistinct\": \"asc\",\n          \"dateOfBirth:exactDistinct\": \"desc\",\n        },\n      });\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}