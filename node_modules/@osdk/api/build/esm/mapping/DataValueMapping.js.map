{"version":3,"file":"DataValueMapping.js","names":[],"sources":["DataValueMapping.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Attachment, AttachmentUpload } from \"../object/Attachment.js\";\nimport type { MediaReference, MediaUpload } from \"../object/Media.js\";\n\n/**\n * Map from the DataValue type to the typescript type that we return\n */\nexport interface DataValueWireToClient {\n  attachment: Attachment;\n  boolean: boolean;\n  byte: number;\n  datetime: string;\n  date: string;\n  decimal: string;\n  float: number;\n  double: number;\n  integer: number;\n  long: string;\n  marking: string;\n  null: null;\n  short: number;\n  string: string;\n  timestamp: string;\n  mediaReference: MediaReference;\n  twoDimensionalAggregation: {\n    key: AllowedBucketKeyTypes;\n    value: AllowedBucketTypes;\n  }[];\n  threeDimensionalAggregation: {\n    key: AllowedBucketKeyTypes;\n    groups: { key: AllowedBucketKeyTypes; value: AllowedBucketTypes }[];\n  }[];\n  struct: Record<string, any>;\n  set: Set<any>;\n  objectType: string;\n  geohash: GeoJSON.Point;\n  geoshape: GeoJSON.GeoJSON;\n}\n\n/**\n * Map from the DataValue type to the typescript type that we accept\n */\nexport interface DataValueClientToWire {\n  attachment: string | AttachmentUpload | Blob & { readonly name: string };\n  boolean: boolean;\n  byte: number;\n  datetime: string;\n  date: string;\n  decimal: string | number;\n  float: number;\n  double: number;\n  integer: number;\n  long: string | number;\n  marking: string;\n  null: null;\n  short: number;\n  string: string;\n  timestamp: string;\n  set: Set<any>;\n  mediaReference: MediaReference | MediaUpload;\n  twoDimensionalAggregation: {\n    key: AllowedBucketKeyTypes;\n    value: AllowedBucketTypes;\n  }[];\n  threeDimensionalAggregation: {\n    key: AllowedBucketKeyTypes;\n    groups: { key: AllowedBucketKeyTypes; value: AllowedBucketTypes }[];\n  }[];\n  struct: Record<string, any>;\n  objectType: string;\n  geohash: GeoJSON.Point;\n  geoshape: GeoJSON.GeoJSON;\n}\n\nexport type AllowedBucketTypes = string | number | boolean;\nexport type AllowedBucketKeyTypes =\n  | AllowedBucketTypes\n  | {\n    startValue: AllowedBucketTypes;\n    endValue: AllowedBucketTypes;\n  };\n"],"mappings":"","ignoreList":[]}