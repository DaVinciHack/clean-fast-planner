{"version":3,"file":"Queries.js","names":["QueryParam","QueryResult"],"sources":["Queries.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  DataValueClientToWire,\n  DataValueWireToClient,\n} from \"../mapping/DataValueMapping.js\";\nimport type { ObjectSet } from \"../objectSet/ObjectSet.js\";\nimport type { ObjectTypeDefinition } from \"../ontology/ObjectTypeDefinition.js\";\nimport type {\n  AggregationKeyTypes,\n  AggregationRangeKeyTypes,\n  AggregationValueTypes,\n} from \"../ontology/QueryDefinition.js\";\nimport type { OsdkBase } from \"../OsdkBase.js\";\nimport type { OsdkObjectPrimaryKeyType } from \"../OsdkObjectPrimaryKeyType.js\";\nimport type {\n  AggKeyClientToWire,\n  AggKeyWireToClient,\n  AggValueClientToWire,\n  AggValueWireToClient,\n  ThreeDimensionalAggregation,\n  TwoDimensionalAggregation,\n} from \"./Aggregations.js\";\n\n/**\n * Helper types for converting query definition parameter types to typescript types\n */\nexport namespace QueryParam {\n  /**\n   * Helper type to convert action definition parameter primitives to typescript types\n   */\n  export type PrimitiveType<T extends keyof DataValueClientToWire> =\n    DataValueClientToWire[T];\n\n  /**\n   * Helper type to convert action definition parameter object types to typescript types\n   */\n  export type ObjectType<T extends ObjectTypeDefinition> =\n    | OsdkBase<T>\n    | OsdkObjectPrimaryKeyType<T>;\n\n  /**\n   * Helper type to convert action definition parameter object sets to typescript types\n   */\n  export type ObjectSetType<T extends ObjectTypeDefinition> = ObjectSet<T>;\n\n  export type RangeKey<T extends AggregationRangeKeyTypes> = AggKeyClientToWire<\n    \"range\",\n    T\n  >;\n\n  export type TwoDimensionalAggregationType<\n    T extends AggregationKeyTypes | RangeKey<any>,\n    V extends AggregationValueTypes,\n  > = TwoDimensionalAggregation<\n    T extends AggregationKeyTypes ? AggKeyClientToWire<T> : T,\n    AggValueClientToWire<V>\n  >;\n\n  export type ThreeDimensionalAggregationType<\n    OUT extends AggregationKeyTypes | RangeKey<any>,\n    IN extends AggregationKeyTypes | RangeKey<any>,\n    V extends AggregationValueTypes,\n  > = ThreeDimensionalAggregation<\n    OUT extends AggregationKeyTypes ? AggKeyClientToWire<OUT> : OUT,\n    IN extends AggregationKeyTypes ? AggKeyClientToWire<IN> : IN,\n    AggValueClientToWire<V>\n  >;\n}\n\n/**\n * Helper types for converting query result types to typescript types\n */\nexport namespace QueryResult {\n  /**\n   * Helper type to convert action definition parameter primitives to typescript types\n   */\n  export type PrimitiveType<T extends keyof DataValueClientToWire> =\n    DataValueWireToClient[T];\n\n  /**\n   * Helper type to convert action definition parameter object types to typescript types\n   */\n  export type ObjectType<T extends ObjectTypeDefinition> = OsdkBase<T>;\n\n  /**\n   * Helper type to convert action definition parameter object sets to typescript types\n   */\n  export type ObjectSetType<T extends ObjectTypeDefinition> = ObjectSet<\n    T\n  >;\n\n  export type RangeKey<T extends AggregationRangeKeyTypes> = AggKeyWireToClient<\n    \"range\",\n    T\n  >;\n\n  export type TwoDimensionalAggregationType<\n    T extends AggregationKeyTypes | RangeKey<any>,\n    V extends AggregationValueTypes,\n  > = TwoDimensionalAggregation<\n    T extends AggregationKeyTypes ? AggKeyWireToClient<T> : T,\n    AggValueWireToClient<V>\n  >;\n\n  export type ThreeDimensionalAggregationType<\n    OUT extends AggregationKeyTypes | RangeKey<any>,\n    IN extends AggregationKeyTypes | RangeKey<any>,\n    V extends AggregationValueTypes,\n  > = ThreeDimensionalAggregation<\n    OUT extends AggregationKeyTypes ? AggKeyWireToClient<OUT> : OUT,\n    IN extends AggregationKeyTypes ? AggKeyWireToClient<IN> : IN,\n    AggValueWireToClient<V>\n  >;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACA;AACA;AAFA,WAGiBA,UAAU;AA2C3B;AACA;AACA;AAFA,WAGiBC,WAAW","ignoreList":[]}