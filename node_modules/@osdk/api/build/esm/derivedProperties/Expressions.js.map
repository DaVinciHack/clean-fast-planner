{"version":3,"file":"Expressions.js","names":[],"sources":["Expressions.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ObjectOrInterfaceDefinition,\n  PropertyKeys,\n} from \"../ontology/ObjectOrInterface.js\";\nimport type { CompileTimeMetadata } from \"../ontology/ObjectTypeDefinition.js\";\nimport type { SimplePropertyDef } from \"../ontology/SimplePropertyDef.js\";\nimport type { WirePropertyTypes } from \"../ontology/WirePropertyTypes.js\";\nimport type { DerivedProperty } from \"./DerivedProperty.js\";\n\ntype WithPropertiesNumerics =\n  | \"integer\"\n  | \"double\"\n  | \"float\"\n  | \"short\"\n  | \"long\";\n\ntype WithPropertiesDatetime =\n  | \"datetime\"\n  | \"timestamp\";\n\nexport type DefinitionForType<\n  Q extends ObjectOrInterfaceDefinition,\n  T extends SimplePropertyDef,\n> = SimplePropertyDef.ExtractMultiplicity<T> extends \"array\"\n  ? DerivedProperty.Definition<T, Q>\n  : SimplePropertyDef.ExtractWirePropertyType<T> extends WithPropertiesNumerics\n    ? DerivedProperty.NumericPropertyDefinition<T, Q>\n  : SimplePropertyDef.ExtractWirePropertyType<T> extends WithPropertiesDatetime\n    ? DerivedProperty.DatetimePropertyDefinition<T, Q>\n  : DerivedProperty.Definition<T, Q>;\n\ntype NumericExpressionArg<Q extends ObjectOrInterfaceDefinition> =\n  | number\n  | DerivedProperty.NumericPropertyDefinition<any, Q>;\n\ntype ReturnTypeForNumericMethod<\n  Q extends ObjectOrInterfaceDefinition,\n  LEFT extends WirePropertyTypes,\n  RIGHT extends WirePropertyTypes,\n> = \"double\" extends (LEFT | RIGHT) ? DerivedProperty.NumericPropertyDefinition<\n    SimplePropertyDef.Make<\"double\", \"non-nullable\", \"single\">,\n    Q\n  >\n  : \"float\" extends (LEFT | RIGHT) ? DerivedProperty.NumericPropertyDefinition<\n      SimplePropertyDef.Make<\"double\", \"non-nullable\", \"single\">,\n      Q\n    >\n  : \"long\" extends (LEFT | RIGHT) ? DerivedProperty.NumericPropertyDefinition<\n      SimplePropertyDef.Make<\"long\", \"non-nullable\", \"single\">,\n      Q\n    >\n  : DerivedProperty.NumericPropertyDefinition<\n    SimplePropertyDef.Make<\"integer\", \"non-nullable\", \"single\">,\n    Q\n  >;\n\ntype ReturnTypeForDatetimeMethod<\n  Q extends ObjectOrInterfaceDefinition,\n  LEFT extends WirePropertyTypes,\n  RIGHT extends WirePropertyTypes,\n> = \"timestamp\" extends (LEFT | RIGHT)\n  ? DerivedProperty.DatetimePropertyDefinition<\n    SimplePropertyDef.Make<\"timestamp\", \"non-nullable\", \"single\">,\n    Q\n  >\n  : DerivedProperty.DatetimePropertyDefinition<\n    SimplePropertyDef.Make<\"datetime\", \"non-nullable\", \"single\">,\n    Q\n  >;\n\ntype ExtractWirePropertyTypeFromNumericArg<\n  Q extends ObjectOrInterfaceDefinition,\n  ARG extends NumericExpressionArg<Q>,\n> = ARG extends number ? \"double\"\n  : ARG extends DerivedProperty.NumericPropertyDefinition<infer T, Q>\n    ? T extends SimplePropertyDef ? SimplePropertyDef.ExtractWirePropertyType<T>\n    : never\n  : ARG extends PropertyKeys.Filtered<Q, WithPropertiesNumerics>\n    ? NonNullable<CompileTimeMetadata<Q>[\"properties\"][ARG][\"type\"]>\n  : never;\n\nexport type NumericExpressions<\n  Q extends ObjectOrInterfaceDefinition,\n  LEFT_PROPERTY_TYPE extends SimplePropertyDef,\n> = {\n  readonly add: <A extends NumericExpressionArg<Q>>(\n    value: A,\n  ) => ReturnTypeForNumericMethod<\n    Q,\n    SimplePropertyDef.ExtractWirePropertyType<LEFT_PROPERTY_TYPE>,\n    ExtractWirePropertyTypeFromNumericArg<Q, A>\n  >;\n\n  readonly subtract: <A extends NumericExpressionArg<Q>>(\n    value: A,\n  ) => ReturnTypeForNumericMethod<\n    Q,\n    SimplePropertyDef.ExtractWirePropertyType<LEFT_PROPERTY_TYPE>,\n    ExtractWirePropertyTypeFromNumericArg<Q, A>\n  >;\n\n  readonly multiply: <A extends NumericExpressionArg<Q>>(\n    value: A,\n  ) => ReturnTypeForNumericMethod<\n    Q,\n    SimplePropertyDef.ExtractWirePropertyType<LEFT_PROPERTY_TYPE>,\n    ExtractWirePropertyTypeFromNumericArg<Q, A>\n  >;\n\n  readonly divide: <A extends NumericExpressionArg<Q>>(\n    value: A,\n  ) => ReturnTypeForNumericMethod<\n    Q,\n    SimplePropertyDef.ExtractWirePropertyType<LEFT_PROPERTY_TYPE>,\n    ExtractWirePropertyTypeFromNumericArg<Q, A>\n  >;\n\n  readonly abs: () => DerivedProperty.NumericPropertyDefinition<\n    LEFT_PROPERTY_TYPE,\n    Q\n  >;\n\n  readonly negate: () => DerivedProperty.NumericPropertyDefinition<\n    LEFT_PROPERTY_TYPE,\n    Q\n  >;\n\n  readonly max: <A extends NumericExpressionArg<Q>>(\n    value: A,\n  ) => ReturnTypeForNumericMethod<\n    Q,\n    SimplePropertyDef.ExtractWirePropertyType<LEFT_PROPERTY_TYPE>,\n    ExtractWirePropertyTypeFromNumericArg<Q, A>\n  >;\n\n  readonly min: <A extends NumericExpressionArg<Q>>(\n    value: A,\n  ) => ReturnTypeForNumericMethod<\n    Q,\n    SimplePropertyDef.ExtractWirePropertyType<LEFT_PROPERTY_TYPE>,\n    ExtractWirePropertyTypeFromNumericArg<Q, A>\n  >;\n};\n\ntype DatetimeExpressionArg<Q extends ObjectOrInterfaceDefinition> =\n  DerivedProperty.DatetimePropertyDefinition<any, Q>;\n\ntype ExtractPropertyTypeFromDatetimeArg<\n  Q extends ObjectOrInterfaceDefinition,\n  ARG extends DatetimeExpressionArg<Q>,\n> = ARG extends DerivedProperty.DatetimePropertyDefinition<infer T, Q>\n  ? T extends SimplePropertyDef ? SimplePropertyDef.ExtractWirePropertyType<T>\n  : never\n  : ARG extends PropertyKeys.Filtered<Q, WithPropertiesDatetime>\n    ? NonNullable<CompileTimeMetadata<Q>[\"properties\"][ARG][\"type\"]>\n  : never;\n\nexport type DatetimeExpressions<\n  Q extends ObjectOrInterfaceDefinition,\n  LEFT_PROPERTY_TYPE extends SimplePropertyDef,\n> = {\n  readonly min: <A extends DatetimeExpressionArg<Q>>(\n    value: A,\n  ) => ReturnTypeForDatetimeMethod<\n    Q,\n    SimplePropertyDef.ExtractWirePropertyType<LEFT_PROPERTY_TYPE>,\n    ExtractPropertyTypeFromDatetimeArg<Q, A>\n  >;\n  readonly max: (\n    value: DatetimeExpressionArg<Q>,\n  ) => ReturnTypeForDatetimeMethod<\n    Q,\n    SimplePropertyDef.ExtractWirePropertyType<LEFT_PROPERTY_TYPE>,\n    ExtractPropertyTypeFromDatetimeArg<Q, typeof value>\n  >;\n  readonly extractPart: (\n    value: DerivedProperty.ValidParts,\n  ) => DerivedProperty.Definition<\n    SimplePropertyDef.Make<\"string\", \"non-nullable\", \"single\">,\n    Q\n  >;\n};\n"],"mappings":"","ignoreList":[]}