{"version":3,"file":"SimplePropertyDef.js","names":["SimplePropertyDef"],"sources":["SimplePropertyDef.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { GetClientPropertyValueFromWire } from \"../mapping/PropertyValueMapping.js\";\nimport type { ObjectMetadata, PropertyDef } from \"./ObjectTypeDefinition.js\";\nimport type { WirePropertyTypes } from \"./WirePropertyTypes.js\";\n\nexport type SimplePropertyDef =\n  | WirePropertyTypes\n  | undefined\n  | Array<WirePropertyTypes>;\n\nexport namespace SimplePropertyDef {\n  export type Make<\n    T extends WirePropertyTypes,\n    N extends boolean | undefined,\n    M extends boolean | undefined,\n  > =\n    // while it is cleaner to just do this as the union of two conditionals, it\n    // actually makes it so that it can't be derived inline which we want\n    // to keep things simple so instead of :\n    // | (P[\"multiplicity\"] extends true ? Array<P[\"type\"]> : P[\"type\"])\n    // | (P[\"nullable\"] extends true ? undefined : never);\n    // we do:\n    M extends true ? N extends true ? Array<T> | undefined\n      : Array<T>\n      : N extends true ? T | undefined\n      : T;\n\n  export type FromPropertyMetadata<\n    P extends ObjectMetadata.Property,\n  > = Make<P[\"type\"], P[\"nullable\"], P[\"multiplicity\"]>;\n\n  // exported for testing\n  export type ExtractMultiplicity<\n    T extends\n      | WirePropertyTypes\n      | undefined\n      | Array<WirePropertyTypes>,\n  > = NonNullable<T> extends Array<any> ? \"array\" : \"single\";\n\n  // exported for testing\n  export type ExtractWirePropertyType<\n    T extends SimplePropertyDef,\n  > = T extends Array<infer Z> ? NonNullable<Z> : NonNullable<T>;\n\n  // exported for testing\n  export type ExtractNullable<\n    T extends SimplePropertyDef,\n  > = [undefined] extends [T] ? \"nullable\"\n    : [[undefined]] extends [T] ? \"nullable\"\n    : \"non-nullable\";\n\n  export type ToPropertyDef<S extends SimplePropertyDef> = PropertyDef<\n    SimplePropertyDef.ExtractWirePropertyType<S>,\n    SimplePropertyDef.ExtractNullable<S>,\n    SimplePropertyDef.ExtractMultiplicity<S>\n  >;\n\n  export type ExtractRuntimeBaseType<S extends SimplePropertyDef> =\n    GetClientPropertyValueFromWire<\n      SimplePropertyDef.ExtractWirePropertyType<S>\n    >;\n\n  export type ToRuntimeProperty<S extends SimplePropertyDef> =\n    ExtractMultiplicity<S> extends \"array\"\n      ? ExtractNullable<S> extends \"nullable\"\n        ? Array<ExtractRuntimeBaseType<S>> | undefined\n      : Array<ExtractRuntimeBaseType<S>>\n      : ExtractNullable<S> extends \"nullable\"\n        ? ExtractRuntimeBaseType<S> | undefined\n      : ExtractRuntimeBaseType<S>;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,WAyBiBA,iBAAiB","ignoreList":[]}