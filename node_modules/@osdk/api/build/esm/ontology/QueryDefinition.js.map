{"version":3,"file":"QueryDefinition.js","names":[],"sources":["QueryDefinition.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { OsdkMetadata } from \"../OsdkMetadata.js\";\nimport type { ObjectTypeDefinition } from \"./ObjectTypeDefinition.js\";\n\nexport interface QueryMetadata {\n  type: \"query\";\n  apiName: string;\n  description?: string;\n  displayName?: string;\n  version: string;\n  parameters: Record<string, QueryParameterDefinition<any>>;\n  output: QueryDataTypeDefinition;\n  rid: string;\n}\n\nexport interface QueryCompileTimeMetadata<T> {\n  signature: T;\n}\n\nexport interface QueryDefinition<T = any> {\n  type: \"query\";\n  apiName: string;\n  version?: string;\n  isFixedVersion?: boolean;\n  osdkMetadata?: OsdkMetadata;\n  __DefinitionMetadata?:\n    & QueryCompileTimeMetadata<T>\n    & QueryMetadata;\n}\n\nexport type QueryParameterDefinition<\n  T_Target extends ObjectTypeDefinition = any,\n> = {\n  description?: string;\n} & QueryDataTypeDefinition<T_Target>;\n\nexport type QueryDataTypeDefinition<\n  T_Target extends ObjectTypeDefinition = any,\n> =\n  | PrimitiveDataType\n  | ObjectQueryDataType<T_Target>\n  | ObjectSetQueryDataType<T_Target>\n  | SetQueryDataType\n  | UnionQueryDataType\n  | StructQueryDataType\n  | TwoDimensionalAggregationDataType\n  | ThreeDimensionalAggregationDataType\n  | MapDataType;\n\nexport type BaseQueryDataTypeDefinition<T extends string> = {\n  multiplicity?: boolean;\n  nullable?: boolean;\n  type: T;\n};\n\nexport type WireQueryDataTypes =\n  | \"double\"\n  | \"float\"\n  | \"integer\"\n  | \"long\"\n  | \"boolean\"\n  | \"string\"\n  | \"date\"\n  | \"timestamp\"\n  | \"attachment\";\n\nexport type PrimitiveDataType<\n  Q extends WireQueryDataTypes = WireQueryDataTypes,\n> = BaseQueryDataTypeDefinition<Q>;\n\nexport interface ObjectQueryDataType<\n  T_Target extends ObjectTypeDefinition = never,\n> extends BaseQueryDataTypeDefinition<\"object\"> {\n  object: string;\n  __OsdkTargetType?: T_Target;\n}\n\nexport interface ObjectSetQueryDataType<\n  T_Target extends ObjectTypeDefinition = never,\n> extends BaseQueryDataTypeDefinition<\"objectSet\"> {\n  objectSet: string;\n  __OsdkTargetType?: T_Target;\n}\n\nexport interface SetQueryDataType extends BaseQueryDataTypeDefinition<\"set\"> {\n  set: QueryDataTypeDefinition;\n}\n\nexport interface UnionQueryDataType\n  extends BaseQueryDataTypeDefinition<\"union\">\n{\n  union: ReadonlyArray<QueryDataTypeDefinition>;\n}\n\nexport interface StructQueryDataType\n  extends BaseQueryDataTypeDefinition<\"struct\">\n{\n  struct: Record<string, QueryDataTypeDefinition>;\n}\n\nexport interface TwoDimensionalAggregationDataType\n  extends BaseQueryDataTypeDefinition<\"twoDimensionalAggregation\">\n{\n  twoDimensionalAggregation: TwoDimensionalQueryAggregationDefinition;\n}\n\nexport interface ThreeDimensionalAggregationDataType\n  extends BaseQueryDataTypeDefinition<\"threeDimensionalAggregation\">\n{\n  threeDimensionalAggregation: ThreeDimensionalQueryAggregationDefinition;\n}\n\nexport interface MapDataType extends BaseQueryDataTypeDefinition<\"map\"> {\n  keyType: QueryDataTypeDefinition;\n  valueType: QueryDataTypeDefinition;\n}\n\nexport type AggregationKeyDataType<V = any> =\n  | SimpleAggregationKeyDataType<V>\n  | RangeAggregationKeyDataType<V>;\n\nexport interface SimpleAggregationKeyDataType<V = any> {\n  keyType: Exclude<AggregationKeyTypes, \"range\">;\n  valueType: V;\n}\nexport interface RangeAggregationKeyDataType<V = any> {\n  keyType: \"range\";\n  keySubtype: AggregationRangeKeyTypes;\n  valueType: V;\n}\n\nexport type TwoDimensionalQueryAggregationDefinition = AggregationKeyDataType<\n  AggregationValueTypes\n>;\n\nexport type ThreeDimensionalQueryAggregationDefinition = AggregationKeyDataType<\n  TwoDimensionalQueryAggregationDefinition\n>;\n\nexport type AggregationKeyTypes =\n  | \"boolean\"\n  | \"string\"\n  | \"date\"\n  | \"double\"\n  | \"integer\"\n  | \"timestamp\"\n  | \"range\";\n\nexport type AggregationRangeKeyTypes =\n  | \"date\"\n  | \"double\"\n  | \"integer\"\n  | \"timestamp\";\n\nexport type AggregationValueTypes = \"date\" | \"double\" | \"timestamp\";\n"],"mappings":"","ignoreList":[]}