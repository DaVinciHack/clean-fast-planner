{"version":3,"file":"ObjectSpecifier.test.js","names":["describe","expectTypeOf","it","vi","fauxObjectSet","fetchOne","fn","Promise","resolve","toMatchTypeOf","EmployeeApiTest","specifier","$objectSpecifier","fauxInterfaceObjectSet","fetchPage","data","FooInterfaceApiTest"],"sources":["ObjectSpecifier.test.ts"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { describe, expectTypeOf, it, vi } from \"vitest\";\nimport type { EmployeeApiTest } from \"../test/EmployeeApiTest.js\";\nimport type { FooInterfaceApiTest } from \"../test/FooInterfaceApiTest.js\";\nimport type { ObjectSpecifier } from \"./ObjectSpecifier.js\";\n\ndescribe(\"ObjectSpecifier\", () => {\n  const fauxObjectSet = {\n    fetchOne: vi.fn(() => Promise.resolve(() => \"\")),\n  } as any as EmployeeApiTest.ObjectSet;\n\n  it(\"should only work with same Object Specifier\", async () => {\n    type EmployeeObjectSpecifier = ObjectSpecifier<EmployeeApiTest>;\n\n    expectTypeOf<EmployeeObjectSpecifier>().toMatchTypeOf<\n      string & { __apiName: \"Employee\" }\n    >();\n\n    const EmployeeApiTest = await fauxObjectSet.fetchOne(123);\n\n    const specifier: EmployeeObjectSpecifier = EmployeeApiTest.$objectSpecifier;\n\n    expectTypeOf(specifier).toMatchTypeOf<\n      string & { __apiName: \"Employee\" }\n    >();\n\n    type NonEmployeeObjectSpecifier = ObjectSpecifier<\n      { apiName: \"NotEmployee\"; osdkMetadata: any; type: \"object\" }\n    >;\n\n    expectTypeOf<NonEmployeeObjectSpecifier>().toMatchTypeOf<\n      // @ts-expect-error\n      EmployeeObjectId\n    >();\n  });\n\n  describe(\"interfaces\", () => {\n    const fauxInterfaceObjectSet = {\n      fetchPage: vi.fn(() => Promise.resolve({ data: [\"\"] })),\n    } as any as FooInterfaceApiTest.ObjectSet;\n\n    it(\"should work with loaded interfaces\", async () => {\n      type FooInterfaceObjectSpecifier = ObjectSpecifier<FooInterfaceApiTest>;\n\n      expectTypeOf<FooInterfaceObjectSpecifier>().toMatchTypeOf<\n        string & { __apiName: \"FooInterface\" | \"Employee\" }\n      >();\n\n      const FooInterfaceApiTest = await fauxInterfaceObjectSet.fetchPage();\n\n      const specifier = FooInterfaceApiTest.data[0].$objectSpecifier;\n\n      expectTypeOf(specifier).toMatchTypeOf<\n        string & { __apiName: \"FooInterface\" | \"Employee\" }\n      >();\n    });\n\n    it(\"should only work with known object types\", async () => {\n      const EmployeeApiTest = await fauxObjectSet.fetchOne(123);\n\n      const specifier = EmployeeApiTest.$objectSpecifier;\n\n      expectTypeOf(specifier).toMatchTypeOf<\n        string & { __apiName: \"Employee\" }\n      >();\n\n      const FooInterfaceApiTest =\n        (await fauxInterfaceObjectSet.fetchPage()).data[0];\n\n      const fooInterfaceObjectSpecifier = FooInterfaceApiTest.$objectSpecifier;\n\n      expectTypeOf<typeof specifier>().toMatchTypeOf<\n        typeof fooInterfaceObjectSpecifier\n      >();\n\n      type NonEmployeeObjectSpecifier = ObjectSpecifier<\n        { apiName: \"NotEmployee\"; osdkMetadata: any; type: \"object\" }\n      >;\n\n      expectTypeOf<NonEmployeeObjectSpecifier>().toMatchTypeOf // @ts-expect-error\n      <typeof fooInterfaceObjectSpecifier>();\n    });\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,EAAE,EAAEC,EAAE,QAAQ,QAAQ;AAKvDH,QAAQ,CAAC,iBAAiB,EAAE,MAAM;EAChC,MAAMI,aAAa,GAAG;IACpBC,QAAQ,EAAEF,EAAE,CAACG,EAAE,CAAC,MAAMC,OAAO,CAACC,OAAO,CAAC,MAAM,EAAE,CAAC;EACjD,CAAqC;EAErCN,EAAE,CAAC,6CAA6C,EAAE,YAAY;IAG5DD,YAAY,CAA0B,CAAC,CAACQ,aAAa,CAEnD,CAAC;IAEH,MAAMC,eAAe,GAAG,MAAMN,aAAa,CAACC,QAAQ,CAAC,GAAG,CAAC;IAEzD,MAAMM,SAAkC,GAAGD,eAAe,CAACE,gBAAgB;IAE3EX,YAAY,CAACU,SAAS,CAAC,CAACF,aAAa,CAEnC,CAAC;IAMHR,YAAY,CAA6B,CAAC,CAACQ,aAAa,CAGtD,CAAC;EACL,CAAC,CAAC;EAEFT,QAAQ,CAAC,YAAY,EAAE,MAAM;IAC3B,MAAMa,sBAAsB,GAAG;MAC7BC,SAAS,EAAEX,EAAE,CAACG,EAAE,CAAC,MAAMC,OAAO,CAACC,OAAO,CAAC;QAAEO,IAAI,EAAE,CAAC,EAAE;MAAE,CAAC,CAAC;IACxD,CAAyC;IAEzCb,EAAE,CAAC,oCAAoC,EAAE,YAAY;MAGnDD,YAAY,CAA8B,CAAC,CAACQ,aAAa,CAEvD,CAAC;MAEH,MAAMO,mBAAmB,GAAG,MAAMH,sBAAsB,CAACC,SAAS,CAAC,CAAC;MAEpE,MAAMH,SAAS,GAAGK,mBAAmB,CAACD,IAAI,CAAC,CAAC,CAAC,CAACH,gBAAgB;MAE9DX,YAAY,CAACU,SAAS,CAAC,CAACF,aAAa,CAEnC,CAAC;IACL,CAAC,CAAC;IAEFP,EAAE,CAAC,0CAA0C,EAAE,YAAY;MACzD,MAAMQ,eAAe,GAAG,MAAMN,aAAa,CAACC,QAAQ,CAAC,GAAG,CAAC;MAEzD,MAAMM,SAAS,GAAGD,eAAe,CAACE,gBAAgB;MAElDX,YAAY,CAACU,SAAS,CAAC,CAACF,aAAa,CAEnC,CAAC;MAEH,MAAMO,mBAAmB,GACvB,CAAC,MAAMH,sBAAsB,CAACC,SAAS,CAAC,CAAC,EAAEC,IAAI,CAAC,CAAC,CAAC;MAEhBC,mBAAmB,CAACJ,gBAAgB;MAExEX,YAAY,CAAmB,CAAC,CAACQ,aAAa,CAE5C,CAAC;MAMHR,YAAY,CAA6B,CAAC,CAACQ,aAAa,CAAC;MAAA,CACpB,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}