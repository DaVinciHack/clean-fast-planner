{"version":3,"file":"OsdkObjectFrom.js","names":["Osdk"],"sources":["OsdkObjectFrom.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  DefaultToFalse,\n  OsdkObjectLinksObject,\n} from \"./definitions/LinkDefinitions.js\";\nimport type { NullabilityAdherence } from \"./object/FetchPageArgs.js\";\nimport type { UnionIfTrue } from \"./object/FetchPageResult.js\";\nimport type { InterfaceDefinition } from \"./ontology/InterfaceDefinition.js\";\nimport type {\n  ObjectOrInterfaceDefinition,\n  PropertyKeys,\n} from \"./ontology/ObjectOrInterface.js\";\nimport type {\n  CompileTimeMetadata,\n  ObjectTypeDefinition,\n} from \"./ontology/ObjectTypeDefinition.js\";\nimport type { SimplePropertyDef } from \"./ontology/SimplePropertyDef.js\";\nimport type { OsdkBase } from \"./OsdkBase.js\";\n\ntype DropDollarOptions<T extends string> = Exclude<\n  T,\n  \"$rid\" | \"$all\" | \"$notStrict\"\n>;\n\ntype DropDollarAll<T extends string> = Exclude<\n  T,\n  \"$all\"\n>;\n\ntype SpecialOsdkPropParams =\n  | \"$all\"\n  | \"$rid\"\n  | \"$strict\"\n  | \"$notStrict\";\n\ntype ValidOsdkPropParams<Q extends ObjectOrInterfaceDefinition> =\n  | SpecialOsdkPropParams\n  | PropertyKeys<Q>;\n\nexport type ApiNameAsString<\n  T extends ObjectOrInterfaceDefinition,\n> = CompileTimeMetadata<T>[\"apiName\"];\n\nexport type JustProps<\n  T extends ObjectOrInterfaceDefinition,\n  P extends ValidOsdkPropParams<T>,\n> = P extends \"$all\" ? PropertyKeys<T>\n  : Exclude<P, SpecialOsdkPropParams>;\n\nexport type PropMapToObject<\n  FROM extends ObjectOrInterfaceDefinition,\n  TO extends ObjectTypeDefinition,\n> = NonNullable<CompileTimeMetadata<TO>[\"interfaceMap\"]>[ApiNameAsString<FROM>];\n\nexport type MapPropNamesToObjectType<\n  FROM extends ObjectOrInterfaceDefinition,\n  TO extends ObjectTypeDefinition,\n  P extends ValidOsdkPropParams<FROM>,\n  OPTIONS extends never | \"$rid\" | \"$allBaseProperties\" = never,\n> = \"$allBaseProperties\" extends OPTIONS\n  ? PropertyKeys<FROM> extends P ? PropertyKeys<TO>\n  : PropMapToObject<\n    FROM,\n    TO\n  >[JustProps<FROM, P> & keyof PropMapToObject<FROM, TO>]\n  : PropMapToObject<\n    FROM,\n    TO\n  >[JustProps<FROM, P> & keyof PropMapToObject<FROM, TO>];\n\nexport type PropMapToInterface<\n  FROM extends ObjectTypeDefinition,\n  TO extends InterfaceDefinition,\n> = NonNullable<\n  CompileTimeMetadata<FROM>[\"inverseInterfaceMap\"]\n>[ApiNameAsString<TO>];\n\nexport type MapPropNamesToInterface<\n  FROM extends ObjectTypeDefinition,\n  TO extends InterfaceDefinition,\n  P extends ValidOsdkPropParams<FROM>,\n> = PropMapToInterface<\n  FROM,\n  TO\n>[JustProps<FROM, P> & keyof PropMapToInterface<FROM, TO>];\n/**\n * @param FROM - the interface or object type to convert from\n * @param TO - the interface or object type to convert to\n * @param P - the property(s) to convert\n */\nexport type ConvertProps<\n  FROM extends ObjectOrInterfaceDefinition,\n  TO extends ValidToFrom<FROM>,\n  P extends ValidOsdkPropParams<FROM>,\n  OPTIONS extends never | \"$rid\" | \"$allBaseProperties\" = never,\n> = TO extends FROM ? P\n  : TO extends ObjectTypeDefinition ? (\n      UnionIfTrue<\n        MapPropNamesToObjectType<FROM, TO, P, OPTIONS>,\n        P extends \"$rid\" ? true : false,\n        \"$rid\"\n      >\n    )\n  : TO extends InterfaceDefinition ? FROM extends ObjectTypeDefinition ? (\n        UnionIfTrue<\n          MapPropNamesToInterface<FROM, TO, P>,\n          P extends \"$rid\" ? true : false,\n          \"$rid\"\n        >\n      )\n    : never\n  : never;\n\n/** DO NOT EXPORT FROM PACKAGE */\nexport type ValidToFrom<\n  FROM extends ObjectOrInterfaceDefinition,\n> = FROM extends InterfaceDefinition ? ObjectOrInterfaceDefinition\n  : InterfaceDefinition;\n\n/**\n * @param P The properties to add from Q\n * @param Z The existing underlying properties\n */\ntype UnderlyingProps<\n  Q extends ObjectOrInterfaceDefinition,\n  P extends string,\n  Z extends string,\n  NEW_Q extends ValidToFrom<Q>,\n> =\n  & Z\n  & Q extends InterfaceDefinition\n  ? NEW_Q extends ObjectTypeDefinition ? ConvertProps<Q, NEW_Q, P>\n  : Z\n  : Z;\n\nexport type IsNever<T> = [T] extends [never] ? true : false;\n\ntype ExtractPropsKeysFromOldPropsStyle<\n  Q extends ObjectOrInterfaceDefinition,\n  P extends ValidOsdkPropParams<Q>,\n> = P extends \"$all\" ? PropertyKeys<Q>\n  : Exclude<P, \"$strict\" | \"$notStrict\" | \"$rid\">;\n\nexport type IsAny<T> = unknown extends T\n  ? [keyof T] extends [never] ? false : true\n  : false;\n\nexport type GetPropsKeys<\n  Q extends ObjectOrInterfaceDefinition,\n  P extends PropertyKeys<Q>,\n  N extends boolean = false,\n> = IsNever<P> extends true ? N extends true ? never : PropertyKeys<Q>\n  : IsAny<P> extends true ? PropertyKeys<Q>\n  : P;\n\n/**\n * Use `Osdk.Instance` or `YourType.OsdkInstance`\n */\nexport type Osdk<\n  Q extends ObjectOrInterfaceDefinition,\n  OPTIONS extends string = never,\n  P extends PropertyKeys<Q> = PropertyKeys<Q>,\n> =\n  // no middle options is simplest\n  IsNever<OPTIONS> extends true ? Osdk.Instance<Q, never, P>\n    : IsAny<OPTIONS> extends true ? Osdk.Instance<Q, never, P>\n    // Options only includes the two allowed in the new style\n    : (IsNever<Exclude<OPTIONS, \"$rid\">>) extends true\n      ? Osdk.Instance<Q, OPTIONS & \"$rid\", P>\n    // else we are in the old style which was just Q and OPTIONS\n    // and OPTIONS was $things + prop names\n    : Osdk.Instance<\n      Q,\n      (\"$rid\" extends OPTIONS ? \"$rid\" : never),\n      ExtractPropsKeysFromOldPropsStyle<Q, OPTIONS>\n    >;\n\nexport namespace Osdk {\n  export type Instance<\n    Q extends ObjectOrInterfaceDefinition,\n    OPTIONS extends never | \"$rid\" | \"$allBaseProperties\" = never,\n    P extends PropertyKeys<Q> = PropertyKeys<Q>,\n    R extends Record<string, SimplePropertyDef> = {},\n  > =\n    & OsdkBase<Q>\n    & Pick<\n      CompileTimeMetadata<Q>[\"props\"],\n      // If there aren't any additional properties, then we want GetPropsKeys to default to PropertyKeys<Q>\n      GetPropsKeys<Q, P, [R] extends [{}] ? false : true>\n    >\n    & ([R] extends [never] ? {}\n      : { [A in keyof R]: SimplePropertyDef.ToRuntimeProperty<R[A]> })\n    & {\n      readonly $link: Q extends { linksType?: any } ? Q[\"linksType\"]\n        : Q extends ObjectTypeDefinition ? OsdkObjectLinksObject<Q>\n        : never;\n\n      readonly $as: <NEW_Q extends ValidToFrom<Q>>(\n        type: NEW_Q | string,\n      ) => Osdk.Instance<\n        NEW_Q,\n        OPTIONS,\n        ConvertProps<Q, NEW_Q, P, OPTIONS>\n      >;\n\n      readonly $clone: <NEW_PROPS extends PropertyKeys<Q>>(\n        updatedObject?:\n          | Osdk.Instance<Q, any, NEW_PROPS>\n          | {\n            [K in NEW_PROPS]?: CompileTimeMetadata<\n              Q\n            >[\"props\"][K];\n          },\n      ) => Osdk.Instance<Q, OPTIONS, P | NEW_PROPS>;\n    }\n    // We are hiding the $rid field if it wasn't requested as we want to discourage its use\n    & (IsNever<OPTIONS> extends true ? {}\n      : IsAny<OPTIONS> extends true ? {}\n      : \"$rid\" extends OPTIONS ? { readonly $rid: string }\n      : {});\n}\n\n/**\n * NOT EXPORTED FROM PACKAGE\n *\n * Anything you throw at this that is not `false` should always be `never`.\n *\n * This is structured in a way that it should always short circuit to never early.\n */\nexport type ExtractStrictOption<S extends NullabilityAdherence> =\n  IsNever<S> extends true ? never\n    : \"throw\" extends S ? never // catches any time \"throw\" still exists (including any)\n    : \"drop\" extends S ? never // catches any time \"drop\" still exists (including any)\n    : \"$notStrict\";\n\n/**\n * NOT EXPORTED FROM PACKAGE\n *\n * Anything you throw at this that is not exactly `true` should always be `never`.\n */\nexport type ExtractRidOption<R extends boolean> = // comment for readability\n  IsNever<R> extends true ? never\n    : DefaultToFalse<R> extends false ? never\n    : \"$rid\";\n\nexport type ExtractAllPropertiesOption<T extends boolean> = // comment for readability\n  IsNever<T> extends true ? never\n    : DefaultToFalse<T> extends false ? never\n    : \"$allBaseProperties\";\n\n// not exported from package\nexport type ExtractOptions<\n  R extends boolean,\n  S extends NullabilityAdherence = NullabilityAdherence.Default,\n  T extends boolean = false,\n> = ExtractRidOption<R> | ExtractAllPropertiesOption<T>;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsFA;AACA;AACA;AACA;AACA;AAwBA;AAMA;AACA;AACA;AACA;AAiCA;AACA;AACA;AAFA,WAsBiBA,IAAI;AA6CrB;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAWA","ignoreList":[]}