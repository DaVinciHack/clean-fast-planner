import type * as _Core from "@osdk/foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
import type * as _Admin from "../_components.js";
/**
 * Creates a new Group.
 *
 * @public
 *
 * Required Scopes: [api:admin-write]
 * URL: /v2/admin/groups
 */
export declare function create($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [$body: _Admin.CreateGroupRequest]): Promise<_Admin.Group>;
/**
 * Delete the Group with the specified id.
 *
 * @public
 *
 * Required Scopes: [api:admin-write]
 * URL: /v2/admin/groups/{groupId}
 */
export declare function deleteGroup($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [groupId: _Core.PrincipalId]): Promise<void>;
/**
 * Lists all Groups.
 *
 * This is a paged endpoint. Each page may be smaller or larger than the requested page size. However, it is guaranteed that if there are more results available, the `nextPageToken` field will be populated. To get the next page, make the same request again, but set the value of the `pageToken` query parameter to be value of the `nextPageToken` value of the previous response. If there is no `nextPageToken` field in the response, you are on the last page.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/groups
 */
export declare function list($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    $queryParams?: {
        pageSize?: _Core.PageSize | undefined;
        pageToken?: _Core.PageToken | undefined;
    }
]): Promise<_Admin.ListGroupsResponse>;
/**
 * Get the Group with the specified id.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/groups/{groupId}
 */
export declare function get($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [groupId: _Core.PrincipalId]): Promise<_Admin.Group>;
/**
 * Execute multiple get requests on Group.
 *
 * The maximum batch size for this endpoint is 500.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/groups/getBatch
 */
export declare function getBatch($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [$body: Array<_Admin.GetGroupsBatchRequestElement>]): Promise<_Admin.GetGroupsBatchResponse>;
/**
 * Perform a case-insensitive prefix search for groups based on group name.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/groups/search
 */
export declare function search($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [$body: _Admin.SearchGroupsRequest]): Promise<_Admin.SearchGroupsResponse>;
//# sourceMappingURL=Group.d.ts.map