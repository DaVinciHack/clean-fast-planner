import type * as _Core from "@osdk/foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
import type * as _Admin from "../_components.js";
/**
 * Lists all members (which can be a User or a Group) of a given Group.
 *
 * This is a paged endpoint. Each page may be smaller or larger than the requested page size. However,
 * it is guaranteed that if there are more results available, the `nextPageToken` field will be populated.
 * To get the next page, make the same request again, but set the value of the `pageToken` query parameter
 * to be value of the `nextPageToken` value of the previous response. If there is no `nextPageToken` field
 * in the response, you are on the last page.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/groups/{groupId}/groupMembers
 */
export declare function list($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    groupId: _Core.PrincipalId,
    $queryParams?: {
        transitive?: boolean | undefined;
        pageSize?: _Core.PageSize | undefined;
        pageToken?: _Core.PageToken | undefined;
    }
]): Promise<_Admin.ListGroupMembersResponse>;
/**
 * @public
 *
 * Required Scopes: [api:admin-write]
 * URL: /v2/admin/groups/{groupId}/groupMembers/add
 */
export declare function add($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [groupId: _Core.PrincipalId, $body: _Admin.AddGroupMembersRequest]): Promise<void>;
/**
 * @public
 *
 * Required Scopes: [api:admin-write]
 * URL: /v2/admin/groups/{groupId}/groupMembers/remove
 */
export declare function remove($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [groupId: _Core.PrincipalId, $body: _Admin.RemoveGroupMembersRequest]): Promise<void>;
//# sourceMappingURL=GroupMember.d.ts.map