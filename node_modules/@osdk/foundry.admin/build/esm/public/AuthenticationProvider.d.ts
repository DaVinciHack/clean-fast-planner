import type * as _Core from "@osdk/foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
import type * as _Admin from "../_components.js";
/**
 * Lists all AuthenticationProviders.
 *
 * @beta
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/enrollments/{enrollmentRid}/authenticationProviders
 */
export declare function list($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    enrollmentRid: _Core.EnrollmentRid,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Admin.ListAuthenticationProvidersResponse>;
/**
 * Get the AuthenticationProvider with the specified rid.
 *
 * @beta
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/enrollments/{enrollmentRid}/authenticationProviders/{authenticationProviderRid}
 */
export declare function get($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    enrollmentRid: _Core.EnrollmentRid,
    authenticationProviderRid: _Admin.AuthenticationProviderRid,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Admin.AuthenticationProvider>;
/**
 * Register a User with a given username before they log in to the platform for the first time through this
 * Authentication Provider. Preregistered users can be assigned to groups and roles prior to first login.
 *
 * @beta
 *
 * Required Scopes: []
 * URL: /v2/admin/enrollments/{enrollmentRid}/authenticationProviders/{authenticationProviderRid}/preregisterUser
 */
export declare function preregisterUser($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    enrollmentRid: _Core.EnrollmentRid,
    authenticationProviderRid: _Admin.AuthenticationProviderRid,
    $body: _Admin.PreregisterUserRequest,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Core.PrincipalId>;
/**
 * Register a Group with a given name before any users with this group log in through this Authentication Provider.
 * Preregistered groups can be used anywhere other groups are used in the platform.
 *
 * @beta
 *
 * Required Scopes: []
 * URL: /v2/admin/enrollments/{enrollmentRid}/authenticationProviders/{authenticationProviderRid}/preregisterGroup
 */
export declare function preregisterGroup($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    enrollmentRid: _Core.EnrollmentRid,
    authenticationProviderRid: _Admin.AuthenticationProviderRid,
    $body: _Admin.PreregisterGroupRequest,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Core.PrincipalId>;
//# sourceMappingURL=AuthenticationProvider.d.ts.map