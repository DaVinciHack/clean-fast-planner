import type * as _Core from "@osdk/foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
import type * as _Admin from "../_components.js";
/**
 * Delete the User with the specified id.
 *
 * @public
 *
 * Required Scopes: [api:admin-write]
 * URL: /v2/admin/users/{userId}
 */
export declare function deleteUser($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [userId: _Core.PrincipalId]): Promise<void>;
/**
 * Lists all Users.
 *
 * This is a paged endpoint. Each page may be smaller or larger than the requested page size. However, it is guaranteed that if there are more results available, the `nextPageToken` field will be populated. To get the next page, make the same request again, but set the value of the `pageToken` query parameter to be value of the `nextPageToken` value of the previous response. If there is no `nextPageToken` field in the response, you are on the last page.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/users
 */
export declare function list($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    $queryParams?: {
        pageSize?: _Core.PageSize | undefined;
        pageToken?: _Core.PageToken | undefined;
    }
]): Promise<_Admin.ListUsersResponse>;
/**
 * Get the User with the specified id.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/users/{userId}
 */
export declare function get($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [userId: _Core.PrincipalId]): Promise<_Admin.User>;
/**
 * Execute multiple get requests on User.
 *
 * The maximum batch size for this endpoint is 500.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/users/getBatch
 */
export declare function getBatch($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [$body: Array<_Admin.GetUsersBatchRequestElement>]): Promise<_Admin.GetUsersBatchResponse>;
/**
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/users/getCurrent
 */
export declare function getCurrent($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: []): Promise<_Admin.User>;
/**
 * Retrieve Markings that the user is currently a member of.
 *
 * @beta
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/users/{userId}/getMarkings
 */
export declare function getMarkings($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    userId: _Core.PrincipalId,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Admin.GetUserMarkingsResponse>;
/**
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/users/{userId}/profilePicture
 */
export declare function profilePicture($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [userId: _Core.PrincipalId]): Promise<Response>;
/**
 * Perform a case-insensitive prefix search for users based on username, given name and family name.
 *
 * @public
 *
 * Required Scopes: [api:admin-read]
 * URL: /v2/admin/users/search
 */
export declare function search($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [$body: _Admin.SearchUsersRequest]): Promise<_Admin.SearchUsersResponse>;
//# sourceMappingURL=User.d.ts.map