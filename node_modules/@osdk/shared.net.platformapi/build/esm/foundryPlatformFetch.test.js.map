{"version":3,"file":"foundryPlatformFetch.test.js","names":["describe","expect","it","parseUrl","urlOnlyHostName","toString","toEqual","urlWithLongerEntryPoint","urlWithLongerEntryAndSlash"],"sources":["foundryPlatformFetch.test.js"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { describe, expect, it } from \"vitest\";\nimport { parseUrl } from \"./foundryPlatformFetch.js\";\ndescribe(\"test url parsers\", () => {\n    it(\"should work if trailing slash is not present\", () => {\n        const urlOnlyHostName = parseUrl(\"https://example.domain.com\", \"/v2/ontologies/objectTypes/load\");\n        expect(urlOnlyHostName.toString()).toEqual(\"https://example.domain.com/api/v2/ontologies/objectTypes/load\");\n        const urlWithLongerEntryPoint = parseUrl(\"https://example.domain.com/otherstuff/some/stuff\", \"/v2/ontologies/objectTypes/load\");\n        expect(urlWithLongerEntryPoint.toString()).toEqual(\"https://example.domain.com/otherstuff/some/stuff/api/v2/ontologies/objectTypes/load\");\n    });\n    it(\"should work if trailing slash is present\", () => {\n        const urlOnlyHostName = parseUrl(\"https://example.domain.com/\", \"/v2/ontologies/objectTypes/load\");\n        expect(urlOnlyHostName.toString()).toEqual(\"https://example.domain.com/api/v2/ontologies/objectTypes/load\");\n        const urlWithLongerEntryAndSlash = parseUrl(\"https://example.domain.com/otherstuff/some/stuff/\", \"/v2/ontologies/objectTypes/load\");\n        expect(urlWithLongerEntryAndSlash.toString()).toEqual(\"https://example.domain.com/otherstuff/some/stuff/api/v2/ontologies/objectTypes/load\");\n    });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,QAAQ;AAC7C,SAASC,QAAQ,QAAQ,2BAA2B;AACpDH,QAAQ,CAAC,kBAAkB,EAAE,MAAM;EAC/BE,EAAE,CAAC,8CAA8C,EAAE,MAAM;IACrD,MAAME,eAAe,GAAGD,QAAQ,CAAC,4BAA4B,EAAE,iCAAiC,CAAC;IACjGF,MAAM,CAACG,eAAe,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,+DAA+D,CAAC;IAC3G,MAAMC,uBAAuB,GAAGJ,QAAQ,CAAC,kDAAkD,EAAE,iCAAiC,CAAC;IAC/HF,MAAM,CAACM,uBAAuB,CAACF,QAAQ,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,qFAAqF,CAAC;EAC7I,CAAC,CAAC;EACFJ,EAAE,CAAC,0CAA0C,EAAE,MAAM;IACjD,MAAME,eAAe,GAAGD,QAAQ,CAAC,6BAA6B,EAAE,iCAAiC,CAAC;IAClGF,MAAM,CAACG,eAAe,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,+DAA+D,CAAC;IAC3G,MAAME,0BAA0B,GAAGL,QAAQ,CAAC,mDAAmD,EAAE,iCAAiC,CAAC;IACnIF,MAAM,CAACO,0BAA0B,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,qFAAqF,CAAC;EAChJ,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]}