{
  "version": 3,
  "sources": ["../../@osdk/shared.client/index.js", "../../@osdk/shared.client2/index.js", "../../@osdk/shared.net.platformapi/node_modules/@osdk/shared.net.errors/build/browser/PalantirApiError.ts", "../../@osdk/shared.net.platformapi/node_modules/@osdk/shared.net.errors/build/browser/UnknownError.ts", "../../@osdk/shared.net.platformapi/build/browser/foundryPlatformFetch.js"],
  "sourcesContent": ["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const symbolClientContext = Symbol(\"ClientContext\");\n", "/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const symbolClientContext = \"__osdkClientContext\"\n", "/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PalantirApiError extends Error implements PalantirApiError {\n  public message: string;\n  public errorName?: string;\n  public errorCode?: string;\n  public statusCode?: number;\n  public errorInstanceId?: string;\n  public parameters?: any;\n\n  constructor(\n    message: string,\n    errorName?: string,\n    errorCode?: string,\n    statusCode?: number,\n    errorInstanceId?: string,\n    parameters?: any,\n  ) {\n    super(message);\n    this.message = message;\n    this.errorName = errorName;\n    this.errorCode = errorCode;\n    this.statusCode = statusCode;\n    this.errorInstanceId = errorInstanceId;\n    this.parameters = parameters;\n  }\n}\n", "/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PalantirApiError } from \"./PalantirApiError.js\";\n\nexport class UnknownError extends PalantirApiError {\n  originalError: Error | undefined;\n  constructor(message: string, errorType: string, originalError?: Error) {\n    super(message, errorType);\n    this.originalError = originalError;\n  }\n}\n", "/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { symbolClientContext as oldSymbolClientContext } from \"@osdk/shared.client\";\nimport { symbolClientContext } from \"@osdk/shared.client2\";\nimport { PalantirApiError, UnknownError } from \"@osdk/shared.net.errors\";\nexport async function foundryPlatformFetch(client, [httpMethodNum, origPath, flags, contentType, responseContentType,], ...args) {\n    const path = origPath.replace(/\\{([^}]+)\\}/g, () => encodeURIComponent(args.shift()));\n    const body = (flags & 1) ? args.shift() : undefined;\n    const queryArgs = (flags & 2)\n        ? args.shift()\n        : undefined;\n    const headerArgs = (flags & 4)\n        ? args.shift()\n        : undefined;\n    const method = [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",\n        \"PATCH\",\n    ][httpMethodNum];\n    return await apiFetch((client[symbolClientContext])\n        ?? (client[oldSymbolClientContext]) ?? client, method, path, body, queryArgs, headerArgs, contentType, responseContentType);\n}\nasync function apiFetch(clientCtx, method, endpointPath, data, queryArguments, headers, requestMediaType, responseMediaType) {\n    const url = parseUrl(clientCtx.baseUrl, endpointPath);\n    for (const [key, value] of Object.entries(queryArguments || {})) {\n        if (value == null) {\n            continue;\n        }\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value);\n        }\n    }\n    const headersInit = new Headers();\n    headersInit.set(\"Content-Type\", requestMediaType ?? \"application/json\");\n    headersInit.set(\"Accept\", responseMediaType ?? \"application/json\");\n    Object.entries(headers || {}).forEach(([key, value]) => {\n        if (value != null) {\n            headersInit.append(key, value.toString());\n        }\n    });\n    const body = data == null || (data instanceof globalThis.Blob)\n        ? data\n        : JSON.stringify(data);\n    // Because this uses the client's fetch, there is a 99.99% chance that it is already going\n    // to handle the error case and throw a PalantirApiError since its wrapped in a\n    // createFetchOrThrow.\n    const response = await clientCtx.fetch(url.toString(), {\n        body,\n        method: method,\n        headers: headersInit,\n    });\n    // However, if we ended up using a \"regular\" fetch, the\n    // error status codes are not thrown by fetch automatically,\n    // we have to look at the ok property and behave accordingly\n    if (!response.ok) {\n        try {\n            const convertedError = await response.json();\n            return new PalantirApiError(convertedError.message, convertedError.errorName, convertedError.errorCode, response.status, convertedError.errorInstanceId, convertedError.parameters);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                return new UnknownError(e.message, \"UNKNOWN\");\n            }\n            return new UnknownError(\"Unable to parse error response\", \"UNKNOWN\");\n        }\n    }\n    // Do not return anything if its a 204. Do not parse either!\n    if (response.status === 204) {\n        return;\n    }\n    if (responseMediaType == null || responseMediaType === \"application/json\") {\n        return await response.json();\n    }\n    return response;\n}\nexport function parseUrl(baseUrl, endpointPath) {\n    baseUrl += baseUrl.endsWith(\"/\") ? \"\" : \"/\";\n    return new URL(`api${endpointPath}`, baseUrl);\n}\n"],
  "mappings": "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",
  "names": ["symbolClientContext", "PalantirApiError", "Error", "constructor", "message", "errorName", "errorCode", "statusCode", "errorInstanceId", "parameters", "UnknownError", "PalantirApiError", "constructor", "message", "errorType", "originalError", "foundryPlatformFetch", "client", "httpMethodNum", "origPath", "flags", "contentType", "responseContentType", "args", "path", "replace", "encodeURIComponent", "shift", "body", "undefined", "queryArgs", "headerArgs", "method", "apiFetch", "symbolClientContext", "oldSymbolClientContext", "clientCtx", "endpointPath", "data", "queryArguments", "headers", "requestMediaType", "responseMediaType", "url", "parseUrl", "baseUrl", "key", "value", "Object", "entries", "Array", "isArray", "item", "searchParams", "append", "headersInit", "Headers", "set", "forEach", "toString", "globalThis", "Blob", "JSON", "stringify", "response", "fetch", "ok", "convertedError", "json", "PalantirApiError", "message", "errorName", "errorCode", "status", "errorInstanceId", "parameters", "e", "Error", "UnknownError", "endsWith", "URL"]
}
