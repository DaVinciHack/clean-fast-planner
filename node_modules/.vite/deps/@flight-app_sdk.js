import {
  __export
} from "./chunk-MTI3AIJG.js";

// node_modules/@flight-app/sdk/esm/ontology/actions.js
var actions_exports = {};
__export(actions_exports, {
  buildLegsFlightPlanner20: () => buildLegsFlightPlanner20,
  buildNewGtLocationsV2: () => buildNewGtLocationsV2,
  calculateFlightTimes: () => calculateFlightTimes,
  calculateSunriseSunset: () => calculateSunriseSunset,
  createFlightLogObject: () => createFlightLogObject,
  createFlightWithWaypoints: () => createFlightWithWaypoints,
  createNewFlightFp2: () => createNewFlightFp2,
  createOrModifyMainFuelFastPlanner: () => createOrModifyMainFuelFastPlanner,
  deleteLocationAllgtlocationsV2: () => deleteLocationAllgtlocationsV2,
  editExistingFlightFp2: () => editExistingFlightFp2,
  flightAppUpdateEtdAndCrew: () => flightAppUpdateEtdAndCrew,
  flightFuelFpv2: () => flightFuelFpv2,
  flightWeatherRiskTriggeredLightningWaves: () => flightWeatherRiskTriggeredLightningWaves,
  getGlobalWindsForFlight: () => getGlobalWindsForFlight,
  getWeatherForAlternates: () => getWeatherForAlternates,
  pseudoWeatherSegments: () => pseudoWeatherSegments,
  singleFlightAutomation: () => singleFlightAutomation,
  updateAlternantOneStep: () => updateAlternantOneStep,
  updateFastPlannerFlight: () => updateFastPlannerFlight,
  updateWeatherByRegion: () => updateWeatherByRegion,
  weatherWebookNorwayV9: () => weatherWebookNorwayV9
});

// node_modules/@flight-app/sdk/esm/OntologyMetadata.js
var $osdkMetadata = { extraUserAgent: "typescript-sdk/0.8.0 typescript-sdk-generator/2.3.0-beta.5" };
var $ontologyRid = "ri.ontology.main.ontology.ab265709-5927-4853-99f0-c8f173e324e0";

// node_modules/@flight-app/sdk/esm/ontology/actions/buildLegsFlightPlanner20.js
var buildLegsFlightPlanner20 = {
  apiName: "buildLegsFlightPlanner20",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/buildNewGtLocationsV2.js
var buildNewGtLocationsV2 = {
  apiName: "buildNewGtLocationsV2",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/calculateFlightTimes.js
var calculateFlightTimes = {
  apiName: "calculateFlightTimes",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/calculateSunriseSunset.js
var calculateSunriseSunset = {
  apiName: "calculateSunriseSunset",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/createFlightLogObject.js
var createFlightLogObject = {
  apiName: "createFlightLogObject",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/createFlightWithWaypoints.js
var createFlightWithWaypoints = {
  apiName: "createFlightWithWaypoints",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/createNewFlightFp2.js
var createNewFlightFp2 = {
  apiName: "createNewFlightFp2",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/createOrModifyMainFuelFastPlanner.js
var createOrModifyMainFuelFastPlanner = {
  apiName: "createOrModifyMainFuelFastPlanner",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/deleteLocationAllgtlocationsV2.js
var deleteLocationAllgtlocationsV2 = {
  apiName: "deleteLocationAllgtlocationsV2",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/editExistingFlightFp2.js
var editExistingFlightFp2 = {
  apiName: "editExistingFlightFp2",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/flightAppUpdateEtdAndCrew.js
var flightAppUpdateEtdAndCrew = {
  apiName: "flightAppUpdateEtdAndCrew",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/flightFuelFpv2.js
var flightFuelFpv2 = {
  apiName: "flightFuelFpv2",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/flightWeatherRiskTriggeredLightningWaves.js
var flightWeatherRiskTriggeredLightningWaves = {
  apiName: "flightWeatherRiskTriggeredLightningWaves",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/getGlobalWindsForFlight.js
var getGlobalWindsForFlight = {
  apiName: "getGlobalWindsForFlight",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/getWeatherForAlternates.js
var getWeatherForAlternates = {
  apiName: "getWeatherForAlternates",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/pseudoWeatherSegments.js
var pseudoWeatherSegments = {
  apiName: "pseudoWeatherSegments",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/singleFlightAutomation.js
var singleFlightAutomation = {
  apiName: "singleFlightAutomation",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/updateAlternantOneStep.js
var updateAlternantOneStep = {
  apiName: "updateAlternantOneStep",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/updateFastPlannerFlight.js
var updateFastPlannerFlight = {
  apiName: "updateFastPlannerFlight",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/updateWeatherByRegion.js
var updateWeatherByRegion = {
  apiName: "updateWeatherByRegion",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/actions/weatherWebookNorwayV9.js
var weatherWebookNorwayV9 = {
  apiName: "weatherWebookNorwayV9",
  type: "action",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/interfaces.js
var interfaces_exports = {};

// node_modules/@flight-app/sdk/esm/ontology/objects.js
var objects_exports = {};
__export(objects_exports, {
  AirportsData: () => AirportsData,
  AllGtLocationsV2: () => AllGtLocationsV2,
  Asset: () => Asset,
  BristowHelidecks: () => BristowHelidecks,
  FlightFuelDburbury: () => FlightFuelDburbury,
  FlightLogObject: () => FlightLogObject,
  FuelPolicyBuilder: () => FuelPolicyBuilder,
  InternationalWeather: () => InternationalWeather,
  LegObjectOutputObject: () => LegObjectOutputObject,
  MainFlightObjectFp2: () => MainFlightObjectFp2,
  MainFuelV2: () => MainFuelV2,
  NorwayWeatherDatav2: () => NorwayWeatherDatav2,
  NorwayWeatherSegments: () => NorwayWeatherSegments,
  NorwayWeatherXv8: () => NorwayWeatherXv8,
  RegionalWeatherMinimaSettings: () => RegionalWeatherMinimaSettings,
  User: () => User
});

// node_modules/@flight-app/sdk/esm/ontology/objects/AirportsData.js
var AirportsData = {
  type: "object",
  apiName: "AirportsData",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/AllGtLocationsV2.js
var AllGtLocationsV2 = {
  type: "object",
  apiName: "AllGtLocationsV2",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/Asset.js
var Asset = {
  type: "object",
  apiName: "Asset",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/BristowHelidecks.js
var BristowHelidecks = {
  type: "object",
  apiName: "BristowHelidecks",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/FlightFuelDburbury.js
var FlightFuelDburbury = {
  type: "object",
  apiName: "FlightFuelDburbury",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/FlightLogObject.js
var FlightLogObject = {
  type: "object",
  apiName: "FlightLogObject",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/FuelPolicyBuilder.js
var FuelPolicyBuilder = {
  type: "object",
  apiName: "FuelPolicyBuilder",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/InternationalWeather.js
var InternationalWeather = {
  type: "object",
  apiName: "InternationalWeather",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/LegObjectOutputObject.js
var LegObjectOutputObject = {
  type: "object",
  apiName: "LegObjectOutputObject",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/MainFlightObjectFp2.js
var MainFlightObjectFp2 = {
  type: "object",
  apiName: "MainFlightObjectFp2",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/MainFuelV2.js
var MainFuelV2 = {
  type: "object",
  apiName: "MainFuelV2",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/NorwayWeatherDatav2.js
var NorwayWeatherDatav2 = {
  type: "object",
  apiName: "NorwayWeatherDatav2",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/NorwayWeatherSegments.js
var NorwayWeatherSegments = {
  type: "object",
  apiName: "NorwayWeatherSegments",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/NorwayWeatherXv8.js
var NorwayWeatherXv8 = {
  type: "object",
  apiName: "NorwayWeatherXv8",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/RegionalWeatherMinimaSettings.js
var RegionalWeatherMinimaSettings = {
  type: "object",
  apiName: "RegionalWeatherMinimaSettings",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/objects/User.js
var User = {
  type: "object",
  apiName: "User",
  osdkMetadata: $osdkMetadata
};

// node_modules/@flight-app/sdk/esm/ontology/queries.js
var queries_exports = {};
export {
  actions_exports as $Actions,
  interfaces_exports as $Interfaces,
  objects_exports as $Objects,
  queries_exports as $Queries,
  $ontologyRid,
  $osdkMetadata,
  AirportsData,
  AllGtLocationsV2,
  Asset,
  BristowHelidecks,
  FlightFuelDburbury,
  FlightLogObject,
  FuelPolicyBuilder,
  InternationalWeather,
  LegObjectOutputObject,
  MainFlightObjectFp2,
  MainFuelV2,
  NorwayWeatherDatav2,
  NorwayWeatherSegments,
  NorwayWeatherXv8,
  RegionalWeatherMinimaSettings,
  User,
  buildLegsFlightPlanner20,
  buildNewGtLocationsV2,
  calculateFlightTimes,
  calculateSunriseSunset,
  createFlightLogObject,
  createFlightWithWaypoints,
  createNewFlightFp2,
  createOrModifyMainFuelFastPlanner,
  deleteLocationAllgtlocationsV2,
  editExistingFlightFp2,
  flightAppUpdateEtdAndCrew,
  flightFuelFpv2,
  flightWeatherRiskTriggeredLightningWaves,
  getGlobalWindsForFlight,
  getWeatherForAlternates,
  pseudoWeatherSegments,
  singleFlightAutomation,
  updateAlternantOneStep,
  updateFastPlannerFlight,
  updateWeatherByRegion,
  weatherWebookNorwayV9
};
//# sourceMappingURL=@flight-app_sdk.js.map
