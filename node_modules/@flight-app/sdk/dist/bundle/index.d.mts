/** /@flight-app/sdk/index **/
declare module "@flight-app/sdk" {
	export { buildLegsFlightPlanner20, buildNewGtLocationsV2, calculateFlightTimes, calculateSunriseSunset, createFlightLogObject, createFlightWithWaypoints, createNewFlightFp2, createOrModifyMainFuelFastPlanner, deleteLocationAllgtlocationsV2, editExistingFlightFp2, flightAppUpdateEtdAndCrew, flightFuelFpv2, flightWeatherRiskTriggeredLightningWaves, getGlobalWindsForFlight, getWeatherForAlternates, pseudoWeatherSegments, singleFlightAutomation, updateAlternantOneStep, updateFastPlannerFlight, updateWeatherByRegion, weatherWebookNorwayV9, } from '@flight-app/sdk/ontology/actions';
	export * as $Actions from '@flight-app/sdk/ontology/actions';
	export {} from '@flight-app/sdk/ontology/interfaces';
	export * as $Interfaces from '@flight-app/sdk/ontology/interfaces';
	export { AirportsData, AllGtLocationsV2, Asset, BristowHelidecks, FlightFuelDburbury, FlightLogObject, FuelPolicyBuilder, InternationalWeather, LegObjectOutputObject, MainFlightObjectFp2, MainFuelV2, NorwayWeatherDatav2, NorwayWeatherSegments, NorwayWeatherXv8, RegionalWeatherMinimaSettings, User, } from '@flight-app/sdk/ontology/objects';
	export * as $Objects from '@flight-app/sdk/ontology/objects';
	export {} from '@flight-app/sdk/ontology/queries';
	export * as $Queries from '@flight-app/sdk/ontology/queries';
	export { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export { $ontologyRid } from '@flight-app/sdk/OntologyMetadata';
}
/** /@flight-app/sdk/OntologyMetadata **/
declare module "@flight-app/sdk/OntologyMetadata" {
	export type $ExpectedClientVersion = '2.3.0';
	export const $osdkMetadata: {
	    extraUserAgent: string;
	};
	export const $ontologyRid = "ri.ontology.main.ontology.ab265709-5927-4853-99f0-c8f173e324e0";
}
/** /@flight-app/sdk/ontology/actions **/
declare module "@flight-app/sdk/ontology/actions" {
	export { buildLegsFlightPlanner20 } from '@flight-app/sdk/ontology/actions/buildLegsFlightPlanner20';
	export { buildNewGtLocationsV2 } from '@flight-app/sdk/ontology/actions/buildNewGtLocationsV2';
	export { calculateFlightTimes } from '@flight-app/sdk/ontology/actions/calculateFlightTimes';
	export { calculateSunriseSunset } from '@flight-app/sdk/ontology/actions/calculateSunriseSunset';
	export { createFlightLogObject } from '@flight-app/sdk/ontology/actions/createFlightLogObject';
	export { createFlightWithWaypoints } from '@flight-app/sdk/ontology/actions/createFlightWithWaypoints';
	export { createNewFlightFp2 } from '@flight-app/sdk/ontology/actions/createNewFlightFp2';
	export { createOrModifyMainFuelFastPlanner } from '@flight-app/sdk/ontology/actions/createOrModifyMainFuelFastPlanner';
	export { deleteLocationAllgtlocationsV2 } from '@flight-app/sdk/ontology/actions/deleteLocationAllgtlocationsV2';
	export { editExistingFlightFp2 } from '@flight-app/sdk/ontology/actions/editExistingFlightFp2';
	export { flightAppUpdateEtdAndCrew } from '@flight-app/sdk/ontology/actions/flightAppUpdateEtdAndCrew';
	export { flightFuelFpv2 } from '@flight-app/sdk/ontology/actions/flightFuelFpv2';
	export { flightWeatherRiskTriggeredLightningWaves } from '@flight-app/sdk/ontology/actions/flightWeatherRiskTriggeredLightningWaves';
	export { getGlobalWindsForFlight } from '@flight-app/sdk/ontology/actions/getGlobalWindsForFlight';
	export { getWeatherForAlternates } from '@flight-app/sdk/ontology/actions/getWeatherForAlternates';
	export { pseudoWeatherSegments } from '@flight-app/sdk/ontology/actions/pseudoWeatherSegments';
	export { singleFlightAutomation } from '@flight-app/sdk/ontology/actions/singleFlightAutomation';
	export { updateAlternantOneStep } from '@flight-app/sdk/ontology/actions/updateAlternantOneStep';
	export { updateFastPlannerFlight } from '@flight-app/sdk/ontology/actions/updateFastPlannerFlight';
	export { updateWeatherByRegion } from '@flight-app/sdk/ontology/actions/updateWeatherByRegion';
	export { weatherWebookNorwayV9 } from '@flight-app/sdk/ontology/actions/weatherWebookNorwayV9';
}
/** /@flight-app/sdk/ontology/interfaces **/
declare module "@flight-app/sdk/ontology/interfaces" {
	export {};
}
/** /@flight-app/sdk/ontology/objects **/
declare module "@flight-app/sdk/ontology/objects" {
	export { AirportsData } from '@flight-app/sdk/ontology/objects/AirportsData';
	export { AllGtLocationsV2 } from '@flight-app/sdk/ontology/objects/AllGtLocationsV2';
	export { Asset } from '@flight-app/sdk/ontology/objects/Asset';
	export { BristowHelidecks } from '@flight-app/sdk/ontology/objects/BristowHelidecks';
	export { FlightFuelDburbury } from '@flight-app/sdk/ontology/objects/FlightFuelDburbury';
	export { FlightLogObject } from '@flight-app/sdk/ontology/objects/FlightLogObject';
	export { FuelPolicyBuilder } from '@flight-app/sdk/ontology/objects/FuelPolicyBuilder';
	export { InternationalWeather } from '@flight-app/sdk/ontology/objects/InternationalWeather';
	export { LegObjectOutputObject } from '@flight-app/sdk/ontology/objects/LegObjectOutputObject';
	export { MainFlightObjectFp2 } from '@flight-app/sdk/ontology/objects/MainFlightObjectFp2';
	export { MainFuelV2 } from '@flight-app/sdk/ontology/objects/MainFuelV2';
	export { NorwayWeatherDatav2 } from '@flight-app/sdk/ontology/objects/NorwayWeatherDatav2';
	export { NorwayWeatherSegments } from '@flight-app/sdk/ontology/objects/NorwayWeatherSegments';
	export { NorwayWeatherXv8 } from '@flight-app/sdk/ontology/objects/NorwayWeatherXv8';
	export { RegionalWeatherMinimaSettings } from '@flight-app/sdk/ontology/objects/RegionalWeatherMinimaSettings';
	export { User } from '@flight-app/sdk/ontology/objects/User';
}
/** /@flight-app/sdk/ontology/queries **/
declare module "@flight-app/sdk/ontology/queries" {
	export {};
}
/** /@flight-app/sdk/ontology/actions/buildLegsFlightPlanner20 **/
declare module "@flight-app/sdk/ontology/actions/buildLegsFlightPlanner20" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace buildLegsFlightPlanner20 {
	    type ParamsDefinition = {
	        bearingThreshold: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'double';
	        };
	        corridorWidth: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'double';
	        };
	        isAlternate: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'boolean';
	        };
	        locationNames: {
	            description: undefined;
	            multiplicity: true;
	            nullable: false;
	            type: 'string';
	        };
	        maxDist: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'double';
	        };
	        minDist: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'double';
	        };
	        region: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	    };
	    /**
	     * This will take an array of waypoints and build a leg
	     */
	    interface Params {
	        readonly bearingThreshold: ActionParam.PrimitiveType<'double'>;
	        readonly corridorWidth: ActionParam.PrimitiveType<'double'>;
	        readonly isAlternate: ActionParam.PrimitiveType<'boolean'>;
	        readonly locationNames: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly maxDist: ActionParam.PrimitiveType<'double'>;
	        readonly minDist: ActionParam.PrimitiveType<'double'>;
	        readonly region?: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * This will take an array of waypoints and build a leg
	         */
	        applyAction<OP extends ApplyActionOptions>(args: buildLegsFlightPlanner20.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<buildLegsFlightPlanner20.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * This will take an array of waypoints and build a leg
	 * @param {ActionParam.PrimitiveType<"double">} bearingThreshold
	 * @param {ActionParam.PrimitiveType<"double">} corridorWidth
	 * @param {ActionParam.PrimitiveType<"boolean">} isAlternate
	 * @param {ActionParam.PrimitiveType<"string">} locationNames
	 * @param {ActionParam.PrimitiveType<"double">} maxDist
	 * @param {ActionParam.PrimitiveType<"double">} minDist
	 * @param {ActionParam.PrimitiveType<"string">} [region]
	 */
	export interface buildLegsFlightPlanner20 extends ActionDefinition<buildLegsFlightPlanner20.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'buildLegsFlightPlanner20';
	        description: 'This will take an array of waypoints and build a leg';
	        displayName: 'Build legs Flight Planner 2.0';
	        modifiedEntities: {};
	        parameters: buildLegsFlightPlanner20.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.265e8c76-0779-44f4-a48f-0aedbf3fd88c';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: buildLegsFlightPlanner20.Signatures;
	    };
	    apiName: 'buildLegsFlightPlanner20';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const buildLegsFlightPlanner20: buildLegsFlightPlanner20;
}
/** /@flight-app/sdk/ontology/actions/buildNewGtLocationsV2 **/
declare module "@flight-app/sdk/ontology/actions/buildNewGtLocationsV2" {
	import type { ActionDefinition, ActionMetadata, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { AllGtLocationsV2 } from '@flight-app/sdk/ontology/objects/AllGtLocationsV2';
	export namespace buildNewGtLocationsV2 {
	    type ParamsDefinition = {
	        active_site: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        AllGtLocation: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<AllGtLocationsV2>;
	        };
	        customer_alias: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        data_from: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        fuel_available: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        fuel_owner: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        geo_point: {
	            description: 'This has to be in this format,    -25.47139,-43.99222';
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        isairport: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        isbase: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        last_update_date: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        lat: {
	            description: 'Has to be in this formate,   -25.47139';
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        loc_alias: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        loc_name: {
	            description: '4 Letter code';
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        location_cd: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        location_description: {
	            description: 'Full Name';
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        location_notes: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        location_radio_notes: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        location_type: {
	            description: 'Fixed Platform, Movable, Base, Airport, Ship';
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        lon: {
	            description: 'Has to be in this format,   -60.38229';
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        lrm_region_id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        primary_phone: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        primary_radio: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        reference_id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        region: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        route_direction: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        secondary_phone: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        time_zone: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        timezone_offset: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	    };
	    /**
	     * Building new GT locations for the map
	     */
	    interface Params {
	        readonly active_site?: ActionParam.PrimitiveType<'string'>;
	        readonly AllGtLocation?: ActionParam.ObjectType<AllGtLocationsV2>;
	        readonly customer_alias?: ActionParam.PrimitiveType<'string'>;
	        readonly data_from?: ActionParam.PrimitiveType<'string'>;
	        readonly fuel_available?: ActionParam.PrimitiveType<'string'>;
	        readonly fuel_owner?: ActionParam.PrimitiveType<'string'>;
	        /**
	         * This has to be in this format,    -25.47139,-43.99222
	         */
	        readonly geo_point: ActionParam.PrimitiveType<'string'>;
	        readonly id?: ActionParam.PrimitiveType<'string'>;
	        readonly isairport?: ActionParam.PrimitiveType<'string'>;
	        readonly isbase?: ActionParam.PrimitiveType<'string'>;
	        readonly last_update_date?: ActionParam.PrimitiveType<'timestamp'>;
	        /**
	         * Has to be in this formate,   -25.47139
	         */
	        readonly lat?: ActionParam.PrimitiveType<'double'>;
	        readonly loc_alias?: ActionParam.PrimitiveType<'string'>;
	        /**
	         * 4 Letter code
	         */
	        readonly loc_name: ActionParam.PrimitiveType<'string'>;
	        readonly location_cd?: ActionParam.PrimitiveType<'string'>;
	        /**
	         * Full Name
	         */
	        readonly location_description: ActionParam.PrimitiveType<'string'>;
	        readonly location_notes?: ActionParam.PrimitiveType<'string'>;
	        readonly location_radio_notes?: ActionParam.PrimitiveType<'string'>;
	        /**
	         * Fixed Platform, Movable, Base, Airport, Ship
	         */
	        readonly location_type?: ActionParam.PrimitiveType<'string'>;
	        /**
	         * Has to be in this format,   -60.38229
	         */
	        readonly lon?: ActionParam.PrimitiveType<'double'>;
	        readonly lrm_region_id?: ActionParam.PrimitiveType<'integer'>;
	        readonly primary_phone?: ActionParam.PrimitiveType<'string'>;
	        readonly primary_radio?: ActionParam.PrimitiveType<'string'>;
	        readonly reference_id?: ActionParam.PrimitiveType<'integer'>;
	        readonly region?: ActionParam.PrimitiveType<'string'>;
	        readonly route_direction?: ActionParam.PrimitiveType<'string'>;
	        readonly secondary_phone?: ActionParam.PrimitiveType<'string'>;
	        readonly time_zone?: ActionParam.PrimitiveType<'string'>;
	        readonly timezone_offset?: ActionParam.PrimitiveType<'double'>;
	    }
	    interface Signatures {
	        /**
	         * Building new GT locations for the map
	         */
	        applyAction<OP extends ApplyActionOptions>(args: buildNewGtLocationsV2.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<buildNewGtLocationsV2.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Building new GT locations for the map
	 * @param {ActionParam.PrimitiveType<"string">} [active_site]
	 * @param {ActionParam.ObjectType<AllGtLocationsV2>} [AllGtLocation]
	 * @param {ActionParam.PrimitiveType<"string">} [customer_alias]
	 * @param {ActionParam.PrimitiveType<"string">} [data_from]
	 * @param {ActionParam.PrimitiveType<"string">} [fuel_available]
	 * @param {ActionParam.PrimitiveType<"string">} [fuel_owner]
	 * @param {ActionParam.PrimitiveType<"string">} geo_point This has to be in this format,    -25.47139,-43.99222
	 * @param {ActionParam.PrimitiveType<"string">} [id]
	 * @param {ActionParam.PrimitiveType<"string">} [isairport]
	 * @param {ActionParam.PrimitiveType<"string">} [isbase]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [last_update_date]
	 * @param {ActionParam.PrimitiveType<"double">} [lat] Has to be in this formate,   -25.47139
	 * @param {ActionParam.PrimitiveType<"string">} [loc_alias]
	 * @param {ActionParam.PrimitiveType<"string">} loc_name 4 Letter code
	 * @param {ActionParam.PrimitiveType<"string">} [location_cd]
	 * @param {ActionParam.PrimitiveType<"string">} location_description Full Name
	 * @param {ActionParam.PrimitiveType<"string">} [location_notes]
	 * @param {ActionParam.PrimitiveType<"string">} [location_radio_notes]
	 * @param {ActionParam.PrimitiveType<"string">} [location_type] Fixed Platform, Movable, Base, Airport, Ship
	 * @param {ActionParam.PrimitiveType<"double">} [lon] Has to be in this format,   -60.38229
	 * @param {ActionParam.PrimitiveType<"integer">} [lrm_region_id]
	 * @param {ActionParam.PrimitiveType<"string">} [primary_phone]
	 * @param {ActionParam.PrimitiveType<"string">} [primary_radio]
	 * @param {ActionParam.PrimitiveType<"integer">} [reference_id]
	 * @param {ActionParam.PrimitiveType<"string">} [region]
	 * @param {ActionParam.PrimitiveType<"string">} [route_direction]
	 * @param {ActionParam.PrimitiveType<"string">} [secondary_phone]
	 * @param {ActionParam.PrimitiveType<"string">} [time_zone]
	 * @param {ActionParam.PrimitiveType<"double">} [timezone_offset]
	 */
	export interface buildNewGtLocationsV2 extends ActionDefinition<buildNewGtLocationsV2.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'buildNewGtLocationsV2';
	        description: 'Building new GT locations for the map';
	        displayName: 'Build new GT Locations V2';
	        modifiedEntities: {
	            AllGtLocationsV2: {
	                created: true;
	                modified: false;
	            };
	        };
	        parameters: buildNewGtLocationsV2.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.5bd14935-a136-4d95-9580-f6c1805e4b90';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: buildNewGtLocationsV2.Signatures;
	    };
	    apiName: 'buildNewGtLocationsV2';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const buildNewGtLocationsV2: buildNewGtLocationsV2;
}
/** /@flight-app/sdk/ontology/actions/calculateFlightTimes **/
declare module "@flight-app/sdk/ontology/actions/calculateFlightTimes" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace calculateFlightTimes {
	    type ParamsDefinition = {
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	    };
	    /**
	     * calculate Flight Times
	     */
	    interface Params {
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * calculate Flight Times
	         */
	        applyAction<OP extends ApplyActionOptions>(args: calculateFlightTimes.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<calculateFlightTimes.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * calculate Flight Times
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 */
	export interface calculateFlightTimes extends ActionDefinition<calculateFlightTimes.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'calculateFlightTimes';
	        description: 'calculate Flight Times';
	        displayName: 'calculateFlightTimes';
	        modifiedEntities: {};
	        parameters: calculateFlightTimes.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.87e53163-c96c-46e5-be26-52bfd133e273';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: calculateFlightTimes.Signatures;
	    };
	    apiName: 'calculateFlightTimes';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const calculateFlightTimes: calculateFlightTimes;
}
/** /@flight-app/sdk/ontology/actions/calculateSunriseSunset **/
declare module "@flight-app/sdk/ontology/actions/calculateSunriseSunset" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace calculateSunriseSunset {
	    type ParamsDefinition = {
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	    };
	    /**
	     * calculate Sunrise Sunset
	     */
	    interface Params {
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * calculate Sunrise Sunset
	         */
	        applyAction<OP extends ApplyActionOptions>(args: calculateSunriseSunset.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<calculateSunriseSunset.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * calculate Sunrise Sunset
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 */
	export interface calculateSunriseSunset extends ActionDefinition<calculateSunriseSunset.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'calculateSunriseSunset';
	        description: 'calculate Sunrise Sunset';
	        displayName: 'calculateSunriseSunset';
	        modifiedEntities: {};
	        parameters: calculateSunriseSunset.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.15a20a2c-2d90-4d7e-b5ac-1659284e5a68';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: calculateSunriseSunset.Signatures;
	    };
	    apiName: 'calculateSunriseSunset';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const calculateSunriseSunset: calculateSunriseSunset;
}
/** /@flight-app/sdk/ontology/actions/createFlightLogObject **/
declare module "@flight-app/sdk/ontology/actions/createFlightLogObject" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace createFlightLogObject {
	    type ParamsDefinition = {
	        additional_crew_ids: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        aircraft_id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        approach_type: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        average_pax_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        bags_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        captain_day_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        captain_id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        captain_landings: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        captain_night_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        captain_total_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        comments: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        copilot_day_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        copilot_id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        copilot_landings: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        copilot_night_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        copilot_total_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        delay_reasons: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        device_id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        flight_id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        flight_number: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        has_pending_changes: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'boolean';
	        };
	        incident_id: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        initial_fuel_uplifted: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        is_uploaded: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'boolean';
	        };
	        landing_on: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        last_sync_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        leg_day_minutes: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        leg_fuel_uplifted: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'double';
	        };
	        leg_ids: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        leg_landing_fuel: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'double';
	        };
	        leg_landing_times: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'timestamp';
	        };
	        leg_landings: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        leg_names: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        leg_night_minutes: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        leg_pilot_flying: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        leg_planned_landing_fuel: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'double';
	        };
	        leg_planned_landing_times: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'timestamp';
	        };
	        leg_planned_takeoff_fuel: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'double';
	        };
	        leg_planned_takeoff_times: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'timestamp';
	        };
	        leg_takeoff_fuel: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'double';
	        };
	        leg_takeoff_times: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'timestamp';
	        };
	        log_date: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        maintenance_notes: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        off_blocks_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        off_blocks_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        on_blocks_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        on_blocks_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        pax_number: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        shutdown_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        startup_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        startup_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'timestamp';
	        };
	        total_bags_pax_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        total_flight_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        total_fuel_burned: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        total_pax_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        total_time: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'integer';
	        };
	        waypoint_actual_fuel: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'double';
	        };
	        waypoint_actual_times: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        waypoint_names: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        waypoint_planned_fuel: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'double';
	        };
	        waypoint_planned_times: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	    };
	    interface Params {
	        readonly additional_crew_ids?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly aircraft_id?: ActionParam.PrimitiveType<'string'>;
	        readonly approach_type?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly average_pax_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly bags_weight?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly captain_day_time?: ActionParam.PrimitiveType<'integer'>;
	        readonly captain_id?: ActionParam.PrimitiveType<'string'>;
	        readonly captain_landings?: ActionParam.PrimitiveType<'integer'>;
	        readonly captain_night_time?: ActionParam.PrimitiveType<'integer'>;
	        readonly captain_total_time?: ActionParam.PrimitiveType<'integer'>;
	        readonly comments?: ActionParam.PrimitiveType<'string'>;
	        readonly copilot_day_time?: ActionParam.PrimitiveType<'integer'>;
	        readonly copilot_id?: ActionParam.PrimitiveType<'string'>;
	        readonly copilot_landings?: ActionParam.PrimitiveType<'integer'>;
	        readonly copilot_night_time?: ActionParam.PrimitiveType<'integer'>;
	        readonly copilot_total_time?: ActionParam.PrimitiveType<'integer'>;
	        readonly delay_reasons?: ActionParam.PrimitiveType<'string'>;
	        readonly device_id?: ActionParam.PrimitiveType<'string'>;
	        readonly flight_id: ActionParam.PrimitiveType<'string'>;
	        readonly flight_number?: ActionParam.PrimitiveType<'string'>;
	        readonly has_pending_changes?: ActionParam.PrimitiveType<'boolean'>;
	        readonly incident_id?: ActionParam.PrimitiveType<'string'>;
	        readonly initial_fuel_uplifted?: ActionParam.PrimitiveType<'double'>;
	        readonly is_uploaded?: ActionParam.PrimitiveType<'boolean'>;
	        readonly landing_on?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly last_sync_time?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly leg_day_minutes?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly leg_fuel_uplifted?: ReadonlyArray<ActionParam.PrimitiveType<'double'>>;
	        readonly leg_ids?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly leg_landing_fuel?: ReadonlyArray<ActionParam.PrimitiveType<'double'>>;
	        readonly leg_landing_times?: ReadonlyArray<ActionParam.PrimitiveType<'timestamp'>>;
	        readonly leg_landings?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly leg_names?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly leg_night_minutes?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly leg_pilot_flying?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly leg_planned_landing_fuel?: ReadonlyArray<ActionParam.PrimitiveType<'double'>>;
	        readonly leg_planned_landing_times?: ReadonlyArray<ActionParam.PrimitiveType<'timestamp'>>;
	        readonly leg_planned_takeoff_fuel?: ReadonlyArray<ActionParam.PrimitiveType<'double'>>;
	        readonly leg_planned_takeoff_times?: ReadonlyArray<ActionParam.PrimitiveType<'timestamp'>>;
	        readonly leg_takeoff_fuel?: ReadonlyArray<ActionParam.PrimitiveType<'double'>>;
	        readonly leg_takeoff_times?: ReadonlyArray<ActionParam.PrimitiveType<'timestamp'>>;
	        readonly log_date?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly maintenance_notes?: ActionParam.PrimitiveType<'string'>;
	        readonly off_blocks_fuel?: ActionParam.PrimitiveType<'double'>;
	        readonly off_blocks_time?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly on_blocks_fuel?: ActionParam.PrimitiveType<'double'>;
	        readonly on_blocks_time?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly pax_number?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly shutdown_fuel?: ActionParam.PrimitiveType<'double'>;
	        readonly startup_fuel?: ActionParam.PrimitiveType<'double'>;
	        readonly startup_time: ActionParam.PrimitiveType<'timestamp'>;
	        readonly total_bags_pax_weight?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly total_flight_time?: ActionParam.PrimitiveType<'integer'>;
	        readonly total_fuel_burned?: ActionParam.PrimitiveType<'double'>;
	        readonly total_pax_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly total_time: ActionParam.PrimitiveType<'integer'>;
	        readonly waypoint_actual_fuel?: ReadonlyArray<ActionParam.PrimitiveType<'double'>>;
	        readonly waypoint_actual_times?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly waypoint_names?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly waypoint_planned_fuel?: ReadonlyArray<ActionParam.PrimitiveType<'double'>>;
	        readonly waypoint_planned_times?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	    }
	    interface Signatures {
	        applyAction<OP extends ApplyActionOptions>(args: createFlightLogObject.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<createFlightLogObject.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * @param {ActionParam.PrimitiveType<"string">} [additional_crew_ids]
	 * @param {ActionParam.PrimitiveType<"string">} [aircraft_id]
	 * @param {ActionParam.PrimitiveType<"string">} [approach_type]
	 * @param {ActionParam.PrimitiveType<"integer">} [average_pax_weight]
	 * @param {ActionParam.PrimitiveType<"string">} [bags_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [captain_day_time]
	 * @param {ActionParam.PrimitiveType<"string">} [captain_id]
	 * @param {ActionParam.PrimitiveType<"integer">} [captain_landings]
	 * @param {ActionParam.PrimitiveType<"integer">} [captain_night_time]
	 * @param {ActionParam.PrimitiveType<"integer">} [captain_total_time]
	 * @param {ActionParam.PrimitiveType<"string">} [comments]
	 * @param {ActionParam.PrimitiveType<"integer">} [copilot_day_time]
	 * @param {ActionParam.PrimitiveType<"string">} [copilot_id]
	 * @param {ActionParam.PrimitiveType<"integer">} [copilot_landings]
	 * @param {ActionParam.PrimitiveType<"integer">} [copilot_night_time]
	 * @param {ActionParam.PrimitiveType<"integer">} [copilot_total_time]
	 * @param {ActionParam.PrimitiveType<"string">} [delay_reasons]
	 * @param {ActionParam.PrimitiveType<"string">} [device_id]
	 * @param {ActionParam.PrimitiveType<"string">} flight_id
	 * @param {ActionParam.PrimitiveType<"string">} [flight_number]
	 * @param {ActionParam.PrimitiveType<"boolean">} [has_pending_changes]
	 * @param {ActionParam.PrimitiveType<"string">} [incident_id]
	 * @param {ActionParam.PrimitiveType<"double">} [initial_fuel_uplifted]
	 * @param {ActionParam.PrimitiveType<"boolean">} [is_uploaded]
	 * @param {ActionParam.PrimitiveType<"string">} [landing_on]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [last_sync_time]
	 * @param {ActionParam.PrimitiveType<"integer">} [leg_day_minutes]
	 * @param {ActionParam.PrimitiveType<"double">} [leg_fuel_uplifted]
	 * @param {ActionParam.PrimitiveType<"string">} [leg_ids]
	 * @param {ActionParam.PrimitiveType<"double">} [leg_landing_fuel]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [leg_landing_times]
	 * @param {ActionParam.PrimitiveType<"string">} [leg_landings]
	 * @param {ActionParam.PrimitiveType<"string">} [leg_names]
	 * @param {ActionParam.PrimitiveType<"integer">} [leg_night_minutes]
	 * @param {ActionParam.PrimitiveType<"string">} [leg_pilot_flying]
	 * @param {ActionParam.PrimitiveType<"double">} [leg_planned_landing_fuel]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [leg_planned_landing_times]
	 * @param {ActionParam.PrimitiveType<"double">} [leg_planned_takeoff_fuel]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [leg_planned_takeoff_times]
	 * @param {ActionParam.PrimitiveType<"double">} [leg_takeoff_fuel]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [leg_takeoff_times]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [log_date]
	 * @param {ActionParam.PrimitiveType<"string">} [maintenance_notes]
	 * @param {ActionParam.PrimitiveType<"double">} [off_blocks_fuel]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [off_blocks_time]
	 * @param {ActionParam.PrimitiveType<"double">} [on_blocks_fuel]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [on_blocks_time]
	 * @param {ActionParam.PrimitiveType<"integer">} [pax_number]
	 * @param {ActionParam.PrimitiveType<"double">} [shutdown_fuel]
	 * @param {ActionParam.PrimitiveType<"double">} [startup_fuel]
	 * @param {ActionParam.PrimitiveType<"timestamp">} startup_time
	 * @param {ActionParam.PrimitiveType<"string">} [total_bags_pax_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [total_flight_time]
	 * @param {ActionParam.PrimitiveType<"double">} [total_fuel_burned]
	 * @param {ActionParam.PrimitiveType<"integer">} [total_pax_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} total_time
	 * @param {ActionParam.PrimitiveType<"double">} [waypoint_actual_fuel]
	 * @param {ActionParam.PrimitiveType<"string">} [waypoint_actual_times]
	 * @param {ActionParam.PrimitiveType<"string">} [waypoint_names]
	 * @param {ActionParam.PrimitiveType<"double">} [waypoint_planned_fuel]
	 * @param {ActionParam.PrimitiveType<"string">} [waypoint_planned_times]
	 */
	export interface createFlightLogObject extends ActionDefinition<createFlightLogObject.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'createFlightLogObject';
	        displayName: 'Create Flight Log Object';
	        modifiedEntities: {
	            FlightLogObject: {
	                created: true;
	                modified: false;
	            };
	        };
	        parameters: createFlightLogObject.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.1b93f2b3-28c2-45cd-80eb-a85ac0e7b88c';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: createFlightLogObject.Signatures;
	    };
	    apiName: 'createFlightLogObject';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const createFlightLogObject: createFlightLogObject;
}
/** /@flight-app/sdk/ontology/actions/createFlightWithWaypoints **/
declare module "@flight-app/sdk/ontology/actions/createFlightWithWaypoints" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace createFlightWithWaypoints {
	    type ParamsDefinition = {
	        aircraftId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        aircraftRegion: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        alternateLocation: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        captainId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        copilotId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        displayWaypoints: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        etd: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        flightName: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        legs: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        locations: {
	            description: undefined;
	            multiplicity: true;
	            nullable: false;
	            type: 'string';
	        };
	        medicId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        region: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        rswId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        soId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        useOnlyProvidedWaypoints: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'boolean';
	        };
	    };
	    /**
	     * createFlightWithWaypoints
	     */
	    interface Params {
	        readonly aircraftId?: ActionParam.PrimitiveType<'string'>;
	        readonly aircraftRegion?: ActionParam.PrimitiveType<'string'>;
	        readonly alternateLocation?: ActionParam.PrimitiveType<'string'>;
	        readonly captainId?: ActionParam.PrimitiveType<'string'>;
	        readonly copilotId?: ActionParam.PrimitiveType<'string'>;
	        readonly displayWaypoints?: ActionParam.PrimitiveType<'string'>;
	        readonly etd?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly flightName: ActionParam.PrimitiveType<'string'>;
	        readonly legs?: ActionParam.PrimitiveType<'string'>;
	        readonly locations: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly medicId?: ActionParam.PrimitiveType<'string'>;
	        readonly region?: ActionParam.PrimitiveType<'string'>;
	        readonly rswId?: ActionParam.PrimitiveType<'string'>;
	        readonly soId?: ActionParam.PrimitiveType<'string'>;
	        readonly useOnlyProvidedWaypoints?: ActionParam.PrimitiveType<'boolean'>;
	    }
	    interface Signatures {
	        /**
	         * createFlightWithWaypoints
	         */
	        applyAction<OP extends ApplyActionOptions>(args: createFlightWithWaypoints.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<createFlightWithWaypoints.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * createFlightWithWaypoints
	 * @param {ActionParam.PrimitiveType<"string">} [aircraftId]
	 * @param {ActionParam.PrimitiveType<"string">} [aircraftRegion]
	 * @param {ActionParam.PrimitiveType<"string">} [alternateLocation]
	 * @param {ActionParam.PrimitiveType<"string">} [captainId]
	 * @param {ActionParam.PrimitiveType<"string">} [copilotId]
	 * @param {ActionParam.PrimitiveType<"string">} [displayWaypoints]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [etd]
	 * @param {ActionParam.PrimitiveType<"string">} flightName
	 * @param {ActionParam.PrimitiveType<"string">} [legs]
	 * @param {ActionParam.PrimitiveType<"string">} locations
	 * @param {ActionParam.PrimitiveType<"string">} [medicId]
	 * @param {ActionParam.PrimitiveType<"string">} [region]
	 * @param {ActionParam.PrimitiveType<"string">} [rswId]
	 * @param {ActionParam.PrimitiveType<"string">} [soId]
	 * @param {ActionParam.PrimitiveType<"boolean">} [useOnlyProvidedWaypoints]
	 */
	export interface createFlightWithWaypoints extends ActionDefinition<createFlightWithWaypoints.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'createFlightWithWaypoints';
	        description: 'createFlightWithWaypoints';
	        displayName: 'createFlightWithWaypoints';
	        modifiedEntities: {};
	        parameters: createFlightWithWaypoints.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.544553d2-9cc6-44c8-bdf9-a6f4d049a32b';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: createFlightWithWaypoints.Signatures;
	    };
	    apiName: 'createFlightWithWaypoints';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const createFlightWithWaypoints: createFlightWithWaypoints;
}
/** /@flight-app/sdk/ontology/actions/createNewFlightFp2 **/
declare module "@flight-app/sdk/ontology/actions/createNewFlightFp2" {
	import type { ActionDefinition, ActionMetadata, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { User } from '@flight-app/sdk/ontology/objects/User';
	import type { Asset } from '@flight-app/sdk/ontology/objects/Asset';
	export namespace createNewFlightFp2 {
	    type ParamsDefinition = {
	        aircraftId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: ActionMetadata.DataType.Object<Asset>;
	        };
	        aircraftRegion: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        alternateLocation: {
	            description: 'Will find best alternate for if left blank';
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        asset_idx: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        captainId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        copilotId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        displayWaypoints: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        etd: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        flightName: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        locations: {
	            description: undefined;
	            multiplicity: true;
	            nullable: false;
	            type: 'string';
	        };
	        medicId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        new_parameter: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        region: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        rswId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        soId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        useDirectRoutes: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'boolean';
	        };
	    };
	    /**
	     * Creates a new flight for FP2.0
	     */
	    interface Params {
	        readonly aircraftId: ActionParam.ObjectType<Asset>;
	        readonly aircraftRegion?: ActionParam.PrimitiveType<'string'>;
	        /**
	         * Will find best alternate for if left blank
	         */
	        readonly alternateLocation?: ActionParam.PrimitiveType<'string'>;
	        readonly asset_idx: ActionParam.PrimitiveType<'string'>;
	        readonly captainId?: ActionParam.ObjectType<User>;
	        readonly copilotId?: ActionParam.ObjectType<User>;
	        readonly displayWaypoints?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly etd?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly flightName: ActionParam.PrimitiveType<'string'>;
	        readonly locations: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly medicId?: ActionParam.ObjectType<User>;
	        readonly new_parameter?: ActionParam.PrimitiveType<'string'>;
	        readonly region?: ActionParam.PrimitiveType<'string'>;
	        readonly rswId?: ActionParam.ObjectType<User>;
	        readonly soId?: ActionParam.ObjectType<User>;
	        readonly useDirectRoutes?: ActionParam.PrimitiveType<'boolean'>;
	    }
	    interface Signatures {
	        /**
	         * Creates a new flight for FP2.0
	         */
	        applyAction<OP extends ApplyActionOptions>(args: createNewFlightFp2.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<createNewFlightFp2.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Creates a new flight for FP2.0
	 * @param {ActionParam.ObjectType<Asset>} aircraftId
	 * @param {ActionParam.PrimitiveType<"string">} [aircraftRegion]
	 * @param {ActionParam.PrimitiveType<"string">} [alternateLocation] Will find best alternate for if left blank
	 * @param {ActionParam.PrimitiveType<"string">} asset_idx
	 * @param {ActionParam.ObjectType<User>} [captainId]
	 * @param {ActionParam.ObjectType<User>} [copilotId]
	 * @param {ActionParam.PrimitiveType<"string">} [displayWaypoints]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [etd]
	 * @param {ActionParam.PrimitiveType<"string">} flightName
	 * @param {ActionParam.PrimitiveType<"string">} locations
	 * @param {ActionParam.ObjectType<User>} [medicId]
	 * @param {ActionParam.PrimitiveType<"string">} [new_parameter]
	 * @param {ActionParam.PrimitiveType<"string">} [region]
	 * @param {ActionParam.ObjectType<User>} [rswId]
	 * @param {ActionParam.ObjectType<User>} [soId]
	 * @param {ActionParam.PrimitiveType<"boolean">} [useDirectRoutes]
	 */
	export interface createNewFlightFp2 extends ActionDefinition<createNewFlightFp2.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'createNewFlightFp2';
	        description: 'Creates a new flight for FP2.0';
	        displayName: 'Create New Flight FP2';
	        modifiedEntities: {};
	        parameters: createNewFlightFp2.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.cde0645b-8f27-4547-b74d-6eaa8ffb8581';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: createNewFlightFp2.Signatures;
	    };
	    apiName: 'createNewFlightFp2';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const createNewFlightFp2: createNewFlightFp2;
}
/** /@flight-app/sdk/ontology/actions/createOrModifyMainFuelFastPlanner **/
declare module "@flight-app/sdk/ontology/actions/createOrModifyMainFuelFastPlanner" {
	import type { ActionDefinition, ActionMetadata, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { MainFuelV2 } from '@flight-app/sdk/ontology/objects/MainFuelV2';
	export namespace createOrModifyMainFuelFastPlanner {
	    type ParamsDefinition = {
	        actual_bag_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_fuel_burneds: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_fuel_uplifteds: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_landing_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_leg_names: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        actual_off_blocks_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_on_blocks_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_passenger_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_passengers: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_take_off_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        actual_total_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        aircraft: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        automation_summary: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        available_passengers: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        available_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        average_bag_weight: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        average_passenger_weight: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        calculation_unit: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        created_at: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        display_unit: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        flight_number: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        flight_uuid: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        main_fuel_v2: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: ActionMetadata.DataType.Object<MainFuelV2>;
	        };
	        min_fuel_breakdown: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        min_total_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        passenger_adjustment_data: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        planned_alternate_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_approach_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_ara_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_contingency_alternate_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_contingency_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_deck_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_extra_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_reserve_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_taxi_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        planned_trip_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        policy_name: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        policy_uuid: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        refuel_amounts: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        refuel_stop_indices: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        requested_bag_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        requested_passenger_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        requested_passengers: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        requested_total_weight: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        round_trip_fuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_approach_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_ara_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_contingency_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_deck_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_descriptions: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        stop_excess_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_extra_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_locations: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        stop_required_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_reserve_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_taxi_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stop_trip_fuels: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'integer';
	        };
	        stops_markdown_table: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        total_fuel_burned: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        total_fuel_uplifted: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'integer';
	        };
	        updated_at: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        uses_combined_weight: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'boolean';
	        };
	        weight_balance_data: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	    };
	    /**
	     * Fast planner updating the fuel object
	     */
	    interface Params {
	        readonly actual_bag_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_fuel_burneds?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_fuel_uplifteds?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_landing_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_leg_names?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly actual_off_blocks_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_on_blocks_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_passenger_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_passengers?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_take_off_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly actual_total_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly aircraft?: ActionParam.PrimitiveType<'string'>;
	        readonly automation_summary?: ActionParam.PrimitiveType<'string'>;
	        readonly available_passengers?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly available_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly average_bag_weight?: ActionParam.PrimitiveType<'integer'>;
	        readonly average_passenger_weight?: ActionParam.PrimitiveType<'integer'>;
	        readonly calculation_unit?: ActionParam.PrimitiveType<'string'>;
	        readonly created_at?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly display_unit?: ActionParam.PrimitiveType<'string'>;
	        readonly flight_number?: ActionParam.PrimitiveType<'string'>;
	        readonly flight_uuid?: ActionParam.PrimitiveType<'string'>;
	        readonly main_fuel_v2: ActionParam.ObjectType<MainFuelV2>;
	        readonly min_fuel_breakdown?: ActionParam.PrimitiveType<'string'>;
	        readonly min_total_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly passenger_adjustment_data?: ActionParam.PrimitiveType<'string'>;
	        readonly planned_alternate_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_approach_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_ara_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_contingency_alternate_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_contingency_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_deck_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_extra_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_reserve_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_taxi_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly planned_trip_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly policy_name?: ActionParam.PrimitiveType<'string'>;
	        readonly policy_uuid?: ActionParam.PrimitiveType<'string'>;
	        readonly refuel_amounts?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly refuel_stop_indices?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly requested_bag_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly requested_passenger_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly requested_passengers?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly requested_total_weight?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly round_trip_fuel?: ActionParam.PrimitiveType<'integer'>;
	        readonly stop_approach_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_ara_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_contingency_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_deck_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_descriptions?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly stop_excess_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_extra_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_locations?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly stop_required_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_reserve_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_taxi_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stop_trip_fuels?: ReadonlyArray<ActionParam.PrimitiveType<'integer'>>;
	        readonly stops_markdown_table?: ActionParam.PrimitiveType<'string'>;
	        readonly total_fuel_burned?: ActionParam.PrimitiveType<'integer'>;
	        readonly total_fuel_uplifted?: ActionParam.PrimitiveType<'integer'>;
	        readonly updated_at?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly uses_combined_weight?: ActionParam.PrimitiveType<'boolean'>;
	        readonly weight_balance_data?: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * Fast planner updating the fuel object
	         */
	        applyAction<OP extends ApplyActionOptions>(args: createOrModifyMainFuelFastPlanner.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<createOrModifyMainFuelFastPlanner.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Fast planner updating the fuel object
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_bag_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_fuel_burneds]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_fuel_uplifteds]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_landing_fuels]
	 * @param {ActionParam.PrimitiveType<"string">} [actual_leg_names]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_off_blocks_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_on_blocks_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_passenger_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_passengers]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_take_off_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [actual_total_weight]
	 * @param {ActionParam.PrimitiveType<"string">} [aircraft]
	 * @param {ActionParam.PrimitiveType<"string">} [automation_summary]
	 * @param {ActionParam.PrimitiveType<"integer">} [available_passengers]
	 * @param {ActionParam.PrimitiveType<"integer">} [available_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [average_bag_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [average_passenger_weight]
	 * @param {ActionParam.PrimitiveType<"string">} [calculation_unit]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [created_at]
	 * @param {ActionParam.PrimitiveType<"string">} [display_unit]
	 * @param {ActionParam.PrimitiveType<"string">} [flight_number]
	 * @param {ActionParam.PrimitiveType<"string">} [flight_uuid]
	 * @param {ActionParam.ObjectType<MainFuelV2>} main_fuel_v2
	 * @param {ActionParam.PrimitiveType<"string">} [min_fuel_breakdown]
	 * @param {ActionParam.PrimitiveType<"integer">} [min_total_fuel]
	 * @param {ActionParam.PrimitiveType<"string">} [passenger_adjustment_data]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_alternate_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_approach_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_ara_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_contingency_alternate_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_contingency_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_deck_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_extra_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_reserve_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_taxi_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [planned_trip_fuel]
	 * @param {ActionParam.PrimitiveType<"string">} [policy_name]
	 * @param {ActionParam.PrimitiveType<"string">} [policy_uuid]
	 * @param {ActionParam.PrimitiveType<"integer">} [refuel_amounts]
	 * @param {ActionParam.PrimitiveType<"integer">} [refuel_stop_indices]
	 * @param {ActionParam.PrimitiveType<"integer">} [requested_bag_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [requested_passenger_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [requested_passengers]
	 * @param {ActionParam.PrimitiveType<"integer">} [requested_total_weight]
	 * @param {ActionParam.PrimitiveType<"integer">} [round_trip_fuel]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_approach_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_ara_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_contingency_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_deck_fuels]
	 * @param {ActionParam.PrimitiveType<"string">} [stop_descriptions]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_excess_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_extra_fuels]
	 * @param {ActionParam.PrimitiveType<"string">} [stop_locations]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_required_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_reserve_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_taxi_fuels]
	 * @param {ActionParam.PrimitiveType<"integer">} [stop_trip_fuels]
	 * @param {ActionParam.PrimitiveType<"string">} [stops_markdown_table]
	 * @param {ActionParam.PrimitiveType<"integer">} [total_fuel_burned]
	 * @param {ActionParam.PrimitiveType<"integer">} [total_fuel_uplifted]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [updated_at]
	 * @param {ActionParam.PrimitiveType<"boolean">} [uses_combined_weight]
	 * @param {ActionParam.PrimitiveType<"string">} [weight_balance_data]
	 */
	export interface createOrModifyMainFuelFastPlanner extends ActionDefinition<createOrModifyMainFuelFastPlanner.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'createOrModifyMainFuelFastPlanner';
	        description: 'Fast planner updating the fuel object';
	        displayName: 'Create or Modify Main Fuel FastPlanner';
	        modifiedEntities: {
	            MainFuelV2: {
	                created: true;
	                modified: true;
	            };
	        };
	        parameters: createOrModifyMainFuelFastPlanner.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.aa1cf2ae-d61d-410b-bf01-3a4a66fdafa8';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: createOrModifyMainFuelFastPlanner.Signatures;
	    };
	    apiName: 'createOrModifyMainFuelFastPlanner';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const createOrModifyMainFuelFastPlanner: createOrModifyMainFuelFastPlanner;
}
/** /@flight-app/sdk/ontology/actions/deleteLocationAllgtlocationsV2 **/
declare module "@flight-app/sdk/ontology/actions/deleteLocationAllgtlocationsV2" {
	import type { ActionDefinition, ActionMetadata, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { AllGtLocationsV2 } from '@flight-app/sdk/ontology/objects/AllGtLocationsV2';
	export namespace deleteLocationAllgtlocationsV2 {
	    type ParamsDefinition = {
	        AllGtLocationsV2: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: ActionMetadata.DataType.Object<AllGtLocationsV2>;
	        };
	    };
	    /**
	     * Delate a Location from AllLocationsV2
	     */
	    interface Params {
	        readonly AllGtLocationsV2: ActionParam.ObjectType<AllGtLocationsV2>;
	    }
	    interface Signatures {
	        /**
	         * Delate a Location from AllLocationsV2
	         */
	        applyAction<OP extends ApplyActionOptions>(args: deleteLocationAllgtlocationsV2.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<deleteLocationAllgtlocationsV2.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Delate a Location from AllLocationsV2
	 * @param {ActionParam.ObjectType<AllGtLocationsV2>} AllGtLocationsV2
	 */
	export interface deleteLocationAllgtlocationsV2 extends ActionDefinition<deleteLocationAllgtlocationsV2.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'deleteLocationAllgtlocationsV2';
	        description: 'Delate a Location from AllLocationsV2';
	        displayName: 'Delete Location ALLGTLocationsV2';
	        modifiedEntities: {};
	        parameters: deleteLocationAllgtlocationsV2.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.8c373b87-2698-4d56-a072-8385217a752b';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: deleteLocationAllgtlocationsV2.Signatures;
	    };
	    apiName: 'deleteLocationAllgtlocationsV2';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const deleteLocationAllgtlocationsV2: deleteLocationAllgtlocationsV2;
}
/** /@flight-app/sdk/ontology/actions/editExistingFlightFp2 **/
declare module "@flight-app/sdk/ontology/actions/editExistingFlightFp2" {
	import type { ActionDefinition, ActionMetadata, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { User } from '@flight-app/sdk/ontology/objects/User';
	import type { FuelPolicyBuilder } from '@flight-app/sdk/ontology/objects/FuelPolicyBuilder';
	import type { MainFlightObjectFp2 } from '@flight-app/sdk/ontology/objects/MainFlightObjectFp2';
	import type { Asset } from '@flight-app/sdk/ontology/objects/Asset';
	export namespace editExistingFlightFp2 {
	    type ParamsDefinition = {
	        alternateName: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        combinedWaypoints: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        displayWaypoints: {
	            description: "Don't delete or change the stops or destination here, just edit the waypoints";
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: ActionMetadata.DataType.Object<MainFlightObjectFp2>;
	        };
	        legWaypointsString: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        new_parameter: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        newAircraftId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<Asset>;
	        };
	        newAircraftRegion: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        newCaptainId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        newCopilotId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        newCreatedBy: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        newETD: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        newFlightNumber: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        newFuelPlanId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        newLogId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        newMedicId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        newPolicyUuid: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<FuelPolicyBuilder>;
	        };
	        newRegion: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        newRswId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        newSoId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<User>;
	        };
	        newTimingId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        newWeightBalanceId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        stops: {
	            description: 'Change the stops or the route here.';
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        useDirectRoutes: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'boolean';
	        };
	    };
	    /**
	     * Edit existing flight FP2
	     */
	    interface Params {
	        readonly alternateName?: ActionParam.PrimitiveType<'string'>;
	        readonly combinedWaypoints?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        /**
	         * Don't delete or change the stops or destination here, just edit the waypoints
	         */
	        readonly displayWaypoints?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly flightId: ActionParam.ObjectType<MainFlightObjectFp2>;
	        readonly legWaypointsString?: ActionParam.PrimitiveType<'string'>;
	        readonly new_parameter: ActionParam.PrimitiveType<'string'>;
	        readonly newAircraftId?: ActionParam.ObjectType<Asset>;
	        readonly newAircraftRegion?: ActionParam.PrimitiveType<'string'>;
	        readonly newCaptainId?: ActionParam.ObjectType<User>;
	        readonly newCopilotId?: ActionParam.ObjectType<User>;
	        readonly newCreatedBy?: ActionParam.PrimitiveType<'string'>;
	        readonly newETD?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly newFlightNumber?: ActionParam.PrimitiveType<'string'>;
	        readonly newFuelPlanId?: ActionParam.PrimitiveType<'string'>;
	        readonly newLogId?: ActionParam.PrimitiveType<'string'>;
	        readonly newMedicId?: ActionParam.ObjectType<User>;
	        readonly newPolicyUuid?: ActionParam.ObjectType<FuelPolicyBuilder>;
	        readonly newRegion?: ActionParam.PrimitiveType<'string'>;
	        readonly newRswId?: ActionParam.ObjectType<User>;
	        readonly newSoId?: ActionParam.ObjectType<User>;
	        readonly newTimingId?: ActionParam.PrimitiveType<'string'>;
	        readonly newWeightBalanceId?: ActionParam.PrimitiveType<'string'>;
	        /**
	         * Change the stops or the route here.
	         */
	        readonly stops?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly useDirectRoutes?: ActionParam.PrimitiveType<'boolean'>;
	    }
	    interface Signatures {
	        /**
	         * Edit existing flight FP2
	         */
	        applyAction<OP extends ApplyActionOptions>(args: editExistingFlightFp2.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<editExistingFlightFp2.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Edit existing flight FP2
	 * @param {ActionParam.PrimitiveType<"string">} [alternateName]
	 * @param {ActionParam.PrimitiveType<"string">} [combinedWaypoints]
	 * @param {ActionParam.PrimitiveType<"string">} [displayWaypoints] Don't delete or change the stops or destination here, just edit the waypoints
	 * @param {ActionParam.ObjectType<MainFlightObjectFp2>} flightId
	 * @param {ActionParam.PrimitiveType<"string">} [legWaypointsString]
	 * @param {ActionParam.PrimitiveType<"string">} new_parameter
	 * @param {ActionParam.ObjectType<Asset>} [newAircraftId]
	 * @param {ActionParam.PrimitiveType<"string">} [newAircraftRegion]
	 * @param {ActionParam.ObjectType<User>} [newCaptainId]
	 * @param {ActionParam.ObjectType<User>} [newCopilotId]
	 * @param {ActionParam.PrimitiveType<"string">} [newCreatedBy]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [newETD]
	 * @param {ActionParam.PrimitiveType<"string">} [newFlightNumber]
	 * @param {ActionParam.PrimitiveType<"string">} [newFuelPlanId]
	 * @param {ActionParam.PrimitiveType<"string">} [newLogId]
	 * @param {ActionParam.ObjectType<User>} [newMedicId]
	 * @param {ActionParam.ObjectType<FuelPolicyBuilder>} [newPolicyUuid]
	 * @param {ActionParam.PrimitiveType<"string">} [newRegion]
	 * @param {ActionParam.ObjectType<User>} [newRswId]
	 * @param {ActionParam.ObjectType<User>} [newSoId]
	 * @param {ActionParam.PrimitiveType<"string">} [newTimingId]
	 * @param {ActionParam.PrimitiveType<"string">} [newWeightBalanceId]
	 * @param {ActionParam.PrimitiveType<"string">} [stops] Change the stops or the route here.
	 * @param {ActionParam.PrimitiveType<"boolean">} [useDirectRoutes]
	 */
	export interface editExistingFlightFp2 extends ActionDefinition<editExistingFlightFp2.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'editExistingFlightFp2';
	        description: 'Edit existing flight FP2';
	        displayName: 'Edit Existing Flight FP2';
	        modifiedEntities: {};
	        parameters: editExistingFlightFp2.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.24a550b8-ba6e-44ee-bc79-d3bb8fdf8c8f';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: editExistingFlightFp2.Signatures;
	    };
	    apiName: 'editExistingFlightFp2';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const editExistingFlightFp2: editExistingFlightFp2;
}
/** /@flight-app/sdk/ontology/actions/flightAppUpdateEtdAndCrew **/
declare module "@flight-app/sdk/ontology/actions/flightAppUpdateEtdAndCrew" {
	import type { ActionDefinition, ActionMetadata, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { MainFlightObjectFp2 } from '@flight-app/sdk/ontology/objects/MainFlightObjectFp2';
	export namespace flightAppUpdateEtdAndCrew {
	    type ParamsDefinition = {
	        captain: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        copilot: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        etd: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'timestamp';
	        };
	        main_flight_object_fp2: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: ActionMetadata.DataType.Object<MainFlightObjectFp2>;
	        };
	    };
	    /**
	     * Simple action to update departure time and the crew
	     */
	    interface Params {
	        readonly captain?: ActionParam.PrimitiveType<'string'>;
	        readonly copilot?: ActionParam.PrimitiveType<'string'>;
	        readonly etd: ActionParam.PrimitiveType<'timestamp'>;
	        readonly main_flight_object_fp2: ActionParam.ObjectType<MainFlightObjectFp2>;
	    }
	    interface Signatures {
	        /**
	         * Simple action to update departure time and the crew
	         */
	        applyAction<OP extends ApplyActionOptions>(args: flightAppUpdateEtdAndCrew.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<flightAppUpdateEtdAndCrew.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Simple action to update departure time and the crew
	 * @param {ActionParam.PrimitiveType<"string">} [captain]
	 * @param {ActionParam.PrimitiveType<"string">} [copilot]
	 * @param {ActionParam.PrimitiveType<"timestamp">} etd
	 * @param {ActionParam.ObjectType<MainFlightObjectFp2>} main_flight_object_fp2
	 */
	export interface flightAppUpdateEtdAndCrew extends ActionDefinition<flightAppUpdateEtdAndCrew.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'flightAppUpdateEtdAndCrew';
	        description: 'Simple action to update departure time and the crew';
	        displayName: 'FlightApp update ETD and crew';
	        modifiedEntities: {
	            MainFlightObjectFp2: {
	                created: false;
	                modified: true;
	            };
	        };
	        parameters: flightAppUpdateEtdAndCrew.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.774824af-c7a4-470e-bf3a-eb20d0ad6661';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: flightAppUpdateEtdAndCrew.Signatures;
	    };
	    apiName: 'flightAppUpdateEtdAndCrew';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const flightAppUpdateEtdAndCrew: flightAppUpdateEtdAndCrew;
}
/** /@flight-app/sdk/ontology/actions/flightFuelFpv2 **/
declare module "@flight-app/sdk/ontology/actions/flightFuelFpv2" {
	import type { ActionDefinition, ActionMetadata, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { FuelPolicyBuilder } from '@flight-app/sdk/ontology/objects/FuelPolicyBuilder';
	export namespace flightFuelFpv2 {
	    type ParamsDefinition = {
	        extraFuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        extraFuelReason: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        manualApproachFuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        manualAraFuel: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        new_parameter: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        selectedPolicyUuid: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: ActionMetadata.DataType.Object<FuelPolicyBuilder>;
	        };
	    };
	    /**
	     * Flight fuel function
	     */
	    interface Params {
	        readonly extraFuel?: ActionParam.PrimitiveType<'double'>;
	        readonly extraFuelReason?: ActionParam.PrimitiveType<'string'>;
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	        readonly manualApproachFuel?: ActionParam.PrimitiveType<'double'>;
	        readonly manualAraFuel?: ActionParam.PrimitiveType<'double'>;
	        readonly new_parameter?: ActionParam.PrimitiveType<'string'>;
	        readonly selectedPolicyUuid?: ActionParam.ObjectType<FuelPolicyBuilder>;
	    }
	    interface Signatures {
	        /**
	         * Flight fuel function
	         */
	        applyAction<OP extends ApplyActionOptions>(args: flightFuelFpv2.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<flightFuelFpv2.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Flight fuel function
	 * @param {ActionParam.PrimitiveType<"double">} [extraFuel]
	 * @param {ActionParam.PrimitiveType<"string">} [extraFuelReason]
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 * @param {ActionParam.PrimitiveType<"double">} [manualApproachFuel]
	 * @param {ActionParam.PrimitiveType<"double">} [manualAraFuel]
	 * @param {ActionParam.PrimitiveType<"string">} [new_parameter]
	 * @param {ActionParam.ObjectType<FuelPolicyBuilder>} [selectedPolicyUuid]
	 */
	export interface flightFuelFpv2 extends ActionDefinition<flightFuelFpv2.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'flightFuelFpv2';
	        description: 'Flight fuel function';
	        displayName: 'Flight Fuel FPV2';
	        modifiedEntities: {};
	        parameters: flightFuelFpv2.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.27eb488b-efc1-439a-b943-8cd9c695b87d';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: flightFuelFpv2.Signatures;
	    };
	    apiName: 'flightFuelFpv2';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const flightFuelFpv2: flightFuelFpv2;
}
/** /@flight-app/sdk/ontology/actions/flightWeatherRiskTriggeredLightningWaves **/
declare module "@flight-app/sdk/ontology/actions/flightWeatherRiskTriggeredLightningWaves" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace flightWeatherRiskTriggeredLightningWaves {
	    type ParamsDefinition = {
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	    };
	    /**
	     * Flight Weather Risk Triggered Lightning Waves
	     */
	    interface Params {
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * Flight Weather Risk Triggered Lightning Waves
	         */
	        applyAction<OP extends ApplyActionOptions>(args: flightWeatherRiskTriggeredLightningWaves.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<flightWeatherRiskTriggeredLightningWaves.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Flight Weather Risk Triggered Lightning Waves
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 */
	export interface flightWeatherRiskTriggeredLightningWaves extends ActionDefinition<flightWeatherRiskTriggeredLightningWaves.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'flightWeatherRiskTriggeredLightningWaves';
	        description: 'Flight Weather Risk Triggered Lightning Waves';
	        displayName: 'Flight Weather Risk Triggered Lightning Waves';
	        modifiedEntities: {};
	        parameters: flightWeatherRiskTriggeredLightningWaves.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.1209a258-07d8-4a42-a7fc-914d16c94c62';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: flightWeatherRiskTriggeredLightningWaves.Signatures;
	    };
	    apiName: 'flightWeatherRiskTriggeredLightningWaves';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const flightWeatherRiskTriggeredLightningWaves: flightWeatherRiskTriggeredLightningWaves;
}
/** /@flight-app/sdk/ontology/actions/getGlobalWindsForFlight **/
declare module "@flight-app/sdk/ontology/actions/getGlobalWindsForFlight" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace getGlobalWindsForFlight {
	    type ParamsDefinition = {
	        customEtd: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        durationHours: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'double';
	        };
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	    };
	    /**
	     * Get global winds for flight
	     */
	    interface Params {
	        readonly customEtd?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly durationHours?: ActionParam.PrimitiveType<'double'>;
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * Get global winds for flight
	         */
	        applyAction<OP extends ApplyActionOptions>(args: getGlobalWindsForFlight.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<getGlobalWindsForFlight.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Get global winds for flight
	 * @param {ActionParam.PrimitiveType<"timestamp">} [customEtd]
	 * @param {ActionParam.PrimitiveType<"double">} [durationHours]
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 */
	export interface getGlobalWindsForFlight extends ActionDefinition<getGlobalWindsForFlight.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'getGlobalWindsForFlight';
	        description: 'Get global winds for flight';
	        displayName: 'Get global winds for flight';
	        modifiedEntities: {};
	        parameters: getGlobalWindsForFlight.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.1c814b6a-c6bf-4997-9f78-0de7c01e6865';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: getGlobalWindsForFlight.Signatures;
	    };
	    apiName: 'getGlobalWindsForFlight';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const getGlobalWindsForFlight: getGlobalWindsForFlight;
}
/** /@flight-app/sdk/ontology/actions/getWeatherForAlternates **/
declare module "@flight-app/sdk/ontology/actions/getWeatherForAlternates" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace getWeatherForAlternates {
	    type ParamsDefinition = {
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        updatedEtd: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	    };
	    /**
	     * Get weather for alternates with geoline
	     */
	    interface Params {
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	        readonly updatedEtd?: ActionParam.PrimitiveType<'timestamp'>;
	    }
	    interface Signatures {
	        /**
	         * Get weather for alternates with geoline
	         */
	        applyAction<OP extends ApplyActionOptions>(args: getWeatherForAlternates.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<getWeatherForAlternates.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Get weather for alternates with geoline
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 * @param {ActionParam.PrimitiveType<"timestamp">} [updatedEtd]
	 */
	export interface getWeatherForAlternates extends ActionDefinition<getWeatherForAlternates.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'getWeatherForAlternates';
	        description: 'Get weather for alternates with geoline';
	        displayName: 'Get weather for alternates';
	        modifiedEntities: {};
	        parameters: getWeatherForAlternates.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.862aa561-b574-4049-a841-71a295cb43b4';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: getWeatherForAlternates.Signatures;
	    };
	    apiName: 'getWeatherForAlternates';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const getWeatherForAlternates: getWeatherForAlternates;
}
/** /@flight-app/sdk/ontology/actions/pseudoWeatherSegments **/
declare module "@flight-app/sdk/ontology/actions/pseudoWeatherSegments" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace pseudoWeatherSegments {
	    type ParamsDefinition = {
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	    };
	    /**
	     * Pseudo weather segments
	     */
	    interface Params {
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * Pseudo weather segments
	         */
	        applyAction<OP extends ApplyActionOptions>(args: pseudoWeatherSegments.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<pseudoWeatherSegments.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Pseudo weather segments
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 */
	export interface pseudoWeatherSegments extends ActionDefinition<pseudoWeatherSegments.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'pseudoWeatherSegments';
	        description: 'Pseudo weather segments';
	        displayName: 'Pseudo weather segments';
	        modifiedEntities: {};
	        parameters: pseudoWeatherSegments.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.175d984c-4e02-4a22-b95a-98d8fec6409a';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: pseudoWeatherSegments.Signatures;
	    };
	    apiName: 'pseudoWeatherSegments';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const pseudoWeatherSegments: pseudoWeatherSegments;
}
/** /@flight-app/sdk/ontology/actions/singleFlightAutomation **/
declare module "@flight-app/sdk/ontology/actions/singleFlightAutomation" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace singleFlightAutomation {
	    type ParamsDefinition = {
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	    };
	    /**
	     * Single flight automation
	     */
	    interface Params {
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * Single flight automation
	         */
	        applyAction<OP extends ApplyActionOptions>(args: singleFlightAutomation.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<singleFlightAutomation.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Single flight automation
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 */
	export interface singleFlightAutomation extends ActionDefinition<singleFlightAutomation.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'singleFlightAutomation';
	        description: 'Single flight automation';
	        displayName: 'Single flight automation';
	        modifiedEntities: {};
	        parameters: singleFlightAutomation.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.8159989a-c109-4b3d-a744-d9924b9ff300';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: singleFlightAutomation.Signatures;
	    };
	    apiName: 'singleFlightAutomation';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const singleFlightAutomation: singleFlightAutomation;
}
/** /@flight-app/sdk/ontology/actions/updateAlternantOneStep **/
declare module "@flight-app/sdk/ontology/actions/updateAlternantOneStep" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace updateAlternantOneStep {
	    type ParamsDefinition = {
	        alternateLocation: {
	            description: 'Leave the to location blank to auto find the nearest alternant  with weather.';
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        splitPointLocation: {
	            description: 'Any location or the destination on the flight';
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	    };
	    /**
	     * Updates the alternate and re calculates fuel and timing
	     */
	    interface Params {
	        /**
	         * Leave the to location blank to auto find the nearest alternant  with weather.
	         */
	        readonly alternateLocation?: ActionParam.PrimitiveType<'string'>;
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	        /**
	         * Any location or the destination on the flight
	         */
	        readonly splitPointLocation: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * Updates the alternate and re calculates fuel and timing
	         */
	        applyAction<OP extends ApplyActionOptions>(args: updateAlternantOneStep.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<updateAlternantOneStep.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Updates the alternate and re calculates fuel and timing
	 * @param {ActionParam.PrimitiveType<"string">} [alternateLocation] Leave the to location blank to auto find the nearest alternant  with weather.
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 * @param {ActionParam.PrimitiveType<"string">} splitPointLocation Any location or the destination on the flight
	 */
	export interface updateAlternantOneStep extends ActionDefinition<updateAlternantOneStep.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'updateAlternantOneStep';
	        description: 'Updates the alternate and re calculates fuel and timing';
	        displayName: 'Update Alternant one step';
	        modifiedEntities: {};
	        parameters: updateAlternantOneStep.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.18acb930-19db-4b79-992a-3cceab5e7ebf';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: updateAlternantOneStep.Signatures;
	    };
	    apiName: 'updateAlternantOneStep';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const updateAlternantOneStep: updateAlternantOneStep;
}
/** /@flight-app/sdk/ontology/actions/updateFastPlannerFlight **/
declare module "@flight-app/sdk/ontology/actions/updateFastPlannerFlight" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace updateFastPlannerFlight {
	    type ParamsDefinition = {
	        aircraftId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        aircraftRegion: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        alternateLocation: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        captainId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        copilotId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        etd: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	        flightId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        flightName: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        fuelPlanId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        locations: {
	            description: undefined;
	            multiplicity: true;
	            nullable: true;
	            type: 'string';
	        };
	        medicId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        policyUuid: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        region: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        rswId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        soId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        structuredWaypoints: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        timingId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	        useOnlyProvidedWaypoints: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'boolean';
	        };
	        weightBalanceId: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	    };
	    /**
	     * updateFastPlannerFlight
	     */
	    interface Params {
	        readonly aircraftId?: ActionParam.PrimitiveType<'string'>;
	        readonly aircraftRegion?: ActionParam.PrimitiveType<'string'>;
	        readonly alternateLocation?: ActionParam.PrimitiveType<'string'>;
	        readonly captainId?: ActionParam.PrimitiveType<'string'>;
	        readonly copilotId?: ActionParam.PrimitiveType<'string'>;
	        readonly etd?: ActionParam.PrimitiveType<'timestamp'>;
	        readonly flightId: ActionParam.PrimitiveType<'string'>;
	        readonly flightName?: ActionParam.PrimitiveType<'string'>;
	        readonly fuelPlanId?: ActionParam.PrimitiveType<'string'>;
	        readonly locations?: ReadonlyArray<ActionParam.PrimitiveType<'string'>>;
	        readonly medicId?: ActionParam.PrimitiveType<'string'>;
	        readonly policyUuid?: ActionParam.PrimitiveType<'string'>;
	        readonly region?: ActionParam.PrimitiveType<'string'>;
	        readonly rswId?: ActionParam.PrimitiveType<'string'>;
	        readonly soId?: ActionParam.PrimitiveType<'string'>;
	        readonly structuredWaypoints?: ActionParam.PrimitiveType<'string'>;
	        readonly timingId?: ActionParam.PrimitiveType<'string'>;
	        readonly useOnlyProvidedWaypoints?: ActionParam.PrimitiveType<'boolean'>;
	        readonly weightBalanceId?: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        /**
	         * updateFastPlannerFlight
	         */
	        applyAction<OP extends ApplyActionOptions>(args: updateFastPlannerFlight.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<updateFastPlannerFlight.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * updateFastPlannerFlight
	 * @param {ActionParam.PrimitiveType<"string">} [aircraftId]
	 * @param {ActionParam.PrimitiveType<"string">} [aircraftRegion]
	 * @param {ActionParam.PrimitiveType<"string">} [alternateLocation]
	 * @param {ActionParam.PrimitiveType<"string">} [captainId]
	 * @param {ActionParam.PrimitiveType<"string">} [copilotId]
	 * @param {ActionParam.PrimitiveType<"timestamp">} [etd]
	 * @param {ActionParam.PrimitiveType<"string">} flightId
	 * @param {ActionParam.PrimitiveType<"string">} [flightName]
	 * @param {ActionParam.PrimitiveType<"string">} [fuelPlanId]
	 * @param {ActionParam.PrimitiveType<"string">} [locations]
	 * @param {ActionParam.PrimitiveType<"string">} [medicId]
	 * @param {ActionParam.PrimitiveType<"string">} [policyUuid]
	 * @param {ActionParam.PrimitiveType<"string">} [region]
	 * @param {ActionParam.PrimitiveType<"string">} [rswId]
	 * @param {ActionParam.PrimitiveType<"string">} [soId]
	 * @param {ActionParam.PrimitiveType<"string">} [structuredWaypoints]
	 * @param {ActionParam.PrimitiveType<"string">} [timingId]
	 * @param {ActionParam.PrimitiveType<"boolean">} [useOnlyProvidedWaypoints]
	 * @param {ActionParam.PrimitiveType<"string">} [weightBalanceId]
	 */
	export interface updateFastPlannerFlight extends ActionDefinition<updateFastPlannerFlight.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'updateFastPlannerFlight';
	        description: 'updateFastPlannerFlight';
	        displayName: 'updateFastPlannerFlight';
	        modifiedEntities: {};
	        parameters: updateFastPlannerFlight.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.762d6ccd-c1da-4748-a1c9-3019b9811d77';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: updateFastPlannerFlight.Signatures;
	    };
	    apiName: 'updateFastPlannerFlight';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const updateFastPlannerFlight: updateFastPlannerFlight;
}
/** /@flight-app/sdk/ontology/actions/updateWeatherByRegion **/
declare module "@flight-app/sdk/ontology/actions/updateWeatherByRegion" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace updateWeatherByRegion {
	    type ParamsDefinition = {
	        regionName: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        timestamp: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'timestamp';
	        };
	    };
	    /**
	     * Update weather by region
	     */
	    interface Params {
	        readonly regionName: ActionParam.PrimitiveType<'string'>;
	        readonly timestamp?: ActionParam.PrimitiveType<'timestamp'>;
	    }
	    interface Signatures {
	        /**
	         * Update weather by region
	         */
	        applyAction<OP extends ApplyActionOptions>(args: updateWeatherByRegion.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<updateWeatherByRegion.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * Update weather by region
	 * @param {ActionParam.PrimitiveType<"string">} regionName
	 * @param {ActionParam.PrimitiveType<"timestamp">} [timestamp]
	 */
	export interface updateWeatherByRegion extends ActionDefinition<updateWeatherByRegion.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'updateWeatherByRegion';
	        description: 'Update weather by region';
	        displayName: 'Update weather by region';
	        modifiedEntities: {};
	        parameters: updateWeatherByRegion.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.1f8f4f94-7e56-487c-87c5-aa083c8a83f5';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: updateWeatherByRegion.Signatures;
	    };
	    apiName: 'updateWeatherByRegion';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const updateWeatherByRegion: updateWeatherByRegion;
}
/** /@flight-app/sdk/ontology/actions/weatherWebookNorwayV9 **/
declare module "@flight-app/sdk/ontology/actions/weatherWebookNorwayV9" {
	import type { ActionDefinition, ActionParam, ActionReturnTypeForOptions, ApplyActionOptions, ApplyBatchActionOptions } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	export namespace weatherWebookNorwayV9 {
	    type ParamsDefinition = {
	        icaoCodes: {
	            description: undefined;
	            multiplicity: false;
	            nullable: false;
	            type: 'string';
	        };
	        offset: {
	            description: undefined;
	            multiplicity: false;
	            nullable: true;
	            type: 'string';
	        };
	    };
	    interface Params {
	        readonly icaoCodes: ActionParam.PrimitiveType<'string'>;
	        readonly offset?: ActionParam.PrimitiveType<'string'>;
	    }
	    interface Signatures {
	        applyAction<OP extends ApplyActionOptions>(args: weatherWebookNorwayV9.Params, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	        batchApplyAction<OP extends ApplyBatchActionOptions>(args: ReadonlyArray<weatherWebookNorwayV9.Params>, options?: OP): Promise<ActionReturnTypeForOptions<OP>>;
	    }
	}
	/**
	 * @param {ActionParam.PrimitiveType<"string">} icaoCodes
	 * @param {ActionParam.PrimitiveType<"string">} [offset]
	 */
	export interface weatherWebookNorwayV9 extends ActionDefinition<weatherWebookNorwayV9.Signatures> {
	    __DefinitionMetadata?: {
	        apiName: 'weatherWebookNorwayV9';
	        displayName: 'WeatherWebookNorwayV9';
	        modifiedEntities: {};
	        parameters: weatherWebookNorwayV9.ParamsDefinition;
	        rid: 'ri.actions.main.action-type.9c2ad093-b44a-4e08-9fe1-0893bbc8604b';
	        status: 'EXPERIMENTAL';
	        type: 'action';
	        signatures: weatherWebookNorwayV9.Signatures;
	    };
	    apiName: 'weatherWebookNorwayV9';
	    type: 'action';
	    osdkMetadata: typeof $osdkMetadata;
	}
	export const weatherWebookNorwayV9: weatherWebookNorwayV9;
}
/** /@flight-app/sdk/ontology/objects/AirportsData **/
declare module "@flight-app/sdk/ontology/objects/AirportsData" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace AirportsData {
	    type PropertyKeys = 'runways' | 'visibilityRvrfeet' | 'geopointString' | 'minimumCeilingFt' | 'approachType' | 'visibility' | 'visibilityUsinSm' | 'airportName' | 'icaoCode' | 'region' | 'fmsRequirement' | 'costIndex' | 'uuid' | 'geopoint' | 'icaoRunways';
	    type Links = {};
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Airport Name'
	         */
	        readonly airportName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Approach Type'
	         */
	        readonly approachType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cost Index'
	         */
	        readonly costIndex: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'FMS Requirement'
	         */
	        readonly fmsRequirement: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Geopoint'
	         */
	        readonly geopoint: $PropType['geopoint'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly geopointString: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Icao Code'
	         */
	        readonly icaoCode: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Icao Runways'
	         */
	        readonly icaoRunways: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Minimum Ceiling Ft'
	         */
	        readonly minimumCeilingFt: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Region'
	         */
	        readonly region: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Runways'
	         */
	        readonly runways: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'UUID'
	         */
	        readonly uuid: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Visibility'
	         */
	        readonly visibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'visibilityRVRFeet'
	         */
	        readonly visibilityRvrfeet: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'visibilityUSinSM'
	         */
	        readonly visibilityUsinSm: $PropType['string'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<AirportsData, AirportsData.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof AirportsData.Props = keyof AirportsData.Props> = $Osdk.Instance<AirportsData, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof AirportsData.Props = keyof AirportsData.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface AirportsData extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'AirportsData';
	    __DefinitionMetadata?: {
	        objectSet: AirportsData.ObjectSet;
	        props: AirportsData.Props;
	        linksType: AirportsData.Links;
	        strictProps: AirportsData.StrictProps;
	        apiName: 'AirportsData';
	        description: 'Airports data for approaches and cost index';
	        displayName: 'Airports Data';
	        icon: {
	            type: 'blueprint';
	            color: '#3FA6DA';
	            name: 'airplane';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {};
	        pluralDisplayName: 'Airports Data';
	        primaryKeyApiName: 'uuid';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Airport Name'
	             */
	            airportName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Approach Type'
	             */
	            approachType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cost Index'
	             */
	            costIndex: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'FMS Requirement'
	             */
	            fmsRequirement: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Geopoint'
	             */
	            geopoint: $PropertyDef<'geopoint', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            geopointString: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Icao Code'
	             */
	            icaoCode: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Icao Runways'
	             */
	            icaoRunways: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Minimum Ceiling Ft'
	             */
	            minimumCeilingFt: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Region'
	             */
	            region: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Runways'
	             */
	            runways: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'UUID'
	             */
	            uuid: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Visibility'
	             */
	            visibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'visibilityRVRFeet'
	             */
	            visibilityRvrfeet: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'visibilityUSinSM'
	             */
	            visibilityUsinSm: $PropertyDef<'string', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.cb4bc133-03d1-4456-b47f-4d52a77897b1';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'icaoRunways';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const AirportsData: AirportsData;
}
/** /@flight-app/sdk/ontology/objects/AllGtLocationsV2 **/
declare module "@flight-app/sdk/ontology/objects/AllGtLocationsV2" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { NorwayWeatherSegments } from '@flight-app/sdk/ontology/objects/NorwayWeatherSegments';
	import type { InternationalWeather } from '@flight-app/sdk/ontology/objects/InternationalWeather';
	import type { NorwayWeatherXv8 } from '@flight-app/sdk/ontology/objects/NorwayWeatherXv8';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition, ObjectMetadata as $ObjectMetadata } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType, SingleLinkAccessor as $SingleLinkAccessor } from 'internal/@osdk/client';
	export namespace AllGtLocationsV2 {
	    type PropertyKeys = 'lat' | 'cachedAlternates' | 'id' | 'activeSite' | 'dataFrom' | 'fuelAvailable' | 'cachedAlternatesCount' | 'locationNotes' | 'locationRadioNotes' | 'timeZone' | 'lrmRegionId' | 'geoPoint' | 'isbase' | 'region' | 'secondaryPhone' | 'isairport' | 'uuid' | 'locAlias' | 'fuelOwner' | 'referenceId' | 'customerAlias' | 'primaryRadio' | 'routeDirection' | 'timezoneOffset' | 'locationDescription' | 'alternatesCacheTimestamp' | 'primaryPhone' | 'locationCd' | 'lon' | 'locName' | 'lastUpdateDate' | 'locationType';
	    interface Links {
	        readonly internationalWeather: $SingleLinkAccessor<InternationalWeather>;
	        readonly norwayWeatherSegments: NorwayWeatherSegments.ObjectSet;
	        readonly norwayWeatherXv8: $SingleLinkAccessor<NorwayWeatherXv8>;
	    }
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'ACTIVE SITE'
	         */
	        readonly activeSite: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternates Cache Timestamp'
	         */
	        readonly alternatesCacheTimestamp: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cached Alternates'
	         */
	        readonly cachedAlternates: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cached Alternates Count'
	         */
	        readonly cachedAlternatesCount: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'CUSTOMER ALIAS'
	         */
	        readonly customerAlias: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'DATA FROM'
	         */
	        readonly dataFrom: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'FUEL AVAILABLE'
	         */
	        readonly fuelAvailable: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'FUEL OWNER'
	         */
	        readonly fuelOwner: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Geo Point'
	         */
	        readonly geoPoint: $PropType['geopoint'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'ID'
	         */
	        readonly id: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'ISAIRPORT'
	         */
	        readonly isairport: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'ISBASE'
	         */
	        readonly isbase: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LAST UPDATE DATE'
	         */
	        readonly lastUpdateDate: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LAT'
	         */
	        readonly lat: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LOC ALIAS'
	         */
	        readonly locAlias: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LOCATION CD'
	         */
	        readonly locationCd: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LOCATION DESCRIPTION'
	         */
	        readonly locationDescription: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LOCATION NOTES'
	         */
	        readonly locationNotes: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LOCATION RADIO NOTES'
	         */
	        readonly locationRadioNotes: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LOCATION TYPE'
	         */
	        readonly locationType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Airport Icao',
	         *
	         *   description: weather segment location name
	         */
	        readonly locName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LON'
	         */
	        readonly lon: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'LRM REGION ID'
	         */
	        readonly lrmRegionId: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'PRIMARY PHONE'
	         */
	        readonly primaryPhone: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'PRIMARY RADIO'
	         */
	        readonly primaryRadio: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'REFERENCE ID'
	         */
	        readonly referenceId: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'REGION'
	         */
	        readonly region: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Route Direction'
	         */
	        readonly routeDirection: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'SECONDARY PHONE'
	         */
	        readonly secondaryPhone: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'TIME ZONE'
	         */
	        readonly timeZone: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'TIMEZONE OFFSET'
	         */
	        readonly timezoneOffset: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Uuid'
	         */
	        readonly uuid: $PropType['string'];
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<AllGtLocationsV2, AllGtLocationsV2.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof AllGtLocationsV2.Props = keyof AllGtLocationsV2.Props> = $Osdk.Instance<AllGtLocationsV2, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof AllGtLocationsV2.Props = keyof AllGtLocationsV2.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface AllGtLocationsV2 extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'AllGtLocationsV2';
	    __DefinitionMetadata?: {
	        objectSet: AllGtLocationsV2.ObjectSet;
	        props: AllGtLocationsV2.Props;
	        linksType: AllGtLocationsV2.Links;
	        strictProps: AllGtLocationsV2.StrictProps;
	        apiName: 'AllGtLocationsV2';
	        description: undefined;
	        displayName: 'All GT Locations V2';
	        icon: {
	            type: 'blueprint';
	            color: '#5f6b7c';
	            name: 'map-marker';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {
	            internationalWeather: $ObjectMetadata.Link<InternationalWeather, false>;
	            norwayWeatherSegments: $ObjectMetadata.Link<NorwayWeatherSegments, true>;
	            norwayWeatherXv8: $ObjectMetadata.Link<NorwayWeatherXv8, false>;
	        };
	        pluralDisplayName: 'All GT Locations V2S';
	        primaryKeyApiName: 'uuid';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'ACTIVE SITE'
	             */
	            activeSite: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternates Cache Timestamp'
	             */
	            alternatesCacheTimestamp: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cached Alternates'
	             */
	            cachedAlternates: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cached Alternates Count'
	             */
	            cachedAlternatesCount: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'CUSTOMER ALIAS'
	             */
	            customerAlias: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'DATA FROM'
	             */
	            dataFrom: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'FUEL AVAILABLE'
	             */
	            fuelAvailable: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'FUEL OWNER'
	             */
	            fuelOwner: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Geo Point'
	             */
	            geoPoint: $PropertyDef<'geopoint', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'ID'
	             */
	            id: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'ISAIRPORT'
	             */
	            isairport: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'ISBASE'
	             */
	            isbase: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LAST UPDATE DATE'
	             */
	            lastUpdateDate: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LAT'
	             */
	            lat: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LOC ALIAS'
	             */
	            locAlias: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LOCATION CD'
	             */
	            locationCd: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LOCATION DESCRIPTION'
	             */
	            locationDescription: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LOCATION NOTES'
	             */
	            locationNotes: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LOCATION RADIO NOTES'
	             */
	            locationRadioNotes: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LOCATION TYPE'
	             */
	            locationType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Airport Icao',
	             *
	             *   description: weather segment location name
	             */
	            locName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LON'
	             */
	            lon: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'LRM REGION ID'
	             */
	            lrmRegionId: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'PRIMARY PHONE'
	             */
	            primaryPhone: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'PRIMARY RADIO'
	             */
	            primaryRadio: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'REFERENCE ID'
	             */
	            referenceId: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'REGION'
	             */
	            region: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Route Direction'
	             */
	            routeDirection: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'SECONDARY PHONE'
	             */
	            secondaryPhone: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'TIME ZONE'
	             */
	            timeZone: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'TIMEZONE OFFSET'
	             */
	            timezoneOffset: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Uuid'
	             */
	            uuid: $PropertyDef<'string', 'non-nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.fa2cca42-89a1-4a7d-ad8c-7d9539e95949';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'locName';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const AllGtLocationsV2: AllGtLocationsV2;
}
/** /@flight-app/sdk/ontology/objects/Asset **/
declare module "@flight-app/sdk/ontology/objects/Asset" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace Asset {
	    type PropertyKeys = 'fieldbase' | 'dataFrom' | 'flatPitchFuelBurnDeckFuel' | 'acStatus' | 'index' | 'cg' | 'company' | 'cruseSpeed' | 'defaultModel' | 'timeZone' | 'assetIdx' | 'currentVariantId' | 'fuelBurn' | 'lastWeighingDate' | 'dryOperatingWeightLbs' | 'crewCount' | 'melOpLimit' | 'orgName' | 'maxFuelCapacity' | 'acModelName' | 'defaultFuelUnit' | 'maxPassengers' | 'orgUnit' | 'regionName' | 'usefulLoad' | 'dryOperatingMoment' | 'defaultFuelPolicyId' | 'assetIdentifier' | 'defaultWeightUnit' | 'fmsCount' | 'maxCrosswind' | 'defaultDistanceUnit' | 'pilotsIncludedInEmptyWeight' | 'defaultFuelPolicyName' | 'model' | 'acModelIdx';
	    type Links = {};
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'AC MODEL IDX'
	         */
	        readonly acModelIdx: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'AC MODEL NAME'
	         */
	        readonly acModelName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'AC STATUS'
	         */
	        readonly acStatus: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'ASSET IDENTIFIER'
	         */
	        readonly assetIdentifier: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'ASSET IDX'
	         */
	        readonly assetIdx: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'CG'
	         */
	        readonly cg: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'COMPANY'
	         */
	        readonly company: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'CREW COUNT'
	         */
	        readonly crewCount: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cruse Speed'
	         */
	        readonly cruseSpeed: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Current Variant Id'
	         */
	        readonly currentVariantId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'DATA FROM'
	         */
	        readonly dataFrom: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Default Distance Unit'
	         */
	        readonly defaultDistanceUnit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Default Fuel Policy Id'
	         */
	        readonly defaultFuelPolicyId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Default Fuel Policy Name'
	         */
	        readonly defaultFuelPolicyName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Default Fuel Unit'
	         */
	        readonly defaultFuelUnit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'DEFAULT MODEL'
	         */
	        readonly defaultModel: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Default Weight Unit'
	         */
	        readonly defaultWeightUnit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Dry Operating Moment'
	         */
	        readonly dryOperatingMoment: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Dry Operating Weight Lbs'
	         */
	        readonly dryOperatingWeightLbs: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'FIELDBASE'
	         */
	        readonly fieldbase: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Flat Pitch Fuel Burn(Deck fuel)'
	         */
	        readonly flatPitchFuelBurnDeckFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly fmsCount: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Fuel Burn'
	         */
	        readonly fuelBurn: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Index'
	         */
	        readonly index: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Last Weighing Date'
	         */
	        readonly lastWeighingDate: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly maxCrosswind: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'MAX FUEL CAPACITY'
	         */
	        readonly maxFuelCapacity: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Max Passengers'
	         */
	        readonly maxPassengers: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'MEL OP LIMIT'
	         */
	        readonly melOpLimit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'MODEL'
	         */
	        readonly model: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Org Name'
	         */
	        readonly orgName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'ORG UNIT'
	         */
	        readonly orgUnit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Pilots Included In Empty Weight'
	         */
	        readonly pilotsIncludedInEmptyWeight: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'REGION NAME'
	         */
	        readonly regionName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'TIME ZONE'
	         */
	        readonly timeZone: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Useful Load'
	         */
	        readonly usefulLoad: $PropType['double'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<Asset, Asset.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof Asset.Props = keyof Asset.Props> = $Osdk.Instance<Asset, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof Asset.Props = keyof Asset.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface Asset extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'Asset';
	    __DefinitionMetadata?: {
	        objectSet: Asset.ObjectSet;
	        props: Asset.Props;
	        linksType: Asset.Links;
	        strictProps: Asset.StrictProps;
	        apiName: 'Asset';
	        description: '';
	        displayName: 'Aircraft Asset';
	        icon: {
	            type: 'blueprint';
	            color: '#3FA6DA';
	            name: 'helicopter';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {};
	        pluralDisplayName: 'Aircraft Assets';
	        primaryKeyApiName: 'assetIdx';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'AC MODEL IDX'
	             */
	            acModelIdx: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'AC MODEL NAME'
	             */
	            acModelName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'AC STATUS'
	             */
	            acStatus: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'ASSET IDENTIFIER'
	             */
	            assetIdentifier: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'ASSET IDX'
	             */
	            assetIdx: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'CG'
	             */
	            cg: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'COMPANY'
	             */
	            company: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'CREW COUNT'
	             */
	            crewCount: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cruse Speed'
	             */
	            cruseSpeed: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Current Variant Id'
	             */
	            currentVariantId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'DATA FROM'
	             */
	            dataFrom: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Default Distance Unit'
	             */
	            defaultDistanceUnit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Default Fuel Policy Id'
	             */
	            defaultFuelPolicyId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Default Fuel Policy Name'
	             */
	            defaultFuelPolicyName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Default Fuel Unit'
	             */
	            defaultFuelUnit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'DEFAULT MODEL'
	             */
	            defaultModel: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Default Weight Unit'
	             */
	            defaultWeightUnit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Dry Operating Moment'
	             */
	            dryOperatingMoment: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Dry Operating Weight Lbs'
	             */
	            dryOperatingWeightLbs: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'FIELDBASE'
	             */
	            fieldbase: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Flat Pitch Fuel Burn(Deck fuel)'
	             */
	            flatPitchFuelBurnDeckFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            fmsCount: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Fuel Burn'
	             */
	            fuelBurn: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Index'
	             */
	            index: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Last Weighing Date'
	             */
	            lastWeighingDate: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            maxCrosswind: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'MAX FUEL CAPACITY'
	             */
	            maxFuelCapacity: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Max Passengers'
	             */
	            maxPassengers: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'MEL OP LIMIT'
	             */
	            melOpLimit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'MODEL'
	             */
	            model: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Org Name'
	             */
	            orgName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'ORG UNIT'
	             */
	            orgUnit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Pilots Included In Empty Weight'
	             */
	            pilotsIncludedInEmptyWeight: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'REGION NAME'
	             */
	            regionName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'TIME ZONE'
	             */
	            timeZone: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Useful Load'
	             */
	            usefulLoad: $PropertyDef<'double', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.c7688575-154d-41ad-a935-f3f9094d45c4';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'assetIdentifier';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const Asset: Asset;
}
/** /@flight-app/sdk/ontology/objects/BristowHelidecks **/
declare module "@flight-app/sdk/ontology/objects/BristowHelidecks" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace BristowHelidecks {
	    type PropertyKeys = 'locationAlias' | 'cautions' | 'locationName' | 'baseOfOperation' | 'sourceIds' | 'fuelAvailable' | 'attachmentIds' | 'deckDvalue' | 'deckMaxWeight' | 'timeZone' | 'deckReportReceivedTime' | 'geoPoint' | 'weatherInformation' | 'ndb' | 'longName' | 'latestDeckReport' | 'createdDate' | 'validityDate' | 'nightStatus' | 'createdBy' | 'isActive' | 'updatedDate' | 'deckReportAttachmentId' | 'imageUrls' | 'deckDimensionsWidth' | 'issueDate' | 'isFixed' | 'limitations' | 'nonCompliance' | 'deckDimensionsLength' | 'deckHeading' | 'sourceSystems' | 'locationId' | 'locationType' | 'latitude' | 'updatedBy' | 'dayStatus' | 'deckReportSource' | 'deckHeight' | 'generalNotes' | 'weatherAvailable' | 'region' | 'lastInspectionDate' | 'fuelStatus' | 'longitude' | 'primaryRadio' | 'locationDescription' | 'primaryPhone' | 'parkDimensionsLength' | 'parkDvalue' | 'aimingCircle' | 'parkDimensionsWidth';
	    type Links = {};
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Aiming Circle'
	         */
	        readonly aimingCircle: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Attachment Ids'
	         */
	        readonly attachmentIds: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Base Of Operation'
	         */
	        readonly baseOfOperation: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cautions'
	         */
	        readonly cautions: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Created By'
	         */
	        readonly createdBy: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Created Date'
	         */
	        readonly createdDate: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Day Status'
	         */
	        readonly dayStatus: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Dimensions Length'
	         */
	        readonly deckDimensionsLength: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Dimensions Width'
	         */
	        readonly deckDimensionsWidth: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck DValue'
	         */
	        readonly deckDvalue: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Heading'
	         */
	        readonly deckHeading: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Height'
	         */
	        readonly deckHeight: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Max Weight'
	         */
	        readonly deckMaxWeight: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Report Attachment Id'
	         */
	        readonly deckReportAttachmentId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Report Received Time'
	         */
	        readonly deckReportReceivedTime: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Report Source'
	         */
	        readonly deckReportSource: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Fuel Available'
	         */
	        readonly fuelAvailable: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Fuel Status'
	         */
	        readonly fuelStatus: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'General Notes'
	         */
	        readonly generalNotes: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Geo Point'
	         */
	        readonly geoPoint: $PropType['geopoint'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Image Urls'
	         */
	        readonly imageUrls: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Is Active'
	         */
	        readonly isActive: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Is Fixed'
	         */
	        readonly isFixed: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Issue Date'
	         */
	        readonly issueDate: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Last Inspection Date'
	         */
	        readonly lastInspectionDate: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Latest Deck Report'
	         */
	        readonly latestDeckReport: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Latitude'
	         */
	        readonly latitude: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Limitations'
	         */
	        readonly limitations: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Location Alias'
	         */
	        readonly locationAlias: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Location Description'
	         */
	        readonly locationDescription: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Location Id'
	         */
	        readonly locationId: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Location Name'
	         */
	        readonly locationName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Location Type'
	         */
	        readonly locationType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Longitude'
	         */
	        readonly longitude: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Long Name'
	         */
	        readonly longName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'NDB'
	         */
	        readonly ndb: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Night Status'
	         */
	        readonly nightStatus: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Non Compliance'
	         */
	        readonly nonCompliance: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Park Dimensions Length'
	         */
	        readonly parkDimensionsLength: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Park Dimensions Width'
	         */
	        readonly parkDimensionsWidth: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Park DValue'
	         */
	        readonly parkDvalue: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Primary Phone'
	         */
	        readonly primaryPhone: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Primary Radio'
	         */
	        readonly primaryRadio: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Region'
	         */
	        readonly region: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Source Ids'
	         */
	        readonly sourceIds: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Source Systems'
	         */
	        readonly sourceSystems: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Time Zone'
	         */
	        readonly timeZone: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Updated By'
	         */
	        readonly updatedBy: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Updated Date'
	         */
	        readonly updatedDate: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Validity Date'
	         */
	        readonly validityDate: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Weather Available'
	         */
	        readonly weatherAvailable: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Weather Information'
	         */
	        readonly weatherInformation: $PropType['string'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<BristowHelidecks, BristowHelidecks.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof BristowHelidecks.Props = keyof BristowHelidecks.Props> = $Osdk.Instance<BristowHelidecks, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof BristowHelidecks.Props = keyof BristowHelidecks.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface BristowHelidecks extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'BristowHelidecks';
	    __DefinitionMetadata?: {
	        objectSet: BristowHelidecks.ObjectSet;
	        props: BristowHelidecks.Props;
	        linksType: BristowHelidecks.Links;
	        strictProps: BristowHelidecks.StrictProps;
	        apiName: 'BristowHelidecks';
	        description: 'All Helidecks  ';
	        displayName: 'Bristow Helidecks';
	        icon: {
	            type: 'blueprint';
	            color: '#3FA6DA';
	            name: 'rig';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {};
	        pluralDisplayName: 'Bristow Helidecks';
	        primaryKeyApiName: 'locationId';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Aiming Circle'
	             */
	            aimingCircle: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Attachment Ids'
	             */
	            attachmentIds: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Base Of Operation'
	             */
	            baseOfOperation: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cautions'
	             */
	            cautions: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Created By'
	             */
	            createdBy: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Created Date'
	             */
	            createdDate: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Day Status'
	             */
	            dayStatus: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Dimensions Length'
	             */
	            deckDimensionsLength: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Dimensions Width'
	             */
	            deckDimensionsWidth: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck DValue'
	             */
	            deckDvalue: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Heading'
	             */
	            deckHeading: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Height'
	             */
	            deckHeight: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Max Weight'
	             */
	            deckMaxWeight: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Report Attachment Id'
	             */
	            deckReportAttachmentId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Report Received Time'
	             */
	            deckReportReceivedTime: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Report Source'
	             */
	            deckReportSource: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Fuel Available'
	             */
	            fuelAvailable: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Fuel Status'
	             */
	            fuelStatus: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'General Notes'
	             */
	            generalNotes: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Geo Point'
	             */
	            geoPoint: $PropertyDef<'geopoint', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Image Urls'
	             */
	            imageUrls: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Is Active'
	             */
	            isActive: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Is Fixed'
	             */
	            isFixed: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Issue Date'
	             */
	            issueDate: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Last Inspection Date'
	             */
	            lastInspectionDate: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Latest Deck Report'
	             */
	            latestDeckReport: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Latitude'
	             */
	            latitude: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Limitations'
	             */
	            limitations: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Location Alias'
	             */
	            locationAlias: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Location Description'
	             */
	            locationDescription: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Location Id'
	             */
	            locationId: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Location Name'
	             */
	            locationName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Location Type'
	             */
	            locationType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Longitude'
	             */
	            longitude: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Long Name'
	             */
	            longName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'NDB'
	             */
	            ndb: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Night Status'
	             */
	            nightStatus: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Non Compliance'
	             */
	            nonCompliance: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Park Dimensions Length'
	             */
	            parkDimensionsLength: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Park Dimensions Width'
	             */
	            parkDimensionsWidth: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Park DValue'
	             */
	            parkDvalue: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Primary Phone'
	             */
	            primaryPhone: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Primary Radio'
	             */
	            primaryRadio: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Region'
	             */
	            region: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Source Ids'
	             */
	            sourceIds: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Source Systems'
	             */
	            sourceSystems: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Time Zone'
	             */
	            timeZone: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Updated By'
	             */
	            updatedBy: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Updated Date'
	             */
	            updatedDate: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Validity Date'
	             */
	            validityDate: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Weather Available'
	             */
	            weatherAvailable: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Weather Information'
	             */
	            weatherInformation: $PropertyDef<'string', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.68f15a1b-1902-4ce1-8c9f-b74f42b8cfdb';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'locationName';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const BristowHelidecks: BristowHelidecks;
}
/** /@flight-app/sdk/ontology/objects/FlightFuelDburbury **/
declare module "@flight-app/sdk/ontology/objects/FlightFuelDburbury" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { FuelPolicyBuilder } from '@flight-app/sdk/ontology/objects/FuelPolicyBuilder';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition, ObjectMetadata as $ObjectMetadata } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType, SingleLinkAccessor as $SingleLinkAccessor } from 'internal/@osdk/client';
	export namespace FlightFuelDburbury {
	    type PropertyKeys = 'leg1fuelBurned' | 'plannedApproachFuel' | 'plannedReserveFuel' | 'requiredFuelStop2description' | 'minFuelBreakdown' | 'plannedAraFuel' | 'minTotalFuel' | 'plannedContingencyFuelAlternate' | 'totalFuelUplifted' | 'leg5fuelBurned' | 'leg4landingFuel' | 'requiredFuelStop5' | 'requiredFuelStop4' | 'requiredFuelStop3' | 'plannedTimeOnTaskFuel' | 'requiredFuelStop2' | 'fuelUnit' | 'leg1onBlocksFuel' | 'leg4takeOffFuel' | 'requiredFuelStop4description' | 'leg1landingFuel' | 'plannedTotalFuel' | 'requiredFuelStop1' | 'plannedDeckFuel' | 'plannedTaxiFuel' | 'leg1takeOffFuel' | 'leg3takeOffFuel' | 'leg2landingFuel' | 'requiredFuelStop5description' | 'leg2fuelBurned' | 'leg3landingFuel' | 'leg2takeOffFuel' | 'leg5fuelUplifted' | 'aircraft' | 'leg6fuelUplifted' | 'leg6landingFuel' | 'policyUuid' | 'createdAt' | 'leg5takeOffFuel' | 'requiredFuelStop3description' | 'totalFuelBurned' | 'plannedAlternateFuel' | 'automationSummary' | 'flightUuid' | 'leg6fuelBurned' | 'leg3fuelBurned' | 'uuid' | 'roundTripFuel' | 'upDatedAt' | 'leg3onBlocksFuel' | 'leg4offBlocksFuel' | 'flightName' | 'leg5offBlocksFuel' | 'leg2offBlocksFuel' | 'leg5landingFuel' | 'leg2onBlocksFuel' | 'leg6onBlocksFuel' | 'leg3offBlocksFuel' | 'plannedExtraFuel' | 'leg5onBlocksFuel' | 'plannedTripFuel' | 'leg4onBlocksFuel' | 'leg6offBlocksFuel' | 'leg2fuelUplifted' | 'blockFuel' | 'leg4fuelBurned' | 'requiredFuelStop1description' | 'leg1fuelUplifted' | 'policyName' | 'leg4fuelUplifted' | 'leg1offBlocksFuel' | 'plannedContingencyFuelFlightLegs' | 'leg3fuelUplifted' | 'leg6takeOffFuel';
	    interface Links {
	        readonly fuelPolicyBuilder: $SingleLinkAccessor<FuelPolicyBuilder>;
	    }
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Aircraft'
	         */
	        readonly aircraft: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Automation Summary'
	         */
	        readonly automationSummary: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Block Fuel'
	         */
	        readonly blockFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Created At'
	         */
	        readonly createdAt: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Flight Name'
	         */
	        readonly flightName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Flight Uuid'
	         */
	        readonly flightUuid: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Fuel Unit'
	         */
	        readonly fuelUnit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg1Fuel Burned'
	         */
	        readonly leg1fuelBurned: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg1Fuel Uplifted'
	         */
	        readonly leg1fuelUplifted: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg1Landing Fuel'
	         */
	        readonly leg1landingFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg1Off Blocks Fuel'
	         */
	        readonly leg1offBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg1On Blocks Fuel'
	         */
	        readonly leg1onBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg1Take Off Fuel'
	         */
	        readonly leg1takeOffFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg2Fuel Burned'
	         */
	        readonly leg2fuelBurned: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg2Fuel Uplifted'
	         */
	        readonly leg2fuelUplifted: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg2Landing Fuel'
	         */
	        readonly leg2landingFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg2Off Blocks Fuel'
	         */
	        readonly leg2offBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg2On Blocks Fuel'
	         */
	        readonly leg2onBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg2Take Off Fuel'
	         */
	        readonly leg2takeOffFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg3Fuel Burned'
	         */
	        readonly leg3fuelBurned: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg3Fuel Uplifted'
	         */
	        readonly leg3fuelUplifted: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg3Landing Fuel'
	         */
	        readonly leg3landingFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg3Off Blocks Fuel'
	         */
	        readonly leg3offBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg3On Blocks Fuel'
	         */
	        readonly leg3onBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg3Take Off Fuel'
	         */
	        readonly leg3takeOffFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg4Fuel Burned'
	         */
	        readonly leg4fuelBurned: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg4Fuel Uplifted'
	         */
	        readonly leg4fuelUplifted: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg4Landing Fuel'
	         */
	        readonly leg4landingFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg4Off Blocks Fuel'
	         */
	        readonly leg4offBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg4On Blocks Fuel'
	         */
	        readonly leg4onBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg4Take Off Fuel'
	         */
	        readonly leg4takeOffFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg5Fuel Burned'
	         */
	        readonly leg5fuelBurned: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg5Fuel Uplifted'
	         */
	        readonly leg5fuelUplifted: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg5Landing Fuel'
	         */
	        readonly leg5landingFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg5Off Blocks Fuel'
	         */
	        readonly leg5offBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg5On Blocks Fuel'
	         */
	        readonly leg5onBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg5Take Off Fuel'
	         */
	        readonly leg5takeOffFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg6Fuel Burned'
	         */
	        readonly leg6fuelBurned: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg6Fuel Uplifted'
	         */
	        readonly leg6fuelUplifted: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg6Landing Fuel'
	         */
	        readonly leg6landingFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg6Off Blocks Fuel'
	         */
	        readonly leg6offBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg6On Blocks Fuel'
	         */
	        readonly leg6onBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'leg6Take Off Fuel'
	         */
	        readonly leg6takeOffFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Min Fuel Breakdown'
	         */
	        readonly minFuelBreakdown: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Min Total Fuel'
	         */
	        readonly minTotalFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Alternate Fuel'
	         */
	        readonly plannedAlternateFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Approach Fuel'
	         */
	        readonly plannedApproachFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Ara Fuel'
	         */
	        readonly plannedAraFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Contingency Fuel Alternate'
	         */
	        readonly plannedContingencyFuelAlternate: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Contingency Fuel Flight Legs'
	         */
	        readonly plannedContingencyFuelFlightLegs: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Deck Fuel'
	         */
	        readonly plannedDeckFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Extra Fuel'
	         */
	        readonly plannedExtraFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Reserve Fuel'
	         */
	        readonly plannedReserveFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Taxi Fuel'
	         */
	        readonly plannedTaxiFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Time On Task Fuel'
	         */
	        readonly plannedTimeOnTaskFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Total Fuel'
	         */
	        readonly plannedTotalFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Planned Trip Fuel'
	         */
	        readonly plannedTripFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Policy Name'
	         */
	        readonly policyName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Policy Uuid'
	         */
	        readonly policyUuid: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop1'
	         */
	        readonly requiredFuelStop1: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop1Description'
	         */
	        readonly requiredFuelStop1description: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop2'
	         */
	        readonly requiredFuelStop2: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop2Description'
	         */
	        readonly requiredFuelStop2description: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop3'
	         */
	        readonly requiredFuelStop3: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop3Description'
	         */
	        readonly requiredFuelStop3description: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop4'
	         */
	        readonly requiredFuelStop4: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop4Description'
	         */
	        readonly requiredFuelStop4description: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop5'
	         */
	        readonly requiredFuelStop5: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Required Fuel Stop5Description'
	         */
	        readonly requiredFuelStop5description: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Round Trip Fuel'
	         */
	        readonly roundTripFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Total Fuel Burned'
	         */
	        readonly totalFuelBurned: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Total Fuel Uplifted'
	         */
	        readonly totalFuelUplifted: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Up Dated At'
	         */
	        readonly upDatedAt: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Uuid'
	         */
	        readonly uuid: $PropType['string'];
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<FlightFuelDburbury, FlightFuelDburbury.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof FlightFuelDburbury.Props = keyof FlightFuelDburbury.Props> = $Osdk.Instance<FlightFuelDburbury, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof FlightFuelDburbury.Props = keyof FlightFuelDburbury.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface FlightFuelDburbury extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'FlightFuelDburbury';
	    __DefinitionMetadata?: {
	        objectSet: FlightFuelDburbury.ObjectSet;
	        props: FlightFuelDburbury.Props;
	        linksType: FlightFuelDburbury.Links;
	        strictProps: FlightFuelDburbury.StrictProps;
	        apiName: 'FlightFuelDburbury';
	        description: 'Flight fuel attached to flight object';
	        displayName: 'FlightFuel [ dburbury ]';
	        icon: {
	            type: 'blueprint';
	            color: '#F5498B';
	            name: 'fuel';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {
	            fuelPolicyBuilder: $ObjectMetadata.Link<FuelPolicyBuilder, false>;
	        };
	        pluralDisplayName: 'Flight Fuel [ dburbury ]s';
	        primaryKeyApiName: 'uuid';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Aircraft'
	             */
	            aircraft: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Automation Summary'
	             */
	            automationSummary: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Block Fuel'
	             */
	            blockFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Created At'
	             */
	            createdAt: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Flight Name'
	             */
	            flightName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Flight Uuid'
	             */
	            flightUuid: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Fuel Unit'
	             */
	            fuelUnit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg1Fuel Burned'
	             */
	            leg1fuelBurned: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg1Fuel Uplifted'
	             */
	            leg1fuelUplifted: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg1Landing Fuel'
	             */
	            leg1landingFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg1Off Blocks Fuel'
	             */
	            leg1offBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg1On Blocks Fuel'
	             */
	            leg1onBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg1Take Off Fuel'
	             */
	            leg1takeOffFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg2Fuel Burned'
	             */
	            leg2fuelBurned: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg2Fuel Uplifted'
	             */
	            leg2fuelUplifted: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg2Landing Fuel'
	             */
	            leg2landingFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg2Off Blocks Fuel'
	             */
	            leg2offBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg2On Blocks Fuel'
	             */
	            leg2onBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg2Take Off Fuel'
	             */
	            leg2takeOffFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg3Fuel Burned'
	             */
	            leg3fuelBurned: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg3Fuel Uplifted'
	             */
	            leg3fuelUplifted: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg3Landing Fuel'
	             */
	            leg3landingFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg3Off Blocks Fuel'
	             */
	            leg3offBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg3On Blocks Fuel'
	             */
	            leg3onBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg3Take Off Fuel'
	             */
	            leg3takeOffFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg4Fuel Burned'
	             */
	            leg4fuelBurned: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg4Fuel Uplifted'
	             */
	            leg4fuelUplifted: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg4Landing Fuel'
	             */
	            leg4landingFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg4Off Blocks Fuel'
	             */
	            leg4offBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg4On Blocks Fuel'
	             */
	            leg4onBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg4Take Off Fuel'
	             */
	            leg4takeOffFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg5Fuel Burned'
	             */
	            leg5fuelBurned: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg5Fuel Uplifted'
	             */
	            leg5fuelUplifted: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg5Landing Fuel'
	             */
	            leg5landingFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg5Off Blocks Fuel'
	             */
	            leg5offBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg5On Blocks Fuel'
	             */
	            leg5onBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg5Take Off Fuel'
	             */
	            leg5takeOffFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg6Fuel Burned'
	             */
	            leg6fuelBurned: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg6Fuel Uplifted'
	             */
	            leg6fuelUplifted: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg6Landing Fuel'
	             */
	            leg6landingFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg6Off Blocks Fuel'
	             */
	            leg6offBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg6On Blocks Fuel'
	             */
	            leg6onBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'leg6Take Off Fuel'
	             */
	            leg6takeOffFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Min Fuel Breakdown'
	             */
	            minFuelBreakdown: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Min Total Fuel'
	             */
	            minTotalFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Alternate Fuel'
	             */
	            plannedAlternateFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Approach Fuel'
	             */
	            plannedApproachFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Ara Fuel'
	             */
	            plannedAraFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Contingency Fuel Alternate'
	             */
	            plannedContingencyFuelAlternate: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Contingency Fuel Flight Legs'
	             */
	            plannedContingencyFuelFlightLegs: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Deck Fuel'
	             */
	            plannedDeckFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Extra Fuel'
	             */
	            plannedExtraFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Reserve Fuel'
	             */
	            plannedReserveFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Taxi Fuel'
	             */
	            plannedTaxiFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Time On Task Fuel'
	             */
	            plannedTimeOnTaskFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Total Fuel'
	             */
	            plannedTotalFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Planned Trip Fuel'
	             */
	            plannedTripFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Policy Name'
	             */
	            policyName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Policy Uuid'
	             */
	            policyUuid: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop1'
	             */
	            requiredFuelStop1: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop1Description'
	             */
	            requiredFuelStop1description: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop2'
	             */
	            requiredFuelStop2: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop2Description'
	             */
	            requiredFuelStop2description: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop3'
	             */
	            requiredFuelStop3: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop3Description'
	             */
	            requiredFuelStop3description: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop4'
	             */
	            requiredFuelStop4: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop4Description'
	             */
	            requiredFuelStop4description: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop5'
	             */
	            requiredFuelStop5: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Required Fuel Stop5Description'
	             */
	            requiredFuelStop5description: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Round Trip Fuel'
	             */
	            roundTripFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Total Fuel Burned'
	             */
	            totalFuelBurned: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Total Fuel Uplifted'
	             */
	            totalFuelUplifted: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Up Dated At'
	             */
	            upDatedAt: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Uuid'
	             */
	            uuid: $PropertyDef<'string', 'non-nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.745a07cc-37fb-458d-9912-12494312d3d4';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'flightName';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const FlightFuelDburbury: FlightFuelDburbury;
}
/** /@flight-app/sdk/ontology/objects/FlightLogObject **/
declare module "@flight-app/sdk/ontology/objects/FlightLogObject" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace FlightLogObject {
	    type PropertyKeys = 'captainDayTime' | 'comments' | 'captainId' | 'copilotId' | 'shutdownFuel' | 'soId' | 'legDayMinutes' | 'flightNumber' | 'medicName' | 'waypointActualTimes' | 'startupTime' | 'totalPaxWeight' | 'approachType' | 'logId' | 'onBlocksTime' | 'copilotDayTime' | 'legFuelUplifted' | 'onBlocksFuel' | 'totalBagsPaxWeight' | 'legLandingTimes' | 'paxNumber' | 'waypointActualFuel' | 'captainNightTime' | 'copilot' | 'bagsWeight' | 'offBlocksTime' | 'deviceId' | 'legPlannedTakeoffTimes' | 'copilotTotalTime' | 'soName' | 'copilotNightTime' | 'aircraftId' | 'legPlannedLandingTimes' | 'flightId' | 'legNightMinutes' | 'waypointNames' | 'captainTotalTime' | 'legTakeoffFuel' | 'landingOn' | 'captain' | 'isUploaded' | 'captainLandings' | 'incidentId' | 'copilotLandings' | 'rswId' | 'maintenanceNotes' | 'totalTime' | 'delayReasons' | 'totalFlightTime' | 'totalFuelBurned' | 'medicId' | 'legPilotFlying' | 'lastSyncTime' | 'legPlannedTakeoffFuel' | 'legTakeoffTimes' | 'rswName' | 'hasPendingChanges' | 'legLandingFuel' | 'legIds' | 'waypointPlannedTimes' | 'additionalCrewIds' | 'legNames' | 'logDate' | 'averagePaxWeight' | 'offBlocksFuel' | 'legLandings' | 'waypointPlannedFuel' | 'startupFuel' | 'legPlannedLandingFuel' | 'initialFuelUplifted';
	    type Links = {};
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly additionalCrewIds: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' aircraftId'
	         */
	        readonly aircraftId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly approachType: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'averagePaxWeight '
	         */
	        readonly averagePaxWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly bagsWeight: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly captain: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly captainDayTime: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly captainId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly captainLandings: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly captainNightTime: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly captainTotalTime: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly comments: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly copilot: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly copilotDayTime: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly copilotId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly copilotLandings: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly copilotNightTime: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly copilotTotalTime: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly delayReasons: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly deviceId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' flightId'
	         */
	        readonly flightId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly flightNumber: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly hasPendingChanges: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly incidentId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly initialFuelUplifted: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly isUploaded: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly landingOn: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly lastSyncTime: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legDayMinutes: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legFuelUplifted: $PropType['double'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legIds: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legLandingFuel: $PropType['double'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legLandings: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legLandingTimes: $PropType['timestamp'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legNames: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legNightMinutes: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legPilotFlying: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legPlannedLandingFuel: $PropType['double'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legPlannedLandingTimes: $PropType['timestamp'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legPlannedTakeoffFuel: $PropType['double'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legPlannedTakeoffTimes: $PropType['timestamp'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legTakeoffFuel: $PropType['double'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly legTakeoffTimes: $PropType['timestamp'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly logDate: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly logId: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly maintenanceNotes: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly medicId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly medicName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly offBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly offBlocksTime: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly onBlocksFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly onBlocksTime: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly paxNumber: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly rswId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly rswName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly shutdownFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly soId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly soName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly startupFuel: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly startupTime: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly totalBagsPaxWeight: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly totalFlightTime: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly totalFuelBurned: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly totalPaxWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly totalTime: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly waypointActualFuel: $PropType['double'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly waypointActualTimes: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly waypointNames: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly waypointPlannedFuel: $PropType['double'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly waypointPlannedTimes: $PropType['string'][] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<FlightLogObject, FlightLogObject.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof FlightLogObject.Props = keyof FlightLogObject.Props> = $Osdk.Instance<FlightLogObject, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof FlightLogObject.Props = keyof FlightLogObject.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface FlightLogObject extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'FlightLogObject';
	    __DefinitionMetadata?: {
	        objectSet: FlightLogObject.ObjectSet;
	        props: FlightLogObject.Props;
	        linksType: FlightLogObject.Links;
	        strictProps: FlightLogObject.StrictProps;
	        apiName: 'FlightLogObject';
	        description: 'FlightLogObject';
	        displayName: 'Flight Log Object';
	        icon: {
	            type: 'blueprint';
	            color: '#BD6BBD';
	            name: 'cube';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {};
	        pluralDisplayName: 'Flight Log Objects';
	        primaryKeyApiName: 'logId';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            additionalCrewIds: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' aircraftId'
	             */
	            aircraftId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            approachType: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'averagePaxWeight '
	             */
	            averagePaxWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            bagsWeight: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            captain: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            captainDayTime: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            captainId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            captainLandings: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            captainNightTime: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            captainTotalTime: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            comments: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            copilot: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            copilotDayTime: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            copilotId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            copilotLandings: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            copilotNightTime: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            copilotTotalTime: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            delayReasons: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            deviceId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' flightId'
	             */
	            flightId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            flightNumber: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            hasPendingChanges: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            incidentId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            initialFuelUplifted: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            isUploaded: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            landingOn: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            lastSyncTime: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legDayMinutes: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legFuelUplifted: $PropertyDef<'double', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legIds: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legLandingFuel: $PropertyDef<'double', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legLandings: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legLandingTimes: $PropertyDef<'timestamp', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legNames: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legNightMinutes: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legPilotFlying: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legPlannedLandingFuel: $PropertyDef<'double', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legPlannedLandingTimes: $PropertyDef<'timestamp', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legPlannedTakeoffFuel: $PropertyDef<'double', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legPlannedTakeoffTimes: $PropertyDef<'timestamp', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legTakeoffFuel: $PropertyDef<'double', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            legTakeoffTimes: $PropertyDef<'timestamp', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            logDate: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            logId: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            maintenanceNotes: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            medicId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            medicName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            offBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            offBlocksTime: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            onBlocksFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            onBlocksTime: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            paxNumber: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            rswId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            rswName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            shutdownFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            soId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            soName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            startupFuel: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            startupTime: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            totalBagsPaxWeight: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            totalFlightTime: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            totalFuelBurned: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            totalPaxWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            totalTime: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            waypointActualFuel: $PropertyDef<'double', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            waypointActualTimes: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            waypointNames: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            waypointPlannedFuel: $PropertyDef<'double', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            waypointPlannedTimes: $PropertyDef<'string', 'nullable', 'array'>;
	        };
	        rid: 'ri.ontology.main.object-type.7d54b120-836f-4f39-9679-541e3a081f02';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'flightNumber';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const FlightLogObject: FlightLogObject;
}
/** /@flight-app/sdk/ontology/objects/FuelPolicyBuilder **/
declare module "@flight-app/sdk/ontology/objects/FuelPolicyBuilder" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { FlightFuelDburbury } from '@flight-app/sdk/ontology/objects/FlightFuelDburbury';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition, ObjectMetadata as $ObjectMetadata } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace FuelPolicyBuilder {
	    type PropertyKeys = 'alternateFuelDefault' | 'approachFuel' | 'name' | 'approachFuelShow' | 'reserveFuelType' | 'araFuel' | 'reserveFuelDefault' | 'reserveFuelShow' | 'extraFuelValue' | 'unitSystem' | 'extraFuelShow' | 'region' | 'taxiFuelShow' | 'extraFuelDefault' | 'contingencyFuelFlightLegsValue' | 'description' | 'uuid' | 'approachFuelDefault' | 'contingencyFuelAlternateValue' | 'tripFuelShow' | 'extraFuelType' | 'upDatedAt' | 'contingencyFuelFlightLegsType' | 'deckFuelShow' | 'reserveFuelValue' | 'alternateFuelShow' | 'araFuelShow' | 'contingencyFuelAlternateType' | 'contingencyFuelFlightLegsShow' | 'deckFuel' | 'tripFuelDefault' | 'tripFuel' | 'deckFuelDefault' | 'taxiFuel' | 'deckFuelTime' | 'timeOnTaskFuelDefault' | 'timeOnTaskFuelShow' | 'contingencyFuelFlightLegsDefault' | 'taxiFuelDefault' | 'contingencyFuelAlternateShow' | 'araFuelDefault' | 'alternateFuel' | 'upDatedBy' | 'timeOnTaskFuel' | 'contingencyFuelAlternateDefault';
	    interface Links {
	        readonly flightFuelDburbury: FlightFuelDburbury.ObjectSet;
	    }
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Fuel'
	         */
	        readonly alternateFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Fuel Default'
	         */
	        readonly alternateFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Fuel Show'
	         */
	        readonly alternateFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Approach Fuel'
	         */
	        readonly approachFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Approach Fuel Default'
	         */
	        readonly approachFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Approach Fuel Show'
	         */
	        readonly approachFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ara Fuel'
	         */
	        readonly araFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ara Fuel Default'
	         */
	        readonly araFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ara Fuel Show'
	         */
	        readonly araFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Contingency Fuel Alternate Default'
	         */
	        readonly contingencyFuelAlternateDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Contingency Fuel Alternate Show'
	         */
	        readonly contingencyFuelAlternateShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Contingency Fuel Alternate Type'
	         */
	        readonly contingencyFuelAlternateType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Contingency Fuel Alternate Value'
	         */
	        readonly contingencyFuelAlternateValue: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Contingency Fuel Flight Legs Default'
	         */
	        readonly contingencyFuelFlightLegsDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Contingency Fuel Flight Legs Show'
	         */
	        readonly contingencyFuelFlightLegsShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Contingency Fuel Flight Legs Type'
	         */
	        readonly contingencyFuelFlightLegsType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Contingency Fuel Flight Legs Value'
	         */
	        readonly contingencyFuelFlightLegsValue: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Fuel'
	         */
	        readonly deckFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Fuel Default'
	         */
	        readonly deckFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Fuel Show'
	         */
	        readonly deckFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Fuel Time'
	         */
	        readonly deckFuelTime: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Description'
	         */
	        readonly description: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Extra Fuel Default'
	         */
	        readonly extraFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Extra Fuel Show'
	         */
	        readonly extraFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Extra Fuel Type'
	         */
	        readonly extraFuelType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Extra Fuel Value'
	         */
	        readonly extraFuelValue: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Name'
	         */
	        readonly name: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Region'
	         */
	        readonly region: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Reserve Fuel Default'
	         */
	        readonly reserveFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Reserve Fuel Show'
	         */
	        readonly reserveFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Reserve Fuel Type'
	         */
	        readonly reserveFuelType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Reserve Fuel Value'
	         */
	        readonly reserveFuelValue: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Taxi Fuel'
	         */
	        readonly taxiFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Taxi Fuel Default'
	         */
	        readonly taxiFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Taxi Fuel Show'
	         */
	        readonly taxiFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Time On Task Fuel'
	         */
	        readonly timeOnTaskFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Time On Task Fuel Default'
	         */
	        readonly timeOnTaskFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Time On Task Fuel Show'
	         */
	        readonly timeOnTaskFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Trip Fuel'
	         */
	        readonly tripFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Trip Fuel Default'
	         */
	        readonly tripFuelDefault: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Trip Fuel Show'
	         */
	        readonly tripFuelShow: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Unit System'
	         */
	        readonly unitSystem: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Up Dated At'
	         */
	        readonly upDatedAt: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Up Dated By'
	         */
	        readonly upDatedBy: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Uuid'
	         */
	        readonly uuid: $PropType['string'];
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<FuelPolicyBuilder, FuelPolicyBuilder.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof FuelPolicyBuilder.Props = keyof FuelPolicyBuilder.Props> = $Osdk.Instance<FuelPolicyBuilder, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof FuelPolicyBuilder.Props = keyof FuelPolicyBuilder.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface FuelPolicyBuilder extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'FuelPolicyBuilder';
	    __DefinitionMetadata?: {
	        objectSet: FuelPolicyBuilder.ObjectSet;
	        props: FuelPolicyBuilder.Props;
	        linksType: FuelPolicyBuilder.Links;
	        strictProps: FuelPolicyBuilder.StrictProps;
	        apiName: 'FuelPolicyBuilder';
	        description: 'To build Fuel policies world wide';
	        displayName: 'FuelPolicyBuilder';
	        icon: {
	            type: 'blueprint';
	            color: '#3FA6DA';
	            name: 'fuel';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {
	            flightFuelDburbury: $ObjectMetadata.Link<FlightFuelDburbury, true>;
	        };
	        pluralDisplayName: 'Fuel Policy Builders';
	        primaryKeyApiName: 'uuid';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Fuel'
	             */
	            alternateFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Fuel Default'
	             */
	            alternateFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Fuel Show'
	             */
	            alternateFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Approach Fuel'
	             */
	            approachFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Approach Fuel Default'
	             */
	            approachFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Approach Fuel Show'
	             */
	            approachFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ara Fuel'
	             */
	            araFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ara Fuel Default'
	             */
	            araFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ara Fuel Show'
	             */
	            araFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Contingency Fuel Alternate Default'
	             */
	            contingencyFuelAlternateDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Contingency Fuel Alternate Show'
	             */
	            contingencyFuelAlternateShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Contingency Fuel Alternate Type'
	             */
	            contingencyFuelAlternateType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Contingency Fuel Alternate Value'
	             */
	            contingencyFuelAlternateValue: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Contingency Fuel Flight Legs Default'
	             */
	            contingencyFuelFlightLegsDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Contingency Fuel Flight Legs Show'
	             */
	            contingencyFuelFlightLegsShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Contingency Fuel Flight Legs Type'
	             */
	            contingencyFuelFlightLegsType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Contingency Fuel Flight Legs Value'
	             */
	            contingencyFuelFlightLegsValue: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Fuel'
	             */
	            deckFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Fuel Default'
	             */
	            deckFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Fuel Show'
	             */
	            deckFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Fuel Time'
	             */
	            deckFuelTime: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Description'
	             */
	            description: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Extra Fuel Default'
	             */
	            extraFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Extra Fuel Show'
	             */
	            extraFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Extra Fuel Type'
	             */
	            extraFuelType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Extra Fuel Value'
	             */
	            extraFuelValue: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Name'
	             */
	            name: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Region'
	             */
	            region: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Reserve Fuel Default'
	             */
	            reserveFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Reserve Fuel Show'
	             */
	            reserveFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Reserve Fuel Type'
	             */
	            reserveFuelType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Reserve Fuel Value'
	             */
	            reserveFuelValue: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Taxi Fuel'
	             */
	            taxiFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Taxi Fuel Default'
	             */
	            taxiFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Taxi Fuel Show'
	             */
	            taxiFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Time On Task Fuel'
	             */
	            timeOnTaskFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Time On Task Fuel Default'
	             */
	            timeOnTaskFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Time On Task Fuel Show'
	             */
	            timeOnTaskFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Trip Fuel'
	             */
	            tripFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Trip Fuel Default'
	             */
	            tripFuelDefault: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Trip Fuel Show'
	             */
	            tripFuelShow: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Unit System'
	             */
	            unitSystem: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Up Dated At'
	             */
	            upDatedAt: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Up Dated By'
	             */
	            upDatedBy: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Uuid'
	             */
	            uuid: $PropertyDef<'string', 'non-nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.898b54c0-708f-480b-bafb-f816759e3ae1';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'name';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const FuelPolicyBuilder: FuelPolicyBuilder;
}
/** /@flight-app/sdk/ontology/objects/InternationalWeather **/
declare module "@flight-app/sdk/ontology/objects/InternationalWeather" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { AllGtLocationsV2 } from '@flight-app/sdk/ontology/objects/AllGtLocationsV2';
	import type { NorwayWeatherSegments } from '@flight-app/sdk/ontology/objects/NorwayWeatherSegments';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition, ObjectMetadata as $ObjectMetadata } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType, SingleLinkAccessor as $SingleLinkAccessor } from 'internal/@osdk/client';
	export namespace InternationalWeather {
	    type PropertyKeys = 'country' | 'waveHeights' | 'windSpeed' | 'rawMetar' | 'fullName' | 'visibilityScore' | 'delayChance' | 'lightningChance' | 'flightCategory' | 'rawTaf' | 'timestamp' | 'windDirection' | 'icaoCode' | 'region' | 'weatherId' | 'geopoint' | 'lastUpdated' | 'bbox' | 'isAirport' | 'parsedData';
	    interface Links {
	        readonly allGtLocationsV2: $SingleLinkAccessor<AllGtLocationsV2>;
	        readonly weatherSegments: NorwayWeatherSegments.ObjectSet;
	    }
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   description: bounding box for the region
	         */
	        readonly bbox: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly country: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly delayChance: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly flightCategory: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly fullName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly geopoint: $PropType['geopoint'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly icaoCode: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly isAirport: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly lastUpdated: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly lightningChance: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly parsedData: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly rawMetar: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' rawTaf'
	         */
	        readonly rawTaf: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly region: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' timestamp'
	         */
	        readonly timestamp: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly visibilityScore: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly waveHeights: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly weatherId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly windDirection: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' windSpeed'
	         */
	        readonly windSpeed: $PropType['integer'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<InternationalWeather, InternationalWeather.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof InternationalWeather.Props = keyof InternationalWeather.Props> = $Osdk.Instance<InternationalWeather, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof InternationalWeather.Props = keyof InternationalWeather.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface InternationalWeather extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'InternationalWeather';
	    __DefinitionMetadata?: {
	        objectSet: InternationalWeather.ObjectSet;
	        props: InternationalWeather.Props;
	        linksType: InternationalWeather.Links;
	        strictProps: InternationalWeather.StrictProps;
	        apiName: 'InternationalWeather';
	        description: 'International Weather';
	        displayName: 'International Weather';
	        icon: {
	            type: 'blueprint';
	            color: '#3FA6DA';
	            name: 'rain';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {
	            allGtLocationsV2: $ObjectMetadata.Link<AllGtLocationsV2, false>;
	            weatherSegments: $ObjectMetadata.Link<NorwayWeatherSegments, true>;
	        };
	        pluralDisplayName: 'International Weathers';
	        primaryKeyApiName: 'icaoCode';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   description: bounding box for the region
	             */
	            bbox: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            country: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            delayChance: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            flightCategory: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            fullName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            geopoint: $PropertyDef<'geopoint', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            icaoCode: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            isAirport: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            lastUpdated: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            lightningChance: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            parsedData: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            rawMetar: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' rawTaf'
	             */
	            rawTaf: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            region: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' timestamp'
	             */
	            timestamp: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            visibilityScore: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            waveHeights: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            weatherId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            windDirection: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' windSpeed'
	             */
	            windSpeed: $PropertyDef<'integer', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.fbd13f87-c5dc-45ab-b125-38a9bf3db4bd';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'icaoCode';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const InternationalWeather: InternationalWeather;
}
/** /@flight-app/sdk/ontology/objects/LegObjectOutputObject **/
declare module "@flight-app/sdk/ontology/objects/LegObjectOutputObject" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace LegObjectOutputObject {
	    type PropertyKeys = 'segmentsJson' | 'pax' | 'estimatedDuration' | 'legId' | 'legArrivalTimeEstimated' | 'isMaster' | 'fullRouteGeoShape' | 'legName' | 'region' | 'flightId' | 'destinationIsRig' | 'totalDistance' | 'waypointIds' | 'destinationLocationType' | 'isPartFlight';
	    type Links = {};
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly destinationIsRig: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly destinationLocationType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Estimated Duration'
	         */
	        readonly estimatedDuration: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'flight_id'
	         */
	        readonly flightId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Full Route Geo Shape'
	         */
	        readonly fullRouteGeoShape: $PropType['geoshape'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Is Master'
	         */
	        readonly isMaster: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Is Part Flight'
	         */
	        readonly isPartFlight: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Leg Arrival Time Estimated'
	         */
	        readonly legArrivalTimeEstimated: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Leg Id'
	         */
	        readonly legId: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Leg Name'
	         */
	        readonly legName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Requested Pax'
	         */
	        readonly pax: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Region'
	         */
	        readonly region: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segments Json'
	         */
	        readonly segmentsJson: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Total Distance'
	         */
	        readonly totalDistance: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Waypoint Ids'
	         */
	        readonly waypointIds: $PropType['string'][] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<LegObjectOutputObject, LegObjectOutputObject.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof LegObjectOutputObject.Props = keyof LegObjectOutputObject.Props> = $Osdk.Instance<LegObjectOutputObject, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof LegObjectOutputObject.Props = keyof LegObjectOutputObject.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface LegObjectOutputObject extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'LegObjectOutputObject';
	    __DefinitionMetadata?: {
	        objectSet: LegObjectOutputObject.ObjectSet;
	        props: LegObjectOutputObject.Props;
	        linksType: LegObjectOutputObject.Links;
	        strictProps: LegObjectOutputObject.StrictProps;
	        apiName: 'LegObjectOutputObject';
	        description: 'Leg object for flight planner 2.0';
	        displayName: 'Leg Object Output Object';
	        icon: {
	            type: 'blueprint';
	            color: '#3FA6DA';
	            name: 'send-to-graph';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {};
	        pluralDisplayName: 'Leg Object Output Objects';
	        primaryKeyApiName: 'legId';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            destinationIsRig: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            destinationLocationType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Estimated Duration'
	             */
	            estimatedDuration: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'flight_id'
	             */
	            flightId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Full Route Geo Shape'
	             */
	            fullRouteGeoShape: $PropertyDef<'geoshape', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Is Master'
	             */
	            isMaster: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Is Part Flight'
	             */
	            isPartFlight: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Leg Arrival Time Estimated'
	             */
	            legArrivalTimeEstimated: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Leg Id'
	             */
	            legId: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Leg Name'
	             */
	            legName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Requested Pax'
	             */
	            pax: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Region'
	             */
	            region: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segments Json'
	             */
	            segmentsJson: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Total Distance'
	             */
	            totalDistance: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Waypoint Ids'
	             */
	            waypointIds: $PropertyDef<'string', 'nullable', 'array'>;
	        };
	        rid: 'ri.ontology.main.object-type.cab378f6-bd0a-46c4-a5a7-704d1cd081b5';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'legName';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const LegObjectOutputObject: LegObjectOutputObject;
}
/** /@flight-app/sdk/ontology/objects/MainFlightObjectFp2 **/
declare module "@flight-app/sdk/ontology/objects/MainFlightObjectFp2" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { NorwayWeatherSegments } from '@flight-app/sdk/ontology/objects/NorwayWeatherSegments';
	import type { MainFuelV2 } from '@flight-app/sdk/ontology/objects/MainFuelV2';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition, ObjectMetadata as $ObjectMetadata } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace MainFlightObjectFp2 {
	    type PropertyKeys = 'captainId' | 'copilotId' | 'destinationSunrise' | 'soId' | 'totalDistanceOutboundAndAlternate' | 'flightNumber' | 'medicName' | 'displayWaypoints' | 'cancellationReason' | 'alternate' | 'destinationSunset' | 'logId' | 'totalDistanceNoAlternate' | 'cancellationTime' | 'assetIdx' | 'alternateName' | 'weatherWarnings' | 'additionalCrew' | 'copilot' | 'combinedWaypoints' | 'updatedAt' | 'createdBy' | 'departureGeoPoint' | 'stopsArray' | 'avgWindSpeed' | 'cancellationPenaltyIndicator' | 'soName' | 'aircraftId' | 'fullRouteGeoShape' | 'eta' | 'flightId' | 'fuelPlanId' | 'captain' | 'etd' | 'alternateGeoPoint' | 'destinationGeoPoint' | 'alternateLegIds' | 'alternateSunrise' | 'rswId' | 'flightStatus' | 'flightType' | 'jobIdx' | 'policyUuid' | 'createdAt' | 'departureSunrise' | 'totalFlightTime' | 'medicId' | 'region' | 'avgWindDirection' | 'legsNames' | 'rswName' | 'timingId' | 'baggageWeight' | 'legIds' | 'totalMinFlightTimeToAlternate' | 'weightBalanceId' | 'alternateFullRouteGeoShape' | 'alternateSplitPoint' | 'departureSunset' | 'alternateSunset' | 'totalFlightTimeWithStops' | 'legs';
	    interface Links {
	        readonly mainFuelV2s: MainFuelV2.ObjectSet;
	        readonly weatherSegments: NorwayWeatherSegments.ObjectSet;
	    }
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Additional Crew'
	         */
	        readonly additionalCrew: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Aircraft Id'
	         */
	        readonly aircraftId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate'
	         */
	        readonly alternate: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Full Route Geo Shape'
	         */
	        readonly alternateFullRouteGeoShape: $PropType['geoshape'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Geo Point'
	         */
	        readonly alternateGeoPoint: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Leg Ids'
	         */
	        readonly alternateLegIds: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Name'
	         */
	        readonly alternateName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly alternateSplitPoint: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Sunrise'
	         */
	        readonly alternateSunrise: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Sunset'
	         */
	        readonly alternateSunset: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'AssetIdx'
	         */
	        readonly assetIdx: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly avgWindDirection: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly avgWindSpeed: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Baggage Weight'
	         */
	        readonly baggageWeight: $PropType['float'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cancellation Penalty Indicator'
	         */
	        readonly cancellationPenaltyIndicator: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cancellation Reason'
	         */
	        readonly cancellationReason: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cancellation Time'
	         */
	        readonly cancellationTime: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Captain'
	         */
	        readonly captain: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' captainId'
	         */
	        readonly captainId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Combined Waypoints'
	         */
	        readonly combinedWaypoints: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Copilot'
	         */
	        readonly copilot: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly copilotId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Created At'
	         */
	        readonly createdAt: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Created By'
	         */
	        readonly createdBy: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Departure Geo Point'
	         */
	        readonly departureGeoPoint: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Departure Sunrise'
	         */
	        readonly departureSunrise: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Departure Sunset'
	         */
	        readonly departureSunset: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Destination Geo Point'
	         */
	        readonly destinationGeoPoint: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Destination Sunrise'
	         */
	        readonly destinationSunrise: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Destination Sunset'
	         */
	        readonly destinationSunset: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly displayWaypoints: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Eta'
	         */
	        readonly eta: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Etd'
	         */
	        readonly etd: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Flight Id'
	         */
	        readonly flightId: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Flight Number'
	         */
	        readonly flightNumber: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Flight Status'
	         */
	        readonly flightStatus: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Flight Type'
	         */
	        readonly flightType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Fuel Plan Id'
	         */
	        readonly fuelPlanId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Full Route Geo Shape'
	         */
	        readonly fullRouteGeoShape: $PropType['geoshape'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly jobIdx: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Leg Ids'
	         */
	        readonly legIds: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Legs'
	         */
	        readonly legs: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Legs Names'
	         */
	        readonly legsNames: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Log Id'
	         */
	        readonly logId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly medicId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly medicName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Policy Uuid'
	         */
	        readonly policyUuid: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Region'
	         */
	        readonly region: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly rswId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly rswName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly soId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly soName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopsArray: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Timing Id'
	         */
	        readonly timingId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Total Distance No Alternate'
	         */
	        readonly totalDistanceNoAlternate: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Total Distance Outbound And Alternate'
	         */
	        readonly totalDistanceOutboundAndAlternate: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Total Flight Time'
	         */
	        readonly totalFlightTime: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Total Flight Time With Stops'
	         */
	        readonly totalFlightTimeWithStops: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Total Min Flight Time To Alternate'
	         */
	        readonly totalMinFlightTimeToAlternate: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Updated At'
	         */
	        readonly updatedAt: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly weatherWarnings: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Weight Balance Id'
	         */
	        readonly weightBalanceId: $PropType['string'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<MainFlightObjectFp2, MainFlightObjectFp2.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof MainFlightObjectFp2.Props = keyof MainFlightObjectFp2.Props> = $Osdk.Instance<MainFlightObjectFp2, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof MainFlightObjectFp2.Props = keyof MainFlightObjectFp2.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface MainFlightObjectFp2 extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'MainFlightObjectFp2';
	    __DefinitionMetadata?: {
	        objectSet: MainFlightObjectFp2.ObjectSet;
	        props: MainFlightObjectFp2.Props;
	        linksType: MainFlightObjectFp2.Links;
	        strictProps: MainFlightObjectFp2.StrictProps;
	        apiName: 'MainFlightObjectFp2';
	        description: 'Main Flight Object FP2 ';
	        displayName: 'Main Flight Object FP2 ';
	        icon: {
	            type: 'blueprint';
	            color: '#3FA6DA';
	            name: 'airplane';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {
	            mainFuelV2s: $ObjectMetadata.Link<MainFuelV2, true>;
	            weatherSegments: $ObjectMetadata.Link<NorwayWeatherSegments, true>;
	        };
	        pluralDisplayName: 'Main Flight Object FP2s';
	        primaryKeyApiName: 'flightId';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Additional Crew'
	             */
	            additionalCrew: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Aircraft Id'
	             */
	            aircraftId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate'
	             */
	            alternate: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Full Route Geo Shape'
	             */
	            alternateFullRouteGeoShape: $PropertyDef<'geoshape', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Geo Point'
	             */
	            alternateGeoPoint: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Leg Ids'
	             */
	            alternateLegIds: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Name'
	             */
	            alternateName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            alternateSplitPoint: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Sunrise'
	             */
	            alternateSunrise: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Sunset'
	             */
	            alternateSunset: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'AssetIdx'
	             */
	            assetIdx: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            avgWindDirection: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            avgWindSpeed: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Baggage Weight'
	             */
	            baggageWeight: $PropertyDef<'float', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cancellation Penalty Indicator'
	             */
	            cancellationPenaltyIndicator: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cancellation Reason'
	             */
	            cancellationReason: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cancellation Time'
	             */
	            cancellationTime: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Captain'
	             */
	            captain: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' captainId'
	             */
	            captainId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Combined Waypoints'
	             */
	            combinedWaypoints: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Copilot'
	             */
	            copilot: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            copilotId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Created At'
	             */
	            createdAt: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Created By'
	             */
	            createdBy: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Departure Geo Point'
	             */
	            departureGeoPoint: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Departure Sunrise'
	             */
	            departureSunrise: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Departure Sunset'
	             */
	            departureSunset: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Destination Geo Point'
	             */
	            destinationGeoPoint: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Destination Sunrise'
	             */
	            destinationSunrise: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Destination Sunset'
	             */
	            destinationSunset: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            displayWaypoints: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Eta'
	             */
	            eta: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Etd'
	             */
	            etd: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Flight Id'
	             */
	            flightId: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Flight Number'
	             */
	            flightNumber: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Flight Status'
	             */
	            flightStatus: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Flight Type'
	             */
	            flightType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Fuel Plan Id'
	             */
	            fuelPlanId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Full Route Geo Shape'
	             */
	            fullRouteGeoShape: $PropertyDef<'geoshape', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            jobIdx: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Leg Ids'
	             */
	            legIds: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Legs'
	             */
	            legs: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Legs Names'
	             */
	            legsNames: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Log Id'
	             */
	            logId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            medicId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            medicName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Policy Uuid'
	             */
	            policyUuid: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Region'
	             */
	            region: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            rswId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            rswName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            soId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            soName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopsArray: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Timing Id'
	             */
	            timingId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Total Distance No Alternate'
	             */
	            totalDistanceNoAlternate: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Total Distance Outbound And Alternate'
	             */
	            totalDistanceOutboundAndAlternate: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Total Flight Time'
	             */
	            totalFlightTime: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Total Flight Time With Stops'
	             */
	            totalFlightTimeWithStops: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Total Min Flight Time To Alternate'
	             */
	            totalMinFlightTimeToAlternate: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Updated At'
	             */
	            updatedAt: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            weatherWarnings: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Weight Balance Id'
	             */
	            weightBalanceId: $PropertyDef<'string', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.b0100bc5-39d5-4e0a-9f5e-b757c7de9968';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'flightNumber';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const MainFlightObjectFp2: MainFlightObjectFp2;
}
/** /@flight-app/sdk/ontology/objects/MainFuelV2 **/
declare module "@flight-app/sdk/ontology/objects/MainFuelV2" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { MainFlightObjectFp2 } from '@flight-app/sdk/ontology/objects/MainFlightObjectFp2';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition, ObjectMetadata as $ObjectMetadata } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType, SingleLinkAccessor as $SingleLinkAccessor } from 'internal/@osdk/client';
	export namespace MainFuelV2 {
	    type PropertyKeys = 'plannedApproachFuel' | 'plannedReserveFuel' | 'actualFuelUplifteds' | 'minFuelBreakdown' | 'flightNumber' | 'plannedAraFuel' | 'stopDescriptions' | 'minTotalFuel' | 'stopExtraFuels' | 'stopReserveFuels' | 'refuelStopIndices' | 'totalFuelUplifted' | 'actualLandingFuels' | 'actualOffBlocksFuels' | 'actualPassengerWeight' | 'stopsMarkdownTable' | 'availablePassengers' | 'stopTripFuels' | 'actualFuelBurneds' | 'stopApproachFuels' | 'stopLocations' | 'actualTotalWeight' | 'requestedTotalWeight' | 'updatedAt' | 'availableWeight' | 'plannedDeckFuel' | 'plannedTaxiFuel' | 'weightBalanceData' | 'plannedContingencyAlternateFuel' | 'actualPassengers' | 'displayUnit' | 'actualBagWeight' | 'actualOnBlocksFuels' | 'averagePassengerWeight' | 'usesCombinedWeight' | 'aircraft' | 'averageBagWeight' | 'requestedBagWeight' | 'stopDeckFuels' | 'policyUuid' | 'createdAt' | 'stopContingencyFuels' | 'totalFuelBurned' | 'requestedPassengerWeight' | 'automationSummary' | 'plannedAlternateFuel' | 'flightUuid' | 'stopAraFuels' | 'uuid' | 'stopTaxiFuels' | 'passengerAdjustmentData' | 'roundTripFuel' | 'stopRequiredFuels' | 'plannedExtraFuel' | 'plannedTripFuel' | 'requestedPassengers' | 'actualTakeOffFuels' | 'plannedContingencyFuel' | 'actualLegNames' | 'calculationUnit' | 'policyName' | 'refuelAmounts' | 'stopExcessFuels';
	    interface Links {
	        readonly mainFlightObjectFp2: $SingleLinkAccessor<MainFlightObjectFp2>;
	    }
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualBagWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualFuelBurneds: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualFuelUplifteds: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualLandingFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualLegNames: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualOffBlocksFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualOnBlocksFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualPassengers: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualPassengerWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly actualTakeOffFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' actualTotalWeight'
	         */
	        readonly actualTotalWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly aircraft: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly automationSummary: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly availablePassengers: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' availableWeight'
	         */
	        readonly availableWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly averageBagWeight: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly averagePassengerWeight: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly calculationUnit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly createdAt: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly displayUnit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly flightNumber: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly flightUuid: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly minFuelBreakdown: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly minTotalFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly passengerAdjustmentData: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly plannedAlternateFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly plannedApproachFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' plannedAraFuel'
	         */
	        readonly plannedAraFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly plannedContingencyAlternateFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly plannedContingencyFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly plannedDeckFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' plannedExtraFuel'
	         */
	        readonly plannedExtraFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly plannedReserveFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly plannedTaxiFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: '  plannedTripFuel'
	         */
	        readonly plannedTripFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly policyName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly policyUuid: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' refuelAmounts'
	         */
	        readonly refuelAmounts: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' refuelStopIndices'
	         */
	        readonly refuelStopIndices: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly requestedBagWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' requestedPassengers'
	         */
	        readonly requestedPassengers: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly requestedPassengerWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly requestedTotalWeight: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly roundTripFuel: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopApproachFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopAraFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopContingencyFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopDeckFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopDescriptions: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopExcessFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' stopExtraFuels'
	         */
	        readonly stopExtraFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' stopLocations'
	         */
	        readonly stopLocations: $PropType['string'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'stopRequiredFuels '
	         */
	        readonly stopRequiredFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopReserveFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopsMarkdownTable: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly stopTaxiFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' stopTripFuels'
	         */
	        readonly stopTripFuels: $PropType['integer'][] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly totalFuelBurned: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly totalFuelUplifted: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' updatedAt'
	         */
	        readonly updatedAt: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly usesCombinedWeight: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: ' uuid'
	         */
	        readonly uuid: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly weightBalanceData: $PropType['string'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<MainFuelV2, MainFuelV2.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof MainFuelV2.Props = keyof MainFuelV2.Props> = $Osdk.Instance<MainFuelV2, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof MainFuelV2.Props = keyof MainFuelV2.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface MainFuelV2 extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'MainFuelV2';
	    __DefinitionMetadata?: {
	        objectSet: MainFuelV2.ObjectSet;
	        props: MainFuelV2.Props;
	        linksType: MainFuelV2.Links;
	        strictProps: MainFuelV2.StrictProps;
	        apiName: 'MainFuelV2';
	        description: 'Main fuel object for flight planner V2';
	        displayName: 'Main Fuel V2';
	        icon: {
	            type: 'blueprint';
	            color: '#3FA6DA';
	            name: 'fuel';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {
	            mainFlightObjectFp2: $ObjectMetadata.Link<MainFlightObjectFp2, false>;
	        };
	        pluralDisplayName: 'Main Fuel V2s';
	        primaryKeyApiName: 'uuid';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualBagWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualFuelBurneds: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualFuelUplifteds: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualLandingFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualLegNames: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualOffBlocksFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualOnBlocksFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualPassengers: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualPassengerWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            actualTakeOffFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' actualTotalWeight'
	             */
	            actualTotalWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            aircraft: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            automationSummary: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            availablePassengers: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' availableWeight'
	             */
	            availableWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            averageBagWeight: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            averagePassengerWeight: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            calculationUnit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            createdAt: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            displayUnit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            flightNumber: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            flightUuid: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            minFuelBreakdown: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            minTotalFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            passengerAdjustmentData: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            plannedAlternateFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            plannedApproachFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' plannedAraFuel'
	             */
	            plannedAraFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            plannedContingencyAlternateFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            plannedContingencyFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            plannedDeckFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' plannedExtraFuel'
	             */
	            plannedExtraFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            plannedReserveFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            plannedTaxiFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: '  plannedTripFuel'
	             */
	            plannedTripFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            policyName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            policyUuid: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' refuelAmounts'
	             */
	            refuelAmounts: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' refuelStopIndices'
	             */
	            refuelStopIndices: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            requestedBagWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' requestedPassengers'
	             */
	            requestedPassengers: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            requestedPassengerWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            requestedTotalWeight: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            roundTripFuel: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopApproachFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopAraFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopContingencyFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopDeckFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopDescriptions: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopExcessFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' stopExtraFuels'
	             */
	            stopExtraFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' stopLocations'
	             */
	            stopLocations: $PropertyDef<'string', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'stopRequiredFuels '
	             */
	            stopRequiredFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopReserveFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopsMarkdownTable: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            stopTaxiFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' stopTripFuels'
	             */
	            stopTripFuels: $PropertyDef<'integer', 'nullable', 'array'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            totalFuelBurned: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            totalFuelUplifted: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' updatedAt'
	             */
	            updatedAt: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            usesCombinedWeight: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: ' uuid'
	             */
	            uuid: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            weightBalanceData: $PropertyDef<'string', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.250465c9-55b6-42a5-b6da-806ffafd35a8';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'flightNumber';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const MainFuelV2: MainFuelV2;
}
/** /@flight-app/sdk/ontology/objects/NorwayWeatherDatav2 **/
declare module "@flight-app/sdk/ontology/objects/NorwayWeatherDatav2" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace NorwayWeatherDatav2 {
	    type PropertyKeys = 'waveHeights' | 'windSpeed' | 'uniqueId' | 'rawMetar' | 'fullName' | 'visibilityScore' | 'lightningChance' | 'delayChance' | 'rawTaf' | 'timestamp' | 'windDirection' | 'icaoCode' | 'weatherId' | 'locationId' | 'parsedData';
	    type Links = {};
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Delay Chance'
	         */
	        readonly delayChance: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Full Name'
	         */
	        readonly fullName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Icao Code'
	         */
	        readonly icaoCode: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Lightning Chance'
	         */
	        readonly lightningChance: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Location Id'
	         */
	        readonly locationId: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Parsed Data'
	         */
	        readonly parsedData: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Raw Metar'
	         */
	        readonly rawMetar: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Raw Taf'
	         */
	        readonly rawTaf: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Timestamp'
	         */
	        readonly timestamp: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Unique ID'
	         */
	        readonly uniqueId: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Visibility Score'
	         */
	        readonly visibilityScore: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Wave Heights'
	         */
	        readonly waveHeights: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Weather Id'
	         */
	        readonly weatherId: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Wind Direction'
	         */
	        readonly windDirection: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Wind Speed'
	         */
	        readonly windSpeed: $PropType['integer'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<NorwayWeatherDatav2, NorwayWeatherDatav2.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof NorwayWeatherDatav2.Props = keyof NorwayWeatherDatav2.Props> = $Osdk.Instance<NorwayWeatherDatav2, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof NorwayWeatherDatav2.Props = keyof NorwayWeatherDatav2.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface NorwayWeatherDatav2 extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'NorwayWeatherDatav2';
	    __DefinitionMetadata?: {
	        objectSet: NorwayWeatherDatav2.ObjectSet;
	        props: NorwayWeatherDatav2.Props;
	        linksType: NorwayWeatherDatav2.Links;
	        strictProps: NorwayWeatherDatav2.StrictProps;
	        apiName: 'NorwayWeatherDatav2';
	        description: 'Norway weather hook and parser';
	        displayName: 'NorwayWeatherDatav2';
	        icon: {
	            type: 'blueprint';
	            color: '#F5498B';
	            name: 'cloud-tick';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {};
	        pluralDisplayName: 'Norway Weather Datav2s';
	        primaryKeyApiName: 'uniqueId';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Delay Chance'
	             */
	            delayChance: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Full Name'
	             */
	            fullName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Icao Code'
	             */
	            icaoCode: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Lightning Chance'
	             */
	            lightningChance: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Location Id'
	             */
	            locationId: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Parsed Data'
	             */
	            parsedData: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Raw Metar'
	             */
	            rawMetar: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Raw Taf'
	             */
	            rawTaf: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Timestamp'
	             */
	            timestamp: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Unique ID'
	             */
	            uniqueId: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Visibility Score'
	             */
	            visibilityScore: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Wave Heights'
	             */
	            waveHeights: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Weather Id'
	             */
	            weatherId: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Wind Direction'
	             */
	            windDirection: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Wind Speed'
	             */
	            windSpeed: $PropertyDef<'integer', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.b63775ec-7e22-48f3-b260-8ef6e6ebf00e';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'icaoCode';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const NorwayWeatherDatav2: NorwayWeatherDatav2;
}
/** /@flight-app/sdk/ontology/objects/NorwayWeatherSegments **/
declare module "@flight-app/sdk/ontology/objects/NorwayWeatherSegments" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { AllGtLocationsV2 } from '@flight-app/sdk/ontology/objects/AllGtLocationsV2';
	import type { MainFlightObjectFp2 } from '@flight-app/sdk/ontology/objects/MainFlightObjectFp2';
	import type { InternationalWeather } from '@flight-app/sdk/ontology/objects/InternationalWeather';
	import type { NorwayWeatherXv8 } from '@flight-app/sdk/ontology/objects/NorwayWeatherXv8';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition, ObjectMetadata as $ObjectMetadata } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType, SingleLinkAccessor as $SingleLinkAccessor } from 'internal/@osdk/client';
	export namespace NorwayWeatherSegments {
	    type PropertyKeys = 'approachRanking' | 'crosswindComponent' | 'uniqueId' | 'araRequired' | 'geoPoint' | 'estimatedFlightTime' | 'alternateRanking' | 'isAlternateFor' | 'ranking9' | 'ranking8' | 'ranking7' | 'ranking6' | 'ranking5' | 'ranking4' | 'ranking3' | 'alternateBearing' | 'ranking2' | 'ranking1' | 'windDirection' | 'notams' | 'limitations' | 'ranking10' | 'isAccessible' | 'windSpeed' | 'airportRanking' | 'segment10' | 'isDaytime' | 'warnings' | 'deckReport' | 'flightUuid' | 'isRig' | 'distanceFromDeparture' | 'weatherSource' | 'distanceFromDestination' | 'sunset' | 'sunrise' | 'altRunway' | 'alternateGeoShape' | 'rawMetar' | 'rawTaf' | 'timestamp' | 'airportIcao' | 'segment1' | 'segment3' | 'segment2' | 'segment5' | 'segment4' | 'approachSegment' | 'segment7' | 'arrivalTime' | 'segment6' | 'altApproachType' | 'segment9' | 'segment8' | 'distanceForAlternate';
	    interface Links {
	        readonly allGtLocationsV2: $SingleLinkAccessor<AllGtLocationsV2>;
	        readonly internationalWeather: $SingleLinkAccessor<InternationalWeather>;
	        readonly mainFlightObjectFp2: $SingleLinkAccessor<MainFlightObjectFp2>;
	        readonly norwayWeatherXv8: $SingleLinkAccessor<NorwayWeatherXv8>;
	    }
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Airport Icao',
	         *
	         *   description: weather segment location name
	         */
	        readonly airportIcao: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly airportRanking: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly altApproachType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly alternateBearing: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly alternateGeoShape: $PropType['geoshape'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly alternateRanking: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly altRunway: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly approachRanking: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly approachSegment: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ara Required'
	         */
	        readonly araRequired: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Arrival Time'
	         */
	        readonly arrivalTime: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly crosswindComponent: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Deck Report'
	         */
	        readonly deckReport: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly distanceForAlternate: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly distanceFromDeparture: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly distanceFromDestination: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly estimatedFlightTime: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Flight Uuid'
	         */
	        readonly flightUuid: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Geo Point'
	         */
	        readonly geoPoint: $PropType['geopoint'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Is Accessible'
	         */
	        readonly isAccessible: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly isAlternateFor: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Is Daytime'
	         */
	        readonly isDaytime: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Is Rig'
	         */
	        readonly isRig: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Limitations'
	         */
	        readonly limitations: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Notams'
	         */
	        readonly notams: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 1'
	         */
	        readonly ranking1: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 10'
	         */
	        readonly ranking10: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 2'
	         */
	        readonly ranking2: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 3'
	         */
	        readonly ranking3: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 4'
	         */
	        readonly ranking4: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 5'
	         */
	        readonly ranking5: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 6'
	         */
	        readonly ranking6: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 7'
	         */
	        readonly ranking7: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 8'
	         */
	        readonly ranking8: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Ranking 9'
	         */
	        readonly ranking9: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Raw Metar'
	         */
	        readonly rawMetar: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Raw Taf'
	         */
	        readonly rawTaf: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 1'
	         */
	        readonly segment1: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 10'
	         */
	        readonly segment10: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 2'
	         */
	        readonly segment2: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 3'
	         */
	        readonly segment3: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 4'
	         */
	        readonly segment4: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 5'
	         */
	        readonly segment5: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 6'
	         */
	        readonly segment6: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 7'
	         */
	        readonly segment7: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 8'
	         */
	        readonly segment8: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Segment 9'
	         */
	        readonly segment9: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Sunrise'
	         */
	        readonly sunrise: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Sunset'
	         */
	        readonly sunset: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Timestamp'
	         */
	        readonly timestamp: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Unique ID'
	         */
	        readonly uniqueId: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Warnings'
	         */
	        readonly warnings: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Weather Source'
	         */
	        readonly weatherSource: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly windDirection: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly windSpeed: $PropType['integer'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<NorwayWeatherSegments, NorwayWeatherSegments.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof NorwayWeatherSegments.Props = keyof NorwayWeatherSegments.Props> = $Osdk.Instance<NorwayWeatherSegments, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof NorwayWeatherSegments.Props = keyof NorwayWeatherSegments.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface NorwayWeatherSegments extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'NorwayWeatherSegments';
	    __DefinitionMetadata?: {
	        objectSet: NorwayWeatherSegments.ObjectSet;
	        props: NorwayWeatherSegments.Props;
	        linksType: NorwayWeatherSegments.Links;
	        strictProps: NorwayWeatherSegments.StrictProps;
	        apiName: 'NorwayWeatherSegments';
	        description: 'Norway weather segments colour coded for display';
	        displayName: 'Weather segments';
	        icon: {
	            type: 'blueprint';
	            color: '#F5498B';
	            name: 'rain';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {
	            allGtLocationsV2: $ObjectMetadata.Link<AllGtLocationsV2, false>;
	            internationalWeather: $ObjectMetadata.Link<InternationalWeather, false>;
	            mainFlightObjectFp2: $ObjectMetadata.Link<MainFlightObjectFp2, false>;
	            norwayWeatherXv8: $ObjectMetadata.Link<NorwayWeatherXv8, false>;
	        };
	        pluralDisplayName: 'Weather segments';
	        primaryKeyApiName: 'uniqueId';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Airport Icao',
	             *
	             *   description: weather segment location name
	             */
	            airportIcao: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            airportRanking: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            altApproachType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            alternateBearing: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            alternateGeoShape: $PropertyDef<'geoshape', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            alternateRanking: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            altRunway: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            approachRanking: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            approachSegment: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ara Required'
	             */
	            araRequired: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Arrival Time'
	             */
	            arrivalTime: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            crosswindComponent: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Deck Report'
	             */
	            deckReport: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            distanceForAlternate: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            distanceFromDeparture: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            distanceFromDestination: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            estimatedFlightTime: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Flight Uuid'
	             */
	            flightUuid: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Geo Point'
	             */
	            geoPoint: $PropertyDef<'geopoint', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Is Accessible'
	             */
	            isAccessible: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            isAlternateFor: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Is Daytime'
	             */
	            isDaytime: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Is Rig'
	             */
	            isRig: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Limitations'
	             */
	            limitations: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Notams'
	             */
	            notams: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 1'
	             */
	            ranking1: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 10'
	             */
	            ranking10: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 2'
	             */
	            ranking2: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 3'
	             */
	            ranking3: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 4'
	             */
	            ranking4: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 5'
	             */
	            ranking5: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 6'
	             */
	            ranking6: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 7'
	             */
	            ranking7: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 8'
	             */
	            ranking8: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Ranking 9'
	             */
	            ranking9: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Raw Metar'
	             */
	            rawMetar: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Raw Taf'
	             */
	            rawTaf: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 1'
	             */
	            segment1: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 10'
	             */
	            segment10: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 2'
	             */
	            segment2: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 3'
	             */
	            segment3: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 4'
	             */
	            segment4: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 5'
	             */
	            segment5: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 6'
	             */
	            segment6: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 7'
	             */
	            segment7: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 8'
	             */
	            segment8: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Segment 9'
	             */
	            segment9: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Sunrise'
	             */
	            sunrise: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Sunset'
	             */
	            sunset: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Timestamp'
	             */
	            timestamp: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Unique ID'
	             */
	            uniqueId: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Warnings'
	             */
	            warnings: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Weather Source'
	             */
	            weatherSource: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            windDirection: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            windSpeed: $PropertyDef<'integer', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.bfa83e2a-da8c-4f17-9f41-645d90b73745';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'airportIcao';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const NorwayWeatherSegments: NorwayWeatherSegments;
}
/** /@flight-app/sdk/ontology/objects/NorwayWeatherXv8 **/
declare module "@flight-app/sdk/ontology/objects/NorwayWeatherXv8" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { AllGtLocationsV2 } from '@flight-app/sdk/ontology/objects/AllGtLocationsV2';
	import type { NorwayWeatherSegments } from '@flight-app/sdk/ontology/objects/NorwayWeatherSegments';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition, ObjectMetadata as $ObjectMetadata } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace NorwayWeatherXv8 {
	    type PropertyKeys = 'waveHeights' | 'windSpeed' | 'rawMetar' | 'fullName' | 'visibilityScore' | 'delayChance' | 'lightningChance' | 'rawTaf' | 'timestamp' | 'windDirection' | 'icaoCode' | 'weatherId' | 'uuid' | 'locationId' | 'geopoint' | 'isAirport' | 'parsedData';
	    interface Links {
	        readonly allGtLocationsV2: AllGtLocationsV2.ObjectSet;
	        readonly norwayWeatherSegments: NorwayWeatherSegments.ObjectSet;
	    }
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Delay Chance'
	         */
	        readonly delayChance: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Full Name'
	         */
	        readonly fullName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Geopoint'
	         */
	        readonly geopoint: $PropType['geopoint'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly icaoCode: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly isAirport: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Lightning Chance'
	         */
	        readonly lightningChance: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Location Id'
	         */
	        readonly locationId: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Parsed Data'
	         */
	        readonly parsedData: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Raw Metar'
	         */
	        readonly rawMetar: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Raw Taf'
	         */
	        readonly rawTaf: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Timestamp'
	         */
	        readonly timestamp: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Uuid'
	         */
	        readonly uuid: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Visibility Score'
	         */
	        readonly visibilityScore: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Wave Heights'
	         */
	        readonly waveHeights: $PropType['double'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Weather Id'
	         */
	        readonly weatherId: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Wind Direction'
	         */
	        readonly windDirection: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Wind Speed'
	         */
	        readonly windSpeed: $PropType['integer'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<NorwayWeatherXv8, NorwayWeatherXv8.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof NorwayWeatherXv8.Props = keyof NorwayWeatherXv8.Props> = $Osdk.Instance<NorwayWeatherXv8, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof NorwayWeatherXv8.Props = keyof NorwayWeatherXv8.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface NorwayWeatherXv8 extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'NorwayWeatherXv8';
	    __DefinitionMetadata?: {
	        objectSet: NorwayWeatherXv8.ObjectSet;
	        props: NorwayWeatherXv8.Props;
	        linksType: NorwayWeatherXv8.Links;
	        strictProps: NorwayWeatherXv8.StrictProps;
	        apiName: 'NorwayWeatherXv8';
	        description: 'Weather backing for Norway dburbury';
	        displayName: 'norwayWeatherXV8';
	        icon: {
	            type: 'blueprint';
	            color: '#F5498B';
	            name: 'cloud-upload';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {
	            allGtLocationsV2: $ObjectMetadata.Link<AllGtLocationsV2, true>;
	            norwayWeatherSegments: $ObjectMetadata.Link<NorwayWeatherSegments, true>;
	        };
	        pluralDisplayName: 'norway Weather XV8s';
	        primaryKeyApiName: 'icaoCode';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Delay Chance'
	             */
	            delayChance: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Full Name'
	             */
	            fullName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Geopoint'
	             */
	            geopoint: $PropertyDef<'geopoint', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            icaoCode: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            isAirport: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Lightning Chance'
	             */
	            lightningChance: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Location Id'
	             */
	            locationId: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Parsed Data'
	             */
	            parsedData: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Raw Metar'
	             */
	            rawMetar: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Raw Taf'
	             */
	            rawTaf: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Timestamp'
	             */
	            timestamp: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Uuid'
	             */
	            uuid: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Visibility Score'
	             */
	            visibilityScore: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Wave Heights'
	             */
	            waveHeights: $PropertyDef<'double', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Weather Id'
	             */
	            weatherId: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Wind Direction'
	             */
	            windDirection: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Wind Speed'
	             */
	            windSpeed: $PropertyDef<'integer', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.5e395d80-3943-4d68-bab8-868234be8fff';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'icaoCode';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const NorwayWeatherXv8: NorwayWeatherXv8;
}
/** /@flight-app/sdk/ontology/objects/RegionalWeatherMinimaSettings **/
declare module "@flight-app/sdk/ontology/objects/RegionalWeatherMinimaSettings" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace RegionalWeatherMinimaSettings {
	    type PropertyKeys = 'updatedBy' | 'rigDayMinVisibility' | 'uniqueId' | 'averagePassengerWeight' | 'alternateDayMinCeiling' | 'takeoffNightMinCeiling' | 'geoPoint' | 'rigDayAraMinVisibility' | 'rigNightMinCeiling' | 'region' | 'alternateDayMinVisibility' | 'rigDayAraMinCeiling' | 'approachNightMinCeiling' | 'rigDayMinCeiling' | 'rigNightAraMinCeiling' | 'takeoffDayMinCeiling' | 'approachDayMinVisibility' | 'alternateNightMinCeiling' | 'maxWindSpeed' | 'timestamp' | 'maxCrossWind' | 'rigNightMinVisibility' | 'alternateNightMinVisibility' | 'takeoffNightMinVisibility' | 'approachDayMinCeiling' | 'rigNightAraMinVisibility' | 'approachNightMinVisibility' | 'takeoffDayMinVisibility';
	    type Links = {};
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Day Min Ceiling'
	         */
	        readonly alternateDayMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Day Min Visibility'
	         */
	        readonly alternateDayMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Night Min Ceiling'
	         */
	        readonly alternateNightMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Alternate Night Min Visibility'
	         */
	        readonly alternateNightMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Approach Day Min Ceiling'
	         */
	        readonly approachDayMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Approach Day Min Visibility'
	         */
	        readonly approachDayMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Approach Night Min Ceiling'
	         */
	        readonly approachNightMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Approach Night Min Visibility'
	         */
	        readonly approachNightMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         */
	        readonly averagePassengerWeight: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Geo Point'
	         */
	        readonly geoPoint: $PropType['geopoint'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Max Cross Wind'
	         */
	        readonly maxCrossWind: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Max Wind Speed'
	         */
	        readonly maxWindSpeed: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Region'
	         */
	        readonly region: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Rig Day Ara Min Ceiling'
	         */
	        readonly rigDayAraMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Rig Day Ara Min Visibility'
	         */
	        readonly rigDayAraMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Rig Day Min Ceiling'
	         */
	        readonly rigDayMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Rig Day Min Visibility'
	         */
	        readonly rigDayMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Rig Night Ara Min Ceiling'
	         */
	        readonly rigNightAraMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Rig Night Ara Min Visibility'
	         */
	        readonly rigNightAraMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Rig Night Min Ceiling'
	         */
	        readonly rigNightMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Rig Night Min Visibility'
	         */
	        readonly rigNightMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Takeoff Day Min Ceiling'
	         */
	        readonly takeoffDayMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Takeoff Day Min Visibility'
	         */
	        readonly takeoffDayMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Takeoff Night Min Ceiling'
	         */
	        readonly takeoffNightMinCeiling: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Takeoff Night Min Visibility'
	         */
	        readonly takeoffNightMinVisibility: $PropType['integer'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Timestamp'
	         */
	        readonly timestamp: $PropType['timestamp'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Unique ID'
	         */
	        readonly uniqueId: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Updated By'
	         */
	        readonly updatedBy: $PropType['string'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<RegionalWeatherMinimaSettings, RegionalWeatherMinimaSettings.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof RegionalWeatherMinimaSettings.Props = keyof RegionalWeatherMinimaSettings.Props> = $Osdk.Instance<RegionalWeatherMinimaSettings, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof RegionalWeatherMinimaSettings.Props = keyof RegionalWeatherMinimaSettings.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface RegionalWeatherMinimaSettings extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'RegionalWeatherMinimaSettings';
	    __DefinitionMetadata?: {
	        objectSet: RegionalWeatherMinimaSettings.ObjectSet;
	        props: RegionalWeatherMinimaSettings.Props;
	        linksType: RegionalWeatherMinimaSettings.Links;
	        strictProps: RegionalWeatherMinimaSettings.StrictProps;
	        apiName: 'RegionalWeatherMinimaSettings';
	        description: 'Setting for regional minimas';
	        displayName: 'Regional Weather Minima Settings';
	        icon: {
	            type: 'blueprint';
	            color: '#F5498B';
	            name: 'rain';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {};
	        pluralDisplayName: 'Regional Weather Minima Settings';
	        primaryKeyApiName: 'uniqueId';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Day Min Ceiling'
	             */
	            alternateDayMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Day Min Visibility'
	             */
	            alternateDayMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Night Min Ceiling'
	             */
	            alternateNightMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Alternate Night Min Visibility'
	             */
	            alternateNightMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Approach Day Min Ceiling'
	             */
	            approachDayMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Approach Day Min Visibility'
	             */
	            approachDayMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Approach Night Min Ceiling'
	             */
	            approachNightMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Approach Night Min Visibility'
	             */
	            approachNightMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             */
	            averagePassengerWeight: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Geo Point'
	             */
	            geoPoint: $PropertyDef<'geopoint', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Max Cross Wind'
	             */
	            maxCrossWind: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Max Wind Speed'
	             */
	            maxWindSpeed: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Region'
	             */
	            region: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Rig Day Ara Min Ceiling'
	             */
	            rigDayAraMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Rig Day Ara Min Visibility'
	             */
	            rigDayAraMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Rig Day Min Ceiling'
	             */
	            rigDayMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Rig Day Min Visibility'
	             */
	            rigDayMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Rig Night Ara Min Ceiling'
	             */
	            rigNightAraMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Rig Night Ara Min Visibility'
	             */
	            rigNightAraMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Rig Night Min Ceiling'
	             */
	            rigNightMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Rig Night Min Visibility'
	             */
	            rigNightMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Takeoff Day Min Ceiling'
	             */
	            takeoffDayMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Takeoff Day Min Visibility'
	             */
	            takeoffDayMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Takeoff Night Min Ceiling'
	             */
	            takeoffNightMinCeiling: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Takeoff Night Min Visibility'
	             */
	            takeoffNightMinVisibility: $PropertyDef<'integer', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Timestamp'
	             */
	            timestamp: $PropertyDef<'timestamp', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Unique ID'
	             */
	            uniqueId: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Updated By'
	             */
	            updatedBy: $PropertyDef<'string', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.43a0da92-4be6-4832-81ff-c7290a85451f';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'region';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const RegionalWeatherMinimaSettings: RegionalWeatherMinimaSettings;
}
/** /@flight-app/sdk/ontology/objects/User **/
declare module "@flight-app/sdk/ontology/objects/User" {
	import type { PropertyDef as $PropertyDef } from 'internal/@osdk/client';
	import { $osdkMetadata } from '@flight-app/sdk/OntologyMetadata';
	import type { ObjectTypeDefinition as $ObjectTypeDefinition } from 'internal/@osdk/client';
	import type { ObjectSet as $ObjectSet, Osdk as $Osdk, PropertyValueWireToClient as $PropType } from 'internal/@osdk/client';
	export namespace User {
	    type PropertyKeys = 'workShift' | 'email' | 'costCenterName' | 'scheduleTsSync' | 'startDate' | 'jobName' | 'userId' | 'status' | 'costCenterId' | 'employeeId' | 'location' | 'fullName' | 'dateOfBirth' | 'timeZone' | 'deptId' | 'sapCompanyId' | 'userPersonType' | 'jobId' | 'foundryUsername' | 'isPilot' | 'username' | 'foundryEmail' | 'jobFamilyGroup' | 'aoc' | 'orgUnit' | 'organization' | 'endDate' | 'country' | 'foundryUserId' | 'lastName' | 'deptName' | 'employeeNumber' | 'assignmentEndDate' | 'jobDescription' | 'firstName' | 'orgAoc' | 'assignmentStartDate' | 'supervisorEmpNumber' | 'state' | 'companyName';
	    type Links = {};
	    interface Props {
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Aoc'
	         */
	        readonly aoc: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Assignment End Date'
	         */
	        readonly assignmentEndDate: $PropType['datetime'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Assignment Start Date'
	         */
	        readonly assignmentStartDate: $PropType['datetime'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Company Name'
	         */
	        readonly companyName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cost Center Id'
	         */
	        readonly costCenterId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Cost Center Name'
	         */
	        readonly costCenterName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Country'
	         */
	        readonly country: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Date Of Birth'
	         */
	        readonly dateOfBirth: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Dept Id'
	         */
	        readonly deptId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Dept Name'
	         */
	        readonly deptName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Email'
	         */
	        readonly email: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Employee Id'
	         */
	        readonly employeeId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Employee Number'
	         */
	        readonly employeeNumber: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'End Date'
	         */
	        readonly endDate: $PropType['datetime'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'First Name'
	         */
	        readonly firstName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Foundry Email'
	         */
	        readonly foundryEmail: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Foundry User Id'
	         */
	        readonly foundryUserId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Foundry Username'
	         */
	        readonly foundryUsername: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Full Name'
	         */
	        readonly fullName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Is Pilot'
	         */
	        readonly isPilot: $PropType['boolean'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Job Description'
	         */
	        readonly jobDescription: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Job Family Group'
	         */
	        readonly jobFamilyGroup: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Job Id'
	         */
	        readonly jobId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Job Name'
	         */
	        readonly jobName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Last Name'
	         */
	        readonly lastName: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Location'
	         */
	        readonly location: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Organization'
	         */
	        readonly organization: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Org Aoc'
	         */
	        readonly orgAoc: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Org Unit'
	         */
	        readonly orgUnit: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Sap Company Id'
	         */
	        readonly sapCompanyId: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Schedule Ts Sync'
	         */
	        readonly scheduleTsSync: $PropType['stringTimeseries'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Start Date'
	         */
	        readonly startDate: $PropType['datetime'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'State'
	         */
	        readonly state: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Status'
	         */
	        readonly status: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Supervisor Emp Number'
	         */
	        readonly supervisorEmpNumber: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Time Zone'
	         */
	        readonly timeZone: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'User Id'
	         */
	        readonly userId: $PropType['string'];
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Username'
	         */
	        readonly username: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'User Person Type'
	         */
	        readonly userPersonType: $PropType['string'] | undefined;
	        /**
	         * @experimental
	         *
	         *   property status: experimental
	         *
	         *   display name: 'Work Shift'
	         */
	        readonly workShift: $PropType['string'] | undefined;
	    }
	    type StrictProps = Props;
	    interface ObjectSet extends $ObjectSet<User, User.ObjectSet> {
	    }
	    type OsdkInstance<OPTIONS extends never | '$rid' = never, K extends keyof User.Props = keyof User.Props> = $Osdk.Instance<User, OPTIONS, K>;
	    /** @deprecated use OsdkInstance */
	    type OsdkObject<OPTIONS extends never | '$rid' = never, K extends keyof User.Props = keyof User.Props> = OsdkInstance<OPTIONS, K>;
	}
	export interface User extends $ObjectTypeDefinition {
	    osdkMetadata: typeof $osdkMetadata;
	    type: 'object';
	    apiName: 'User';
	    __DefinitionMetadata?: {
	        objectSet: User.ObjectSet;
	        props: User.Props;
	        linksType: User.Links;
	        strictProps: User.StrictProps;
	        apiName: 'User';
	        description: '';
	        displayName: 'User';
	        icon: {
	            type: 'blueprint';
	            color: '#61c7f9';
	            name: 'mugshot';
	        };
	        implements: [];
	        interfaceMap: {};
	        inverseInterfaceMap: {};
	        links: {};
	        pluralDisplayName: 'Users';
	        primaryKeyApiName: 'userId';
	        primaryKeyType: 'string';
	        properties: {
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Aoc'
	             */
	            aoc: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Assignment End Date'
	             */
	            assignmentEndDate: $PropertyDef<'datetime', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Assignment Start Date'
	             */
	            assignmentStartDate: $PropertyDef<'datetime', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Company Name'
	             */
	            companyName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cost Center Id'
	             */
	            costCenterId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Cost Center Name'
	             */
	            costCenterName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Country'
	             */
	            country: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Date Of Birth'
	             */
	            dateOfBirth: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Dept Id'
	             */
	            deptId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Dept Name'
	             */
	            deptName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Email'
	             */
	            email: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Employee Id'
	             */
	            employeeId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Employee Number'
	             */
	            employeeNumber: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'End Date'
	             */
	            endDate: $PropertyDef<'datetime', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'First Name'
	             */
	            firstName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Foundry Email'
	             */
	            foundryEmail: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Foundry User Id'
	             */
	            foundryUserId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Foundry Username'
	             */
	            foundryUsername: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Full Name'
	             */
	            fullName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Is Pilot'
	             */
	            isPilot: $PropertyDef<'boolean', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Job Description'
	             */
	            jobDescription: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Job Family Group'
	             */
	            jobFamilyGroup: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Job Id'
	             */
	            jobId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Job Name'
	             */
	            jobName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Last Name'
	             */
	            lastName: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Location'
	             */
	            location: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Organization'
	             */
	            organization: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Org Aoc'
	             */
	            orgAoc: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Org Unit'
	             */
	            orgUnit: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Sap Company Id'
	             */
	            sapCompanyId: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Schedule Ts Sync'
	             */
	            scheduleTsSync: $PropertyDef<'stringTimeseries', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Start Date'
	             */
	            startDate: $PropertyDef<'datetime', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'State'
	             */
	            state: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Status'
	             */
	            status: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Supervisor Emp Number'
	             */
	            supervisorEmpNumber: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Time Zone'
	             */
	            timeZone: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'User Id'
	             */
	            userId: $PropertyDef<'string', 'non-nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Username'
	             */
	            username: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'User Person Type'
	             */
	            userPersonType: $PropertyDef<'string', 'nullable', 'single'>;
	            /**
	             * @experimental
	             *
	             *   property status: experimental
	             *
	             *   display name: 'Work Shift'
	             */
	            workShift: $PropertyDef<'string', 'nullable', 'single'>;
	        };
	        rid: 'ri.ontology.main.object-type.bf45a3bd-f60f-400e-8fcf-5adc0a44e8de';
	        status: 'EXPERIMENTAL';
	        titleProperty: 'fullName';
	        type: 'object';
	        visibility: 'NORMAL';
	    };
	}
	export const User: User;
}